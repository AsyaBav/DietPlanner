import asyncio
import logging
import random
from aiogram import types, F, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from datetime import datetime

from database import (
    save_recipe, get_saved_recipes, get_recipe_details, toggle_favorite_recipe,
    delete_recipe, add_food_entry, get_user
)
from keyboards import create_recipes_keyboard, create_recipe_confirmation_keyboard
from food_api import search_food, get_food_nutrients, get_branded_food_info

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
BASE_RECIPES = {
    "üîª –ü–æ—Ö—É–¥–µ–Ω–∏–µ": [
        {
            "name": "–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π",
            "ingredients": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150 –≥\n–õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞ - 80 –≥\n–û–≥—É—Ä–µ—Ü - 1 —à—Ç\n–ü–æ–º–∏–¥–æ—Ä - 1 —à—Ç\n–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —á.–ª.\n–õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 1 —Å—Ç.–ª.\n–°–æ–ª—å, –ø–µ—Ä–µ—Ü - –ø–æ –≤–∫—É—Å—É",
            "instructions": "1. –ö—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É –æ—Ç–≤–∞—Ä–∏—Ç—å –∏ –Ω–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏\n2. –û–≤–æ—â–∏ –Ω–∞—Ä–µ–∑–∞—Ç—å –∏ —Å–º–µ—à–∞—Ç—å —Å –∫—É—Ä–∏—Ü–µ–π\n3. –ó–∞–ø—Ä–∞–≤–∏—Ç—å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º –∏ –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º\n4. –ü–æ—Å–æ–ª–∏—Ç—å, –ø–æ–ø–µ—Ä—á–∏—Ç—å –ø–æ –≤–∫—É—Å—É",
            "calories": 220,
            "protein": 30,
            "fat": 8,
            "carbs": 10
        },
        {
            "name": "–û–≤–æ—â–Ω–æ–π –æ–º–ª–µ—Ç",
            "ingredients": "–Ø–π—Ü–∞ - 3 —à—Ç\n–ú–æ–ª–æ–∫–æ 1% - 30 –º–ª\n–®–ø–∏–Ω–∞—Ç - 50 –≥\n–ü–æ–º–∏–¥–æ—Ä - 1 —à—Ç\n–°–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ—Ü - 1/2 —à—Ç\n–°–æ–ª—å, –ø–µ—Ä–µ—Ü - –ø–æ –≤–∫—É—Å—É",
            "instructions": "1. –Ø–π—Ü–∞ –≤–∑–±–∏—Ç—å —Å –º–æ–ª–æ–∫–æ–º, –ø–æ—Å–æ–ª–∏—Ç—å –∏ –ø–æ–ø–µ—Ä—á–∏—Ç—å\n2. –û–≤–æ—â–∏ –º–µ–ª–∫–æ –Ω–∞—Ä–µ–∑–∞—Ç—å\n3. –°–º–µ—à–∞—Ç—å –æ–≤–æ—â–∏ —Å —è–∏—á–Ω–æ–π —Å–º–µ—Å—å—é\n4. –í—ã–ª–∏—Ç—å –Ω–∞ —Ä–∞–∑–æ–≥—Ä–µ—Ç—É—é —Å–∫–æ–≤–æ—Ä–æ–¥—É\n5. –ì–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥ –∫—Ä—ã—à–∫–æ–π –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 5-7 –º–∏–Ω—É—Ç",
            "calories": 250,
            "protein": 20,
            "fat": 15,
            "carbs": 8
        }
    ],
    "üî∫ –ù–∞–±–æ—Ä –≤–µ—Å–∞": [
        {
            "name": "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å —Å –±–∞–Ω–∞–Ω–æ–º",
            "ingredients": "–ú–æ–ª–æ–∫–æ 3.2% - 250 –º–ª\n–ü—Ä–æ—Ç–µ–∏–Ω - 30 –≥ (1 –º–µ—Ä–Ω–∞—è –ª–æ–∂–∫–∞)\n–ë–∞–Ω–∞–Ω - 1 —à—Ç\n–ú–µ–¥ - 1 —Å—Ç.–ª.\n–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 30 –≥",
            "instructions": "1. –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –±–ª–µ–Ω–¥–µ—Ä\n2. –í–∑–±–∏—Ç—å –¥–æ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π –º–∞—Å—Å—ã\n3. –ü–æ–¥–∞–≤–∞—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–Ω—ã–º",
            "calories": 450,
            "protein": 35,
            "fat": 10,
            "carbs": 55
        },
        {
            "name": "–ü–∞—Å—Ç–∞ —Å –∫—É—Ä–∏–Ω—ã–º —Ñ–∏–ª–µ",
            "ingredients": "–ú–∞–∫–∞—Ä–æ–Ω—ã - 100 –≥\n–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ - 200 –≥\n–°–ª–∏–≤–∫–∏ 20% - 100 –º–ª\n–°—ã—Ä –ø–∞—Ä–º–µ–∑–∞–Ω - 30 –≥\n–ß–µ—Å–Ω–æ–∫ - 2 –∑—É–±—á–∏–∫–∞\n–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 2 —Å—Ç.–ª.\n–°–æ–ª—å, –ø–µ—Ä–µ—Ü, —Å–ø–µ—Ü–∏–∏ - –ø–æ –≤–∫—É—Å—É",
            "instructions": "1. –ú–∞–∫–∞—Ä–æ–Ω—ã –æ—Ç–≤–∞—Ä–∏—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n2. –ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ –Ω–∞—Ä–µ–∑–∞—Ç—å, –æ–±–∂–∞—Ä–∏—Ç—å –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ\n3. –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–π —á–µ—Å–Ω–æ–∫ –∏ —Å–ª–∏–≤–∫–∏\n4. –¢—É—à–∏—Ç—å 5-7 –º–∏–Ω—É—Ç\n5. –î–æ–±–∞–≤–∏—Ç—å –º–∞–∫–∞—Ä–æ–Ω—ã, –ø–µ—Ä–µ–º–µ—à–∞—Ç—å\n6. –ü–æ—Å—ã–ø–∞—Ç—å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º",
            "calories": 650,
            "protein": 50,
            "fat": 25,
            "carbs": 60
        }
    ],
    "üîÑ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞": [
        {
            "name": "–ö–∏–Ω–æ–∞ —Å –æ–≤–æ—â–∞–º–∏",
            "ingredients": "–ö–∏–Ω–æ–∞ - 70 –≥\n–ë—Ä–æ–∫–∫–æ–ª–∏ - 100 –≥\n–ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç\n–°–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ—Ü - 1 —à—Ç\n–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ - 1 —Å—Ç.–ª.\n–õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ - 1 —á.–ª.\n–°–æ–ª—å, –ø–µ—Ä–µ—Ü, –∑–µ–ª–µ–Ω—å - –ø–æ –≤–∫—É—Å—É",
            "instructions": "1. –ö–∏–Ω–æ–∞ –ø—Ä–æ–º—ã—Ç—å –∏ –æ—Ç–≤–∞—Ä–∏—Ç—å\n2. –û–≤–æ—â–∏ –Ω–∞—Ä–µ–∑–∞—Ç—å –∏ –æ–±–∂–∞—Ä–∏—Ç—å –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ\n3. –°–º–µ—à–∞—Ç—å –∫–∏–Ω–æ–∞ —Å –æ–≤–æ—â–∞–º–∏\n4. –î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü –∏ –∑–µ–ª–µ–Ω—å",
            "calories": 350,
            "protein": 12,
            "fat": 10,
            "carbs": 55
        },
        {
            "name": "–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞",
            "ingredients": "–¢–≤–æ—Ä–æ–≥ 5% - 250 –≥\n–Ø–π—Ü–∞ - 2 —à—Ç\n–ú–µ–¥ - 2 —Å—Ç.–ª.\n–í–∞–Ω–∏–ª–∏–Ω - –Ω–∞ –∫–æ–Ω—á–∏–∫–µ –Ω–æ–∂–∞\n–Ø–±–ª–æ–∫–æ - 1 —à—Ç\n–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è - 30 –≥",
            "instructions": "1. –¢–≤–æ—Ä–æ–≥ —Å–º–µ—à–∞—Ç—å —Å —è–π—Ü–∞–º–∏ –∏ –º–µ–¥–æ–º\n2. –Ø–±–ª–æ–∫–æ –Ω–∞—Ç–µ—Ä–µ—Ç—å –Ω–∞ —Ç–µ—Ä–∫–µ\n3. –î–æ–±–∞–≤–∏—Ç—å —è–±–ª–æ–∫–æ, –æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è –∏ –≤–∞–Ω–∏–ª–∏–Ω –∫ —Ç–≤–æ—Ä–æ–∂–Ω–æ–π –º–∞—Å—Å–µ\n4. –í—ã–ª–æ–∂–∏—Ç—å –≤ —Ñ–æ—Ä–º—É –∏ –≤—ã–ø–µ–∫–∞—Ç—å –ø—Ä–∏ 180¬∞C 30-35 –º–∏–Ω—É—Ç",
            "calories": 400,
            "protein": 30,
            "fat": 15,
            "carbs": 35
        }
    ]
}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
class RecipeStates(StatesGroup):
    selecting_type = State()
    entering_name = State()
    entering_ingredients = State()
    entering_instructions = State()
    entering_calories = State()
    entering_protein = State()
    entering_fat = State()
    entering_carbs = State()
    confirming = State()
    generating = State()
    searching = State()


async def show_recipes_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    await state.clear()
    keyboard = create_recipes_keyboard()
    await message.answer("üç¥ <b>–ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤</b>\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.",
                         parse_mode="HTML",
                         reply_markup=keyboard)


async def handle_recipes_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    action = callback_query.data.split(':')[1]

    if action == "search":
        await show_saved_recipes(callback_query, state)
    elif action == "favorites":
        await show_favorite_recipes(callback_query, state)
    elif action == "create":
        await start_recipe_creation(callback_query, state)
    elif action == "generate":
        await generate_recipe(callback_query, state)
    elif action == "back":
        await callback_query.message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await callback_query.answer()


async def show_saved_recipes(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback_query.from_user.id
    recipes = get_saved_recipes(user_id)

    if not recipes:
        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç.")
        await callback_query.answer()
        return

    text = "üìù <b>–í–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã:</b>\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    keyboard = []
    for recipe in recipes:
        recipe_name = recipe['name']
        if len(recipe_name) > 30:
            recipe_name = recipe_name[:27] + "..."

        keyboard.append([types.InlineKeyboardButton(
            text=f"{'‚òÖ' if recipe['is_favorite'] else '‚òÜ'} {recipe_name} ({recipe['calories']} –∫–∫–∞–ª)",
            callback_data=f"view_recipe:{recipe['id']}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([types.InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤",
        callback_data="return_to_recipes"
    )])

    await callback_query.message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()


async def show_favorite_recipes(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback_query.from_user.id
    recipes = get_saved_recipes(user_id, is_favorite=True)

    if not recipes:
        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        await callback_query.answer()
        return

    text = "‚≠êÔ∏è <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:</b>\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    keyboard = []
    for recipe in recipes:
        recipe_name = recipe['name']
        if len(recipe_name) > 30:
            recipe_name = recipe_name[:27] + "..."

        keyboard.append([types.InlineKeyboardButton(
            text=f"‚òÖ {recipe_name} ({recipe['calories']} –∫–∫–∞–ª)",
            callback_data=f"view_recipe:{recipe['id']}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([types.InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤",
        callback_data="return_to_recipes"
    )])

    await callback_query.message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()


async def view_recipe_details(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ."""
    recipe_id = int(callback_query.data.split(':')[1])
    recipe = get_recipe_details(recipe_id)

    if not recipe:
        await callback_query.message.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    await state.update_data(current_recipe_id=recipe_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
    text = f"üç≥ <b>{recipe['name']}</b>\n\n"
    text += "<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
    text += f"{recipe['ingredients']}\n\n"
    text += "<b>–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n"
    text += f"{recipe['instructions']}\n\n"
    text += "<b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
    text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe['calories']} –∫–∫–∞–ª\n"
    text += f"‚Ä¢ –ë–µ–ª–∫–∏: {recipe['protein']} –≥\n"
    text += f"‚Ä¢ –ñ–∏—Ä—ã: {recipe['fat']} –≥\n"
    text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe['carbs']} –≥\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ—Ü–µ–ø—Ç–æ–º
    keyboard = create_recipe_confirmation_keyboard(recipe_id)

    await callback_query.message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback_query.answer()


async def toggle_recipe_favorite_status(callback_query: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."""
    recipe_id = int(callback_query.data.split(':')[1])
    new_status = toggle_favorite_recipe(recipe_id)

    status_text = "–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if new_status else "—É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    await callback_query.message.answer(f"–†–µ—Ü–µ–ø—Ç {status_text}!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞
    await view_recipe_details(callback_query, state)
    await callback_query.answer()


async def delete_recipe_handler(callback_query: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç."""
    recipe_id = int(callback_query.data.split(':')[1])
    delete_recipe(recipe_id)

    await callback_query.message.answer("–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await show_saved_recipes(callback_query, state)
    await callback_query.answer()


async def return_to_recipes_menu(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    await show_recipes_menu(callback_query.message, state)
    await callback_query.answer()


async def start_recipe_creation(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    await state.clear()

    await callback_query.message.answer(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:"
    )

    await state.set_state(RecipeStates.entering_name)
    await callback_query.answer()


async def process_recipe_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    name = message.text.strip()

    if not name or len(name) > 100:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await state.update_data(name=name)

    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):"
    )

    await state.set_state(RecipeStates.entering_ingredients)


async def process_recipe_ingredients(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞."""
    ingredients = message.text.strip()

    if not ingredients:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")
        return

    await state.update_data(ingredients=ingredients)

    await message.answer(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:"
    )

    await state.set_state(RecipeStates.entering_instructions)


async def process_recipe_instructions(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Ä–µ—Ü–µ–ø—Ç–∞."""
    instructions = message.text.strip()

    if not instructions:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é.")
        return

    await state.update_data(instructions=instructions)

    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞ (–∫–∫–∞–ª):"
    )

    await state.set_state(RecipeStates.entering_calories)


async def process_recipe_calories(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∞."""
    try:
        calories = float(message.text.strip().replace(',', '.'))
        if calories <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–∞–ª–æ—Ä–∏–π.")
        return

    await state.update_data(calories=calories)

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ (–≥):"
    )

    await state.set_state(RecipeStates.entering_protein)


async def process_recipe_protein(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ–ª–∫–∞."""
    try:
        protein = float(message.text.strip().replace(',', '.'))
        if protein < 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–µ–ª–∫–æ–≤.")
        return

    await state.update_data(protein=protein)

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ (–≥):"
    )

    await state.set_state(RecipeStates.entering_fat)


async def process_recipe_fat(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏—Ä–æ–≤."""
    try:
        fat = float(message.text.strip().replace(',', '.'))
        if fat < 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∂–∏—Ä–æ–≤.")
        return

    await state.update_data(fat=fat)

    await message.answer(
        "–ò –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–≥):"
    )

    await state.set_state(RecipeStates.entering_carbs)


async def process_recipe_carbs(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤."""
    try:
        carbs = float(message.text.strip().replace(',', '.'))
        if carbs < 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —É–≥–ª–µ–≤–æ–¥–æ–≤.")
        return

    await state.update_data(carbs=carbs)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
    recipe_data = await state.get_data()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {recipe_data['name']}\n\n"
        f"<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{recipe_data['ingredients']}\n\n"
        f"<b>–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n{recipe_data['instructions']}\n\n"
        f"<b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe_data['calories']} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {recipe_data['protein']} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {recipe_data['fat']} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe_data['carbs']} –≥\n\n"
        f"–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = create_recipe_confirmation_keyboard()

    await message.answer(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await state.set_state(RecipeStates.confirming)


async def save_recipe_handler(callback_query: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç."""
    user_id = callback_query.from_user.id
    recipe_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    recipe_id = save_recipe(
        user_id,
        recipe_data['name'],
        recipe_data['ingredients'],
        recipe_data['instructions'],
        recipe_data['calories'],
        recipe_data['protein'],
        recipe_data['fat'],
        recipe_data['carbs']
    )

    if recipe_id:
        await callback_query.message.answer(f"‚úÖ –†–µ—Ü–µ–ø—Ç '{recipe_data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
        await show_recipes_menu(callback_query.message, state)
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()
    await callback_query.answer()


async def cancel_recipe_creation(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞."""
    await callback_query.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
    await show_recipes_menu(callback_query.message, state)
    await state.clear()
    await callback_query.answer()


async def generate_recipe(callback_query: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    if not user or not user.get('goal'):
        await callback_query.message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å."
        )
        await callback_query.answer()
        return

    goal = user['goal']

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ü–µ–ª—å—é
    base_recipes = BASE_RECIPES.get(goal)

    if not base_recipes:
        # –ï—Å–ª–∏ –¥–ª—è —Ü–µ–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤, –±–µ—Ä–µ–º –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞
        base_recipes = BASE_RECIPES["üîÑ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞"]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
    recipe = random.choice(base_recipes)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        name=recipe['name'],
        ingredients=recipe['ingredients'],
        instructions=recipe['instructions'],
        calories=recipe['calories'],
        protein=recipe['protein'],
        fat=recipe['fat'],
        carbs=recipe['carbs']
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {goal}:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {recipe['name']}\n\n"
        f"<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{recipe['ingredients']}\n\n"
        f"<b>–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n{recipe['instructions']}\n\n"
        f"<b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe['calories']} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {recipe['protein']} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {recipe['fat']} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe['carbs']} –≥\n\n"
        f"–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç?"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = create_recipe_confirmation_keyboard()

    await callback_query.message.answer(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await state.set_state(RecipeStates.confirming)
    await callback_query.answer()


async def recipe_to_diary(callback_query: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è."""
    recipe_id = int(callback_query.data.split(':')[1])
    recipe = get_recipe_details(recipe_id)

    if not recipe:
        await callback_query.message.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    keyboard = []
    for meal_type in ["–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω", "–ü–µ—Ä–µ–∫—É—Å"]:
        keyboard.append([
            types.InlineKeyboardButton(
                text=meal_type,
                callback_data=f"add_recipe_to_meal:{recipe_id}:{meal_type}"
            )
        ])

    keyboard.append([
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data=f"view_recipe:{recipe_id}"
        )
    ])

    await callback_query.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ '{recipe['name']}':",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await callback_query.answer()


async def add_recipe_to_meal(callback_query: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ."""
    data = callback_query.data.split(':')
    recipe_id = int(data[1])
    meal_type = data[2]

    user_id = callback_query.from_user.id
    recipe = get_recipe_details(recipe_id)

    if not recipe:
        await callback_query.message.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    today = datetime.now().strftime("%Y-%m-%d")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫
    entry_id = add_food_entry(
        user_id,
        today,
        meal_type,
        recipe['name'],
        recipe['calories'],
        recipe['protein'],
        recipe['fat'],
        recipe['carbs']
    )

    if entry_id:
        await callback_query.message.answer(
            f"‚úÖ –†–µ—Ü–µ–ø—Ç '{recipe['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ {meal_type.lower()}!"
        )
    else:
        await callback_query.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º —Ä–µ—Ü–µ–ø—Ç–∞
    await view_recipe_details(callback_query, state)
    await callback_query.answer()
