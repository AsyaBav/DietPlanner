import asyncio
import logging
import random
from aiogram import types, F, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram import Router
from aiogram.types import Message
from typing import Union
from database import (
    save_recipe, get_saved_recipes, get_recipe_details, toggle_favorite_recipe,
    delete_recipe, add_food_entry, get_user, get_db_connection, search_recipes
)
from keyboards import create_recipes_keyboard, create_recipe_confirmation_keyboard
from food_api import search_food, get_food_nutrients, get_branded_food_info

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
class RecipeStates(StatesGroup):
    selecting_type = State()
    entering_name = State()
    entering_ingredients = State()
    entering_instructions = State()
    entering_photo = State()
    entering_calories = State()
    entering_protein = State()
    entering_fat = State()
    entering_carbs = State()
    confirming = State()
    generating = State()
    searching = State()

    waiting_for_name = State()
    waiting_for_ingredients = State()
    waiting_for_instructions = State()


async def show_recipes_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    await state.clear()
    keyboard = create_recipes_keyboard()
    await message.answer("üç¥ <b>–ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤</b>\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.",
                         parse_mode="HTML",
                         reply_markup=keyboard)


async def handle_recipes_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    action = callback_query.data.split(':')[1]

    if action == "search":
        await search_recipes(callback_query, state)
    elif action == "favorites":
        await show_favorites(callback_query, state)
    elif action == "create":
        await start_recipe_creation(callback_query, state)
    elif action == "generate":
        await generate_recipe(callback_query)
    elif action == "back":
        await return_to_main_menu(callback_query)
    await callback_query.answer()


'''async def search_recipes(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await callback_query.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="recipe:back")]
        ]))
    await state.set_state(RecipeStates.searching)
    await callback_query.answer()'''


async def search_recipes(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await callback_query.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="recipe:back")]
        ]))
    await state.set_state(RecipeStates.searching)
    await callback_query.answer()


# @router.message(RecipeStates.searching)
async def process_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    search_query = message.text.strip()
    if not search_query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return

    search_query = ' '.join(search_query.split())

    user_id = message.from_user.id
    from database import search_recipes
    recipes = search_recipes(user_id, search_query)

    if not recipes:
        await message.answer("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        search_results=recipes,
        current_page=0,
        search_query=search_query
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await show_search_results(message, state)


async def show_search_results(message: Union[Message, CallbackQuery], state: FSMContext, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
    data = await state.get_data()
    recipes = data.get('search_results', [])
    search_query = data.get('search_query', '')

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
    page_size = 5
    total_pages = (len(recipes) // page_size + (1 if len(recipes) % page_size else 0))

    if page >= total_pages:
        page = total_pages - 1

    start_idx = page * page_size
    page_recipes = recipes[start_idx:start_idx + page_size]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':\n\n"
    for i, recipe in enumerate(page_recipes, 1):
        text += f"{i}. {recipe['name']} ({recipe['calories']} –∫–∫–∞–ª)\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    for recipe in page_recipes:
        keyboard.append([
            InlineKeyboardButton(
                text=recipe['name'],
                callback_data=f"view_recipe:{recipe['id']}"
            )
        ])

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if total_pages > 1:
        if page > 0:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"search_page:{page - 1}"
                )
            )

        pagination_row.append(
            InlineKeyboardButton(
                text=f"{page + 1}/{total_pages}",
                callback_data="noop"
            )
        )

        if page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"search_page:{page + 1}"
                )
            )

        keyboard.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
            callback_data="recipe:search"
        )
    ])

    if isinstance(message, CallbackQuery):
        await message.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await message.answer()
    else:
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )


# @router.callback_query(F.data.startswith("search_page:"))
async def handle_search_page(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–∏—Å–∫–∞"""
    page = int(callback_query.data.split(":")[1])
    await state.update_data(current_page=page)
    await show_search_results(callback_query, state, page)


async def view_recipe_card(callback_query: CallbackQuery, recipe_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ—Ü–µ–ø—Ç–∞"""
    recipe = get_recipe_details(recipe_id)
    if not recipe:
        await callback_query.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    text = f"üç≥ <b>{recipe['name']}</b>\n\n"
    text += "<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
    text += recipe['ingredients'].replace(",", "\n") + "\n\n"
    text += "<b>–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n"
    text += recipe['instructions'] + "\n\n"
    text += "<b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ 100–≥):</b>\n"
    text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe['calories']} –∫–∫–∞–ª\n"
    text += f"‚Ä¢ –ë–µ–ª–∫–∏: {recipe['protein']} –≥\n"
    text += f"‚Ä¢ –ñ–∏—Ä—ã: {recipe['fat']} –≥\n"
    text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe['carbs']} –≥"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    keyboard = [
        [
            InlineKeyboardButton(text="‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"toggle_fav:{recipe_id}"),
            InlineKeyboardButton(text="‚ûï –í –º–µ–Ω—é", callback_data=f"add_to_menu:{recipe_id}")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search")]
    ]

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ (–¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ photo_path –≤ —Ç–∞–±–ª–∏—Ü—É recipes)
    if recipe.get('photo_path'):
        await callback_query.message.answer_photo(
            photo=recipe['photo_path'],
            caption=text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback_query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    await callback_query.answer()


async def show_favorites(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    from database import get_saved_recipes
    favorites = get_saved_recipes(user_id, is_favorite=True)  # –§—É–Ω–∫—Ü–∏—è –∏–∑ database.py

    '''if not favorites:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."
    else:
        text = "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n"
        for recipe in favorites:
            text += f"- {recipe['name']} ({recipe['calories']} –∫–∫–∞–ª)\n"'''

    if not favorites:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="recipe:back")]
            ]))
        await callback_query.answer()
        return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(favorites_list=favorites, current_fav_page=0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await show_favorites_page(callback_query, state)

    '''await callback_query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="recipes:back")]
        ])
    )'''


async def show_favorites_page(callback_query: CallbackQuery, state: FSMContext, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏"""
    data = await state.get_data()
    favorites = data.get('favorites_list', [])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    page_size = 5
    total_pages = (len(favorites) // page_size + (1 if len(favorites) % page_size else 0))
    page = min(page, total_pages - 1) if total_pages > 0 else 0
    start_idx = page * page_size
    page_favorites = favorites[start_idx:start_idx + page_size]

    text = "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n"
    for i, recipe in enumerate(page_favorites, start_idx + 1):
        text += f"{i}. {recipe['name']} ({recipe['calories']} –∫–∫–∞–ª)\n"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = []
    for recipe in page_favorites:
        keyboard.append([InlineKeyboardButton(
            text=recipe['name'],
            callback_data=f"view_fav_recipe:{recipe['id']}"
        )])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_row = []
    if total_pages > 1:
        if page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"fav_page:{page - 1}"
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        pagination_row.append(InlineKeyboardButton(
            text=f"{page + 1}/{total_pages}",
            callback_data="noop"
        ))

        if page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"fav_page:{page + 1}"
            ))
    if pagination_row:
        keyboard.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤",
        callback_data="recipe:back"
    )])

    await callback_query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback_query.answer()


'''async def start_recipe_creation(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="recipes:back")]
        ])
    )
    await state.set_state(RecipeStates.waiting_for_name)'''

async def start_recipe_creation(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    await state.clear()

    await callback_query.message.answer(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:"
    )
    await state.set_state(RecipeStates.entering_name)



async def view_favorite_recipe(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
    recipe_id = int(callback_query.data.split(':')[1])
    recipe = get_recipe_details(recipe_id)

    if not recipe:
        await callback_query.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    text = f"‚≠êÔ∏èüç≥ <b>{recipe['name']}</b>\n\n"
    text += "<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
    text += recipe['ingredients'].replace(",", "\n") + "\n\n"
    text += "<b>–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n"
    text += recipe['instructions'] + "\n\n"
    text += "<b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
    text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe['calories']} –∫–∫–∞–ª\n"
    text += f"‚Ä¢ –ë–µ–ª–∫–∏: {recipe['protein']} –≥\n"
    text += f"‚Ä¢ –ñ–∏—Ä—ã: {recipe['fat']} –≥\n"
    text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe['carbs']} –≥"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    keyboard = [
        [
            InlineKeyboardButton(text="üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"toggle_fav:{recipe_id}"),
            InlineKeyboardButton(text="‚ûï –í –º–µ–Ω—é", callback_data=f"add_to_menu:{recipe_id}")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É", callback_data="back_to_favorites")]
    ]

    await callback_query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback_query.answer()


async def generate_recipe(callback_query: types.CallbackQuery):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞
    await callback_query.message.edit_text(
        "üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞...",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="recipes:back")]
        ])
    )


async def return_to_main_menu(callback_query: types.CallbackQuery):
    from handlers import after_calories_keyboard
    await callback_query.message.delete()
    await callback_query.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=after_calories_keyboard
    )


async def show_saved_recipes(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback_query.from_user.id
    recipes = get_saved_recipes(user_id)

    if not recipes:
        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç.")
        await callback_query.answer()
        return

    text = "üìù <b>–í–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã:</b>\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    keyboard = []
    for recipe in recipes:
        recipe_name = recipe['name']
        if len(recipe_name) > 30:
            recipe_name = recipe_name[:27] + "..."

        keyboard.append([types.InlineKeyboardButton(
            text=f"{'‚òÖ' if recipe['is_favorite'] else '‚òÜ'} {recipe_name} ({recipe['calories']} –∫–∫–∞–ª)",
            callback_data=f"view_recipe:{recipe['id']}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([types.InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤",
        callback_data="return_to_recipes"
    )])

    await callback_query.message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()


async def show_favorite_recipes(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback_query.from_user.id
    recipes = get_saved_recipes(user_id, is_favorite=True)

    if not recipes:
        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        await callback_query.answer()
        return

    text = "‚≠êÔ∏è <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:</b>\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    keyboard = []
    for recipe in recipes:
        recipe_name = recipe['name']
        if len(recipe_name) > 30:
            recipe_name = recipe_name[:27] + "..."

        keyboard.append([types.InlineKeyboardButton(
            text=f"‚òÖ {recipe_name} ({recipe['calories']} –∫–∫–∞–ª)",
            callback_data=f"view_recipe:{recipe['id']}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([types.InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤",
        callback_data="return_to_recipes"
    )])

    await callback_query.message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()


async def view_recipe_details(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ."""
    try:
        recipe_id = int(callback_query.data.split(':')[1])
        from database import get_recipe_details  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        recipe = get_recipe_details(recipe_id)

        if not recipe:
            await callback_query.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        text = f"üç≥ <b>{recipe['name']}</b>\n\n"
        text += "<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
        text += recipe['ingredients'].replace(",", "\n") + "\n\n"
        text += "<b>–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n"
        text += recipe['instructions'] + "\n\n"
        text += "<b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe['calories']} –∫–∫–∞–ª\n"
        text += f"‚Ä¢ –ë–µ–ª–∫–∏: {recipe['protein']} –≥\n"
        text += f"‚Ä¢ –ñ–∏—Ä—ã: {recipe['fat']} –≥\n"
        text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe['carbs']} –≥"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        keyboard = [
            [
                InlineKeyboardButton(text="‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"toggle_fav:{recipe_id}"),
                InlineKeyboardButton(text="‚ûï –í –º–µ–Ω—é", callback_data=f"add_to_menu:{recipe_id}")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search")]
        ]

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        await callback_query.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π —Ä–µ—Ü–µ–ø—Ç–∞
        await callback_query.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞")


async def toggle_favorite_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    recipe_id = int(callback_query.data.split(':')[1])
    from database import toggle_favorite_recipe

    new_status = toggle_favorite_recipe(recipe_id)
    status_text = "–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if new_status else "—É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"

    await callback_query.answer(f"–†–µ—Ü–µ–ø—Ç {status_text}!")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º
    await view_recipe_details(callback_query, callback_query.message.bot.current_state(callback_query.from_user.id))
    await view_recipe_details(callback_query, state)


async def add_to_menu_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    recipe_id = int(callback_query.data.split(':')[1])
    from database import get_recipe_details, add_food_entry

    recipe = get_recipe_details(recipe_id)
    if not recipe:
        await callback_query.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ "–†–µ—Ü–µ–ø—Ç"
    today = datetime.now().strftime("%Y-%m-%d")
    add_food_entry(
        user_id=callback_query.from_user.id,
        date=today,
        meal_type="–†–µ—Ü–µ–ø—Ç",
        food_name=recipe['name'],
        calories=recipe['calories'],
        protein=recipe['protein'],
        fat=recipe['fat'],
        carbs=recipe['carbs']
    )

    await callback_query.answer(f"–†–µ—Ü–µ–ø—Ç '{recipe['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –º–µ–Ω—é!")


async def toggle_recipe_favorite_status(callback_query: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."""
    recipe_id = int(callback_query.data.split(':')[1])
    new_status = toggle_favorite_recipe(recipe_id)

    status_text = "–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if new_status else "—É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    await callback_query.message.answer(f"–†–µ—Ü–µ–ø—Ç {status_text}!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞
    await view_recipe_details(callback_query, state)
    await callback_query.answer()


async def delete_recipe_handler(callback_query: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç."""
    recipe_id = int(callback_query.data.split(':')[1])
    delete_recipe(recipe_id)

    await callback_query.message.answer("–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await show_saved_recipes(callback_query, state)
    await callback_query.answer()


async def return_to_recipes_menu(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
    await show_recipes_menu(callback_query.message, state)
    await callback_query.answer()


async def start_recipe_creation(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    await state.clear()

    await callback_query.message.answer(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:"
    )

    await state.set_state(RecipeStates.entering_name)
    await callback_query.answer()


async def process_recipe_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    name = message.text.strip()

    if not name or len(name) > 100:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await state.update_data(name=name)

    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏:"
    )

    await state.set_state(RecipeStates.entering_ingredients)


async def process_recipe_ingredients(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞."""
    ingredients = message.text.strip()

    if not ingredients:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")
        return

    await state.update_data(ingredients=ingredients)

    await message.answer(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:"
    )

    await state.set_state(RecipeStates.entering_instructions)


async def process_recipe_instructions(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Ä–µ—Ü–µ–ø—Ç–∞."""
    await state.update_data(instructions=message.text)
    data = await state.get_data()

    from database import save_recipe

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    recipe_id = save_recipe(
        user_id=message.from_user.id,
        name=data['name'],
        ingredients=data['ingredients'],
        instructions=message.text,
        calories=0,  # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 0 –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        protein=0,
        fat=0,
        carbs=0
    )

    if recipe_id:
        await message.answer("‚úÖ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞")

    await state.clear()
    await show_recipes_menu(message)


async def process_recipe_calories(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∞."""
    try:
        calories = float(message.text.strip().replace(',', '.'))
        if calories <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–∞–ª–æ—Ä–∏–π.")
        return

    await state.update_data(calories=calories)

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ (–≥):"
    )

    await state.set_state(RecipeStates.entering_protein)


async def process_recipe_protein(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ–ª–∫–∞."""
    try:
        protein = float(message.text.strip().replace(',', '.'))
        if protein < 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–µ–ª–∫–æ–≤.")
        return

    await state.update_data(protein=protein)

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ (–≥):"
    )

    await state.set_state(RecipeStates.entering_fat)


async def process_recipe_fat(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏—Ä–æ–≤."""
    try:
        fat = float(message.text.strip().replace(',', '.'))
        if fat < 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∂–∏—Ä–æ–≤.")
        return

    await state.update_data(fat=fat)

    await message.answer(
        "–ò –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–≥):"
    )

    await state.set_state(RecipeStates.entering_carbs)


async def process_recipe_carbs(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤."""
    try:
        carbs = float(message.text.strip().replace(',', '.'))
        if carbs < 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —É–≥–ª–µ–≤–æ–¥–æ–≤.")
        return

    await state.update_data(carbs=carbs)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
    recipe_data = await state.get_data()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {recipe_data['name']}\n\n"
        f"<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{recipe_data['ingredients']}\n\n"
        f"<b>–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n{recipe_data['instructions']}\n\n"
        f"<b>–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {recipe_data['calories']} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {recipe_data['protein']} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {recipe_data['fat']} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {recipe_data['carbs']} –≥\n\n"
        f"–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = create_recipe_confirmation_keyboard()

    await message.answer(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await state.set_state(RecipeStates.confirming)


async def save_recipe_handler(callback_query: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç."""
    user_id = callback_query.from_user.id
    recipe_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    recipe_id = save_recipe(
        user_id,
        recipe_data['name'],
        recipe_data['ingredients'],
        recipe_data['instructions'],
        recipe_data['calories'],
        recipe_data['protein'],
        recipe_data['fat'],
        recipe_data['carbs']
    )

    if recipe_id:
        await callback_query.message.answer(f"‚úÖ –†–µ—Ü–µ–ø—Ç '{recipe_data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
        await show_recipes_menu(callback_query.message, state)
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()
    await callback_query.answer()


async def cancel_recipe_creation(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞."""
    await callback_query.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤
    await show_recipes_menu(callback_query.message, state)
    await state.clear()
    await callback_query.answer()


async def generate_recipe(callback_query: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback_query.message.answer("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    await callback_query.answer()


async def recipe_to_diary(callback_query: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è."""
    recipe_id = int(callback_query.data.split(':')[1])
    recipe = get_recipe_details(recipe_id)

    if not recipe:
        await callback_query.message.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    keyboard = []
    for meal_type in ["–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω", "–ü–µ—Ä–µ–∫—É—Å"]:
        keyboard.append([
            types.InlineKeyboardButton(
                text=meal_type,
                callback_data=f"add_recipe_to_meal:{recipe_id}:{meal_type}"
            )
        ])

    keyboard.append([
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data=f"view_recipe:{recipe_id}"
        )
    ])

    await callback_query.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ '{recipe['name']}':",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await callback_query.answer()


async def add_recipe_to_meal(callback_query: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ."""
    data = callback_query.data.split(':')
    recipe_id = int(data[1])
    meal_type = data[2]

    user_id = callback_query.from_user.id
    recipe = get_recipe_details(recipe_id)

    if not recipe:
        await callback_query.message.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    today = datetime.now().strftime("%Y-%m-%d")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫
    entry_id = add_food_entry(
        user_id,
        today,
        meal_type,
        recipe['name'],
        recipe['calories'],
        recipe['protein'],
        recipe['fat'],
        recipe['carbs']
    )

    if entry_id:
        await callback_query.message.answer(
            f"‚úÖ –†–µ—Ü–µ–ø—Ç '{recipe['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ {meal_type.lower()}!"
        )
    else:
        await callback_query.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º —Ä–µ—Ü–µ–ø—Ç–∞
    await view_recipe_details(callback_query, state)
    await callback_query.answer()
