import sqlite3
import logging
from datetime import datetime, timedelta
import json
import os
from config import DB_PATH, DEFAULT_WATER_GOAL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn


def init_nutritionists_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    conn = get_db_connection()

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤
        conn.execute('''
            CREATE TABLE IF NOT EXISTS nutritionists (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                full_name TEXT NOT NULL,
                education TEXT NOT NULL,
                experience TEXT NOT NULL,
                specialization TEXT NOT NULL,
                approach TEXT NOT NULL,
                telegram_username TEXT,
                email TEXT,
                phone TEXT,
                work_hours TEXT DEFAULT '–ü–Ω-–ü—Ç 9:00-18:00',
                price TEXT DEFAULT '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
                is_active BOOLEAN DEFAULT 1,
                created_date TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cursor = conn.execute("SELECT COUNT(*) FROM nutritionists")
        count = cursor.fetchone()[0]

        if count == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤
            sample_nutritionists = [
                (
                    "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
                    "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º. –ò.–ú. –°–µ—á–µ–Ω–æ–≤–∞, –¥–∏–µ—Ç–æ–ª–æ–≥–∏—è –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è. –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.",
                    "8 –ª–µ—Ç",
                    "–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–±–º–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤",
                    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É. –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –±–µ–∑ —Å—Ç—Ä–æ–≥–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—ã—Ö –ø–∏—â–µ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.",
                    "anna_nutritionist",
                    "anna.smirnova@dietconsult.ru",
                    "+7 (495) 123-45-67"
                ),
                (
                    "–î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –ö–æ–∑–ª–æ–≤",
                    "–°–ü–±–ì–ú–£ –∏–º. –∞–∫–∞–¥. –ò.–ü. –ü–∞–≤–ª–æ–≤–∞, –ª–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏ –≤ –†–ú–ê–ü–û. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é.",
                    "12 –ª–µ—Ç",
                    "–õ–µ—á–µ–±–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞ —Å –ø–∏—â–µ–≤—ã–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, –¥–µ—Ç—Å–∫–∞—è –¥–∏–µ—Ç–æ–ª–æ–≥–∏—è",
                    "–ù–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥. –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö –ñ–ö–¢. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø–∏—â–µ–≤—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º.",
                    "dmitry_diet_doc",
                    "d.kozlov@healthnutrition.ru",
                    "+7 (812) 987-65-43"
                ),
                (
                    "–ï–ª–µ–Ω–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞",
                    "–†–ì–ú–£ –∏–º. –ù.–ò. –ü–∏—Ä–æ–≥–æ–≤–∞, –ø–µ–¥–∏–∞—Ç—Ä–∏—è. –û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞ –ø–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏. –ö—É—Ä—Å—ã –ø–æ –Ω—É—Ç—Ä–∏–≥–µ–Ω–µ—Ç–∏–∫–µ –∏ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ.",
                    "6 –ª–µ—Ç",
                    "–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Å–µ–º—å–∏, –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–µ—Ç–æ–ª–æ–≥–∏—è, anti-age –ø–∏—Ç–∞–Ω–∏–µ",
                    "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–¥–æ—Ä–æ–≤—å—é. –ü–∏—Ç–∞–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–∞ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è. –£—á–µ—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.",
                    "elena_family_nutrition",
                    "elena.ivanova@familyhealth.ru",
                    "+7 (903) 456-78-90"
                ),
                (
                    "–ú–∏—Ö–∞–∏–ª –°–µ—Ä–≥–µ–µ–≤–∏—á –í–æ–ª–∫–æ–≤",
                    "–†–æ—Å—Å–∏–π—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –¥—Ä—É–∂–±—ã –Ω–∞—Ä–æ–¥–æ–≤, –ª–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ. –ò–Ω—Ç–µ—Ä–Ω–∞—Ç—É—Ä–∞ –ø–æ —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏–∏, –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏.",
                    "10 –ª–µ—Ç",
                    "–î–∏–∞–±–µ—Ç–æ–ª–æ–≥–∏—è, —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–∞—è –¥–∏–µ—Ç–æ–ª–æ–≥–∏—è, –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–¥—Ä–æ–º",
                    "–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–∞—è –∏ –Ω–µ–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º —Å –¥–∏–∞–±–µ—Ç–æ–º –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –æ–±–º–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤.",
                    "mikhail_endo_diet",
                    "m.volkov@endohealth.ru",
                    "+7 (926) 123-89-67"
                )
            ]

            for nutritionist in sample_nutritionists:
                conn.execute('''
                    INSERT INTO nutritionists 
                    (full_name, education, experience, specialization, approach, telegram_username, email, phone)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', nutritionist)

            conn.commit()
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤: {e}")
    finally:
        conn.close()

def get_nutritionists():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤."""
    conn = get_db_connection()
    try:
        cursor = conn.execute('''
            SELECT * FROM nutritionists 
            WHERE is_active = 1 
            ORDER BY full_name
        ''')
        nutritionists = [dict(row) for row in cursor.fetchall()]
        return nutritionists
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤: {e}")
        return []
    finally:
        conn.close()


def get_nutritionist_by_id(nutritionist_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–∏–µ—Ç–æ–ª–æ–≥–∞ –ø–æ ID."""
    conn = get_db_connection()
    try:
        cursor = conn.execute('''
            SELECT * FROM nutritionists 
            WHERE id = ? AND is_active = 1
        ''', (nutritionist_id,))
        row = cursor.fetchone()
        return dict(row) if row else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–µ—Ç–æ–ª–æ–≥–∞ –ø–æ ID {nutritionist_id}: {e}")
        return None
    finally:
        conn.close()


def init_articles_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ç–∞—Ç–µ–π –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    conn = get_db_connection()

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–µ–º —Å—Ç–∞—Ç–µ–π
        conn.execute('''
            CREATE TABLE IF NOT EXISTS article_topics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                emoji TEXT DEFAULT 'üìñ',
                description TEXT,
                sort_order INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT 1,
                created_date TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–µ–π
        conn.execute('''
            CREATE TABLE IF NOT EXISTS articles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                topic_id INTEGER,
                title TEXT NOT NULL,
                content TEXT NOT NULL,
                author TEXT,
                sources TEXT,
                publication_date TEXT,
                views_count INTEGER DEFAULT 0,
                is_published BOOLEAN DEFAULT 1,
                created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (topic_id) REFERENCES article_topics (id)
            )
        ''')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–º–∞—Ö
        cursor = conn.execute("SELECT COUNT(*) FROM article_topics")
        count = cursor.fetchone()[0]

        if count == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã —Å—Ç–∞—Ç–µ–π
            topics = [
                ("–í–∏—Ç–∞–º–∏–Ω—ã –∏ –ë–ê–î—ã", "üíä", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, –º–∏–Ω–µ—Ä–∞–ª–∞—Ö –∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–±–∞–≤–∫–∞—Ö", 1),
                ("–û—Å–Ω–æ–≤—ã –ø–∏—Ç–∞–Ω–∏—è", "üçé", "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è", 2),
                ("–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ—Ö—É–¥–µ–Ω–∏—é", "‚öñÔ∏è", "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞", 3),
                ("–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –ø–∏—Ç–∞–Ω–∏—è", "üß†", "–í–ª–∏—è–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –ø–∏—â–µ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", 4),
                ("–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ", "‚è∞", "–ú–µ—Ç–æ–¥—ã –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ–¥–∞–Ω–∏—è", 5),
                ("–î—Ä—É–≥–æ–µ", "üìù", "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–∏—Ç–∞–Ω–∏–∏", 6)
            ]

            for topic in topics:
                conn.execute('''
                    INSERT INTO article_topics (name, emoji, description, sort_order)
                    VALUES (?, ?, ?, ?)
                ''', topic)

            conn.commit()

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
            sample_articles = [
                # –í–∏—Ç–∞–º–∏–Ω—ã –∏ –ë–ê–î—ã
                (1, "–í–∏—Ç–∞–º–∏–Ω D: —Å–æ–ª–Ω–µ—á–Ω—ã–π –≤–∏—Ç–∞–º–∏–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è", """
<b>–í–∏—Ç–∞–º–∏–Ω D</b> ‚Äî –æ–¥–∏–Ω –∏–∑ –≤–∞–∂–Ω–µ–π—à–∏—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –¥–ª—è –Ω–∞—à–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å—Ç–æ –Ω–∞–∑—ã–≤–∞—é—Ç "—Å–æ–ª–Ω–µ—á–Ω—ã–º –≤–∏—Ç–∞–º–∏–Ω–æ–º".

üåü <b>–ü–æ—á–µ–º—É –≤–∏—Ç–∞–º–∏–Ω D —Ç–∞–∫ –≤–∞–∂–µ–Ω?</b>

‚Ä¢ <b>–ó–¥–æ—Ä–æ–≤—å–µ –∫–æ—Å—Ç–µ–π:</b> –í–∏—Ç–∞–º–∏–Ω D –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–º—É —É—Å–≤–∞–∏–≤–∞—Ç—å –∫–∞–ª—å—Ü–∏–π –∏ —Ñ–æ—Å—Ñ–æ—Ä
‚Ä¢ <b>–ò–º–º—É–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b> –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞
‚Ä¢ <b>–ú—ã—à–µ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:</b> –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º—ã—à—Ü
‚Ä¢ <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–≤—è–∑–∞–Ω —Å –¥–µ–ø—Ä–µ—Å—Å–∏–µ–π –∏ –ø–ª–æ—Ö–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º

‚òÄÔ∏è <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–∏—Ç–∞–º–∏–Ω–∞ D:</b>

1. <b>–°–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç</b> ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ (15-20 –º–∏–Ω—É—Ç –Ω–∞ —Å–æ–ª–Ω—Ü–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
2. <b>–ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞:</b> –ª–æ—Å–æ—Å—å, —Å–∫—É–º–±—Ä–∏—è, —Å–∞—Ä–¥–∏–Ω—ã
3. <b>–Ø–∏—á–Ω—ã–µ –∂–µ–ª—Ç–∫–∏</b> –æ—Ç –∫—É—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—ã–≥—É–ª–∞
4. <b>–û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</b> –º–æ–ª–æ–∫–æ, –∫–∞—à–∏
5. <b>–ì—Ä–∏–±—ã</b> (–æ—Å–æ–±–µ–Ω–Ω–æ –≤—ã—Ä–∞—â–µ–Ω–Ω—ã–µ –ø–æ–¥ –£–§-–ª–∞–º–ø–∞–º–∏)

‚ö†Ô∏è <b>–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞:</b>
‚Ä¢ –£—Å—Ç–∞–ª–æ—Å—Ç—å –∏ —Å–ª–∞–±–æ—Å—Ç—å
‚Ä¢ –ë–æ–ª–∏ –≤ –∫–æ—Å—Ç—è—Ö –∏ –º—ã—à—Ü–∞—Ö
‚Ä¢ –ß–∞—Å—Ç—ã–µ –ø—Ä–æ—Å—Ç—É–¥—ã
‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω
‚Ä¢ –î–µ–ø—Ä–µ—Å—Å–∏—è

üíä <b>–ù–æ—Ä–º—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:</b>
‚Ä¢ –í–∑—Ä–æ—Å–ª—ã–µ: 600-800 –ú–ï –≤ –¥–µ–Ω—å
‚Ä¢ –ü–æ–∂–∏–ª—ã–µ –ª—é–¥–∏ (70+): 800-1000 –ú–ï –≤ –¥–µ–Ω—å
‚Ä¢ –ü—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ: –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –≤—Ä–∞—á–∞ –¥–æ 4000 –ú–ï

üî¨ <b>–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>
–ü–µ—Ä–µ–¥ –ø—Ä–∏–µ–º–æ–º –¥–æ–±–∞–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑ –Ω–∞ 25(OH)D3 –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º. –ü–µ—Ä–µ–¥–æ–∑–∏—Ä–æ–≤–∫–∞ –≤–∏—Ç–∞–º–∏–Ω–∞ D –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ–π.
                """, "–ö–æ–º–∞–Ω–¥–∞ NutriBot", "Mayo Clinic, Harvard Health Publishing", "2024-01-15"),

                (1, "–û–º–µ–≥–∞-3: –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–µ –∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã", """
<b>–û–º–µ–≥–∞-3 –∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã</b> ‚Äî —ç—Ç–æ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.

üêü <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –û–º–µ–≥–∞-3:</b>

‚Ä¢ <b>EPA (—ç–π–∫–æ–∑–∞–ø–µ–Ω—Ç–∞–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞)</b> ‚Äî –ø—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
‚Ä¢ <b>DHA (–¥–æ–∫–æ–∑–∞–≥–µ–∫—Å–∞–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞)</b> ‚Äî –≤–∞–∂–Ω–∞ –¥–ª—è –º–æ–∑–≥–∞ –∏ –≥–ª–∞–∑
‚Ä¢ <b>ALA (–∞–ª—å—Ñ–∞-–ª–∏–Ω–æ–ª–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞)</b> ‚Äî —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞

üí™ <b>–ü–æ–ª—å–∑–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è:</b>

‚Ä¢ <b>–°–µ—Ä–¥—Ü–µ:</b> –°–Ω–∏–∂–∞—é—Ç —Ä–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
‚Ä¢ <b>–ú–æ–∑–≥:</b> –£–ª—É—á—à–∞—é—Ç –ø–∞–º—è—Ç—å –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ <b>–í–æ—Å–ø–∞–ª–µ–Ω–∏–µ:</b> –û–±–ª–∞–¥–∞—é—Ç –ø—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
‚Ä¢ <b>–ì–ª–∞–∑–∞:</b> –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ç—á–∞—Ç–∫–∏
‚Ä¢ <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</b> –ú–æ–≥—É—Ç –ø–æ–º–æ—á—å –ø—Ä–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏

üçΩÔ∏è <b>–õ—É—á—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>

<b>–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (EPA + DHA):</b>
‚Ä¢ –ñ–∏—Ä–Ω–∞—è –º–æ—Ä—Å–∫–∞—è —Ä—ã–±–∞: –ª–æ—Å–æ—Å—å, —Å–∫—É–º–±—Ä–∏—è, —Å–∞—Ä–¥–∏–Ω—ã, –∞–Ω—á–æ—É—Å—ã
‚Ä¢ –†—ã–±–∏–π –∂–∏—Ä
‚Ä¢ –ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã

<b>–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (ALA):</b>
‚Ä¢ –õ—å–Ω—è–Ω–æ–µ —Å–µ–º—è –∏ –º–∞—Å–ª–æ
‚Ä¢ –ß–∏–∞ —Å–µ–º–µ–Ω–∞
‚Ä¢ –ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏
‚Ä¢ –ö–æ–Ω–æ–ø–ª—è–Ω—ã–µ —Å–µ–º–µ–Ω–∞

üìä <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–∑—ã:</b>
‚Ä¢ –ó–¥–æ—Ä–æ–≤—ã–µ –≤–∑—Ä–æ—Å–ª—ã–µ: 250-500 –º–≥ EPA+DHA –≤ –¥–µ–Ω—å
‚Ä¢ –ü—Ä–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö: 1-4 –≥ –≤ –¥–µ–Ω—å (–ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –≤—Ä–∞—á–∞)
‚Ä¢ –†—ã–±–∞: 2-3 –ø–æ—Ä—Ü–∏–∏ –≤ –Ω–µ–¥–µ–ª—é

‚öñÔ∏è <b>–í—ã–±–æ—Ä –¥–æ–±–∞–≤–æ–∫:</b>
–ï—Å–ª–∏ –Ω–µ –µ–¥–∏—Ç–µ —Ä—ã–±—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏ –û–º–µ–≥–∞-3. –ò—â–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º EPA –∏ DHA, –ø—Ä–æ—à–µ–¥—à–∏–µ –æ—á–∏—Å—Ç–∫—É –æ—Ç —Ç—è–∂–µ–ª—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤.
                """, "–ö–æ–º–∞–Ω–¥–∞ NutriBot", "American Heart Association, NIH", "2024-01-10"),

                # –û—Å–Ω–æ–≤—ã –ø–∏—Ç–∞–Ω–∏—è
                (2, "–ë–∞–ª–∞–Ω—Å –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤: –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã", """
<b>–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã</b> ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –Ω–∞—à–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É –≤ –±–æ–ª—å—à–∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

ü•© <b>–ë–ï–õ–ö–ò (–ü—Ä–æ—Ç–µ–∏–Ω—ã)</b>

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –º—ã—à—Ü, –∫–æ—Å—Ç–µ–π, –∫–æ–∂–∏
‚Ä¢ –°–∏–Ω—Ç–µ–∑ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ –∏ –≥–æ—Ä–º–æ–Ω–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ (4 –∫–∫–∞–ª/–≥)

<b>–ù–æ—Ä–º–∞:</b> 0.8-2.2 –≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞ —Ç–µ–ª–∞
<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> –º—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –±–æ–±–æ–≤—ã–µ, –æ—Ä–µ—Ö–∏

ü•ë <b>–ñ–ò–†–´ (–õ–∏–ø–∏–¥—ã)</b>

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ (9 –∫–∫–∞–ª/–≥)
‚Ä¢ –£—Å–≤–æ–µ–Ω–∏–µ –∂–∏—Ä–æ—Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ (A, D, E, K)
‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–ª–µ—Ç–æ—á–Ω—ã—Ö –º–µ–º–±—Ä–∞–Ω
‚Ä¢ –°–∏–Ω—Ç–µ–∑ –≥–æ—Ä–º–æ–Ω–æ–≤

<b>–ù–æ—Ä–º–∞:</b> 20-35% –æ—Ç –æ–±—â–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å–ª–∞, –æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, —Ä—ã–±–∞, —Å–µ–º–µ–Ω–∞

üçû <b>–£–ì–õ–ï–í–û–î–´ (–ö–∞—Ä–±–æ–≥–∏–¥—Ä–∞—Ç—ã)</b>

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ (4 –∫–∫–∞–ª/–≥)
‚Ä¢ –ü–∏—Ç–∞–Ω–∏–µ –º–æ–∑–≥–∞ –∏ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã –≤ –∫—Ä–æ–≤–∏

<b>–ù–æ—Ä–º–∞:</b> 45-65% –æ—Ç –æ–±—â–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> –∫—Ä—É–ø—ã, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, —Ö–ª–µ–±, –º–∞–∫–∞—Ä–æ–Ω—ã

‚öñÔ∏è <b>–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:</b>

<b>–î–ª—è —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:</b>
‚Ä¢ –ë–µ–ª–∫–∏: 15-25%
‚Ä¢ –ñ–∏—Ä—ã: 20-35% 
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 45-65%

<b>–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:</b>
‚Ä¢ –ë–µ–ª–∫–∏: 25-30%
‚Ä¢ –ñ–∏—Ä—ã: 25-30%
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 40-50%

<b>–î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã:</b>
‚Ä¢ –ë–µ–ª–∫–∏: 25-35%
‚Ä¢ –ñ–∏—Ä—ã: 20-25%
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 45-55%

üí° <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:</b>

1. <b>–í–∫–ª—é—á–∞–π—Ç–µ –≤—Å–µ —Ç—Ä–∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏</b>
2. <b>–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b> —Ü–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
3. <b>–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ —Ü–µ–ª–∏:</b> –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –¥–ª—è –º—ã—à—Ü, –±–æ–ª—å—à–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
4. <b>–°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º</b> –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–ü–æ–º–Ω–∏—Ç–µ: –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –∏ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –æ—Ä–≥–∞–Ω–∏–∑–º–∞.
                """, "–ö–æ–º–∞–Ω–¥–∞ NutriBot", "Academy of Nutrition and Dietetics", "2024-01-08"),

                # –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ—Ö—É–¥–µ–Ω–∏—é
                (3, "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞", """
<b>–ü–æ—Ö—É–¥–µ–Ω–∏–µ</b> ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞, –Ω–æ –∏ –∑–∞–±–æ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞.

‚öñÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ—Ö—É–¥–µ–Ω–∏—è:</b>

1. <b>–î–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π</b> ‚Äî —Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ
2. <b>–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ—Å—Ç—å</b> ‚Äî 0.5-1 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é
3. <b>–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å</b> ‚Äî –Ω–µ –∏—Å–∫–ª—é—á–∞—Ç—å —Ü–µ–ª—ã–µ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
4. <b>–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å</b> ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å –æ–±—Ä–∞–∑–æ–º –∂–∏–∑–Ω–∏

üçΩÔ∏è <b>–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:</b>

<b>–ß—Ç–æ –î–ï–õ–ê–¢–¨:</b>
‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ (–¥–æ 30% –∫–∞–ª–æ—Ä–∏–π)
‚Ä¢ –ï—Å—Ç—å –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–∏
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–π
‚Ä¢ –ü–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã (30-35 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞)
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞—Ä–∞–Ω–µ–µ

<b>–ß—Ç–æ –ù–ï –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ì–æ–ª–æ–¥–∞—Ç—å –∏–ª–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏
‚Ä¢ –ò—Å–∫–ª—é—á–∞—Ç—å –∂–∏—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å "–¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–º–∏" –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
‚Ä¢ –ü–µ—Ä–µ–µ–¥–∞—Ç—å –¥–∞–∂–µ –∑–¥–æ—Ä–æ–≤–æ–π –ø–∏—â–∏

üèÉ <b>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>

<b>–ö–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>
‚Ä¢ 150-300 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –•–æ–¥—å–±–∞, –±–µ–≥, –ø–ª–∞–≤–∞–Ω–∏–µ, –≤–µ–ª–æ—Å–∏–ø–µ–¥
‚Ä¢ –ü–æ–º–æ–≥–∞—é—Ç —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π

<b>–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>
‚Ä¢ 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—é—Ç –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É
‚Ä¢ –£—Å–∫–æ—Ä—è—é—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º

üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã:</b>

‚Ä¢ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</b> –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —á–µ—Ç–∫–∏–µ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏
‚Ä¢ <b>–ü—Ä–∏–≤—ã—á–∫–∏:</b> –ú–µ–Ω—è–π—Ç–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –ø–æ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–µ
‚Ä¢ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> –ù–∞–π–¥–∏—Ç–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
‚Ä¢ <b>–¢–µ—Ä–ø–µ–Ω–∏–µ:</b> –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–µ —Å—Ä–∞–∑—É

üìä <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:</b>

1. <b>–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è</b> ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ –µ–¥–∏—Ç–µ
2. <b>–ì–æ—Ç–æ–≤—å—Ç–µ –¥–æ–º–∞</b> ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Å–æ—Å—Ç–∞–≤ –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
3. <b>–ï—à—å—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ</b> ‚Äî –º–æ–∑–≥ –ø–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –æ –Ω–∞—Å—ã—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
4. <b>–í—ã—Å—ã–ø–∞–π—Ç–µ—Å—å</b> ‚Äî –Ω–µ–¥–æ—Å—ã–ø –≤–ª–∏—è–µ—Ç –Ω–∞ –≥–æ—Ä–º–æ–Ω—ã –≥–æ–ª–æ–¥–∞
5. <b>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–º</b> ‚Äî –∫–æ—Ä—Ç–∏–∑–æ–ª —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é –∂–∏—Ä–∞

‚ö†Ô∏è <b>–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É:</b>
‚Ä¢ –ò–ú–¢ > 30 –∏–ª–∏ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Ö—É–¥–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º
‚Ä¢ –†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–±—Ä–æ—Å–∏—Ç—å –±–æ–ª–µ–µ 20% –≤–µ—Å–∞

–ü–æ–º–Ω–∏—Ç–µ: –ª—É—á—à–∞—è –¥–∏–µ—Ç–∞ ‚Äî —Ç–∞, –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –≤—Å—é –∂–∏–∑–Ω—å!
                """, "–ö–æ–º–∞–Ω–¥–∞ NutriBot", "CDC, Mayo Clinic", "2024-01-05"),

                # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –ø–∏—Ç–∞–Ω–∏—è
                (4, "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ: –∫–∞–∫ —Å –Ω–∏–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è", """
<b>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ</b> ‚Äî —ç—Ç–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∏—â–∏ –Ω–µ –∏–∑-–∑–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –≥–æ–ª–æ–¥–∞, –∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏—è–º–∏ –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å–æ–º.

üòî <b>–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ?</b>

–≠—Ç–æ –∫–æ–≥–¥–∞ –º—ã –µ–¥–∏–º –≤ –æ—Ç–≤–µ—Ç –Ω–∞:
‚Ä¢ –°—Ç—Ä–µ—Å—Å –∏ —Ç—Ä–µ–≤–æ–≥—É
‚Ä¢ –°–∫—É–∫—É –∏–ª–∏ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ
‚Ä¢ –ì—Ä—É—Å—Ç—å –∏–ª–∏ –¥–µ–ø—Ä–µ—Å—Å–∏—é
‚Ä¢ –ì–Ω–µ–≤ –∏–ª–∏ —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—é
‚Ä¢ –£—Å—Ç–∞–ª–æ—Å—Ç—å
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ

üîç <b>–ö–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ–¥?</b>

<b>–§–∏–∑–∏—á–µ—Å–∫–∏–π –≥–æ–ª–æ–¥:</b>
‚Ä¢ –†–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç—Å—è –ª—é–±–æ–π –µ–¥–æ–π
‚Ä¢ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—Å—ã—â–µ–Ω–∏–∏
‚Ä¢ –ù–µ –≤—ã–∑—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã

<b>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ–¥:</b>
‚Ä¢ –í–æ–∑–Ω–∏–∫–∞–µ—Ç –≤–Ω–µ–∑–∞–ø–Ω–æ
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è
‚Ä¢ –•–æ—á–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π "–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π" –µ–¥—ã
‚Ä¢ –¢—Ä—É–¥–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
‚Ä¢ –í—ã–∑—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –∏ —Å—Ç—ã–¥–∞

üß† <b>–ü—Ä–∏—á–∏–Ω—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—è:</b>

1. <b>–°—Ç—Ä–µ—Å—Å</b> ‚Äî –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ç–∏–∑–æ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∞–ø–ø–µ—Ç–∏—Ç
2. <b>–î–µ—Ç—Å–∫–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏</b> ‚Äî –µ–¥–∞ –∫–∞–∫ —É—Ç–µ—à–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞
3. <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã</b> ‚Äî –µ–¥–∞ –∫–∞–∫ —Å–ø–æ—Å–æ–± –æ–±—â–µ–Ω–∏—è
4. <b>–°–∫—É–∫–∞</b> ‚Äî –µ–¥–∞ –∫–∞–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ
5. <b>–ü—Ä–∏–≤—ã—á–∫–∞</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

üí™ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è:</b>

<b>1. –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π –∏ –µ–¥—ã
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ—Å—å –≤–æ–ø—Ä–æ—Å–æ–º: "–Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ–ª–æ–¥–µ–Ω?"
‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –≥–æ–ª–æ–¥ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10

<b>2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:</b>
‚Ä¢ –ü—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ: –º–µ–¥–∏—Ç–∞—Ü–∏—è, –≥–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ
‚Ä¢ –ü—Ä–∏ —Å–∫—É–∫–µ: —Ö–æ–±–±–∏, –ø—Ä–æ–≥—É–ª–∫–∞, —á—Ç–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏ –≥—Ä—É—Å—Ç–∏: –æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–∑—å—è–º–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ
‚Ä¢ –ü—Ä–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏: –æ—Ç–¥—ã—Ö, —Å–æ–Ω

<b>3. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—ã:</b>
‚Ä¢ –£–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ø–æ–ª—è –∑—Ä–µ–Ω–∏—è
‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–µ –∑–∞–∫—É—Å–∫–∏ –ø–æ–¥ —Ä—É–∫–æ–π
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ "–∑–æ–Ω—ã –±–µ–∑ –µ–¥—ã" (–∫—Ä–æ–≤–∞—Ç—å, —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª)

<b>4. –¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏:</b>
‚Ä¢ <b>–ü–∞—É–∑–∞:</b> –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –µ–¥–æ–π
‚Ä¢ <b>HALT:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ‚Äî –Ω–µ –≥–æ–ª–æ–¥–Ω—ã –ª–∏ –≤—ã, –Ω–µ –∑–ª—ã, –Ω–µ –æ–¥–∏–Ω–æ–∫–∏, –Ω–µ —É—Å—Ç–∞–ª–∏
‚Ä¢ <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</b> –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –º—ã—à–µ—á–Ω–∞—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è</b>

üçé <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:</b>

‚Ä¢ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ</b> ‚Äî –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏
‚Ä¢ <b>–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ–Ω</b> ‚Äî 7-9 —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏
‚Ä¢ <b>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b> ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç
‚Ä¢ <b>–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî –¥–µ–ª–∏—Ç–µ—Å—å –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ —Å –±–ª–∏–∑–∫–∏–º–∏

üÜò <b>–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é:</b>
‚Ä¢ –ü–µ—Ä–µ–µ–¥–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –ß—É–≤—Å—Ç–≤–æ –ø–æ—Ç–µ—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –µ–¥–æ–π
‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–µ—Å –∏ –∑–¥–æ—Ä–æ–≤—å–µ
‚Ä¢ –î–µ–ø—Ä–µ—Å—Å–∏—è –∏–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

–ü–æ–º–Ω–∏—Ç–µ: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å. –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã –∫ —Å–µ–±–µ –∏ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é.
                """, "–ö–æ–º–∞–Ω–¥–∞ NutriBot", "American Psychological Association", "2024-01-03"),

                # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ
                (5, "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ: —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", """
<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ (–ò–ì)</b> ‚Äî —ç—Ç–æ —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —á–µ—Ä–µ–¥—É—é—Ç—Å—è –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –∏ –≥–æ–ª–æ–¥–∞–Ω–∏—è.

‚è∞ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ò–ì:</b>

<b>16:8 (–º–µ—Ç–æ–¥ –õ–µ–∞–Ω–≥–µ–π–Ω–∑–∞):</b>
‚Ä¢ 16 —á–∞—Å–æ–≤ –≥–æ–ª–æ–¥–∞–Ω–∏—è, 8 —á–∞—Å–æ–≤ –¥–ª—è –µ–¥—ã
‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: —É–∂–∏–Ω –≤ 20:00, —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ 12:00
‚Ä¢ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∏ –ª–µ–≥–∫–∏–π –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö

<b>5:2 (–¥–∏–µ—Ç–∞ –§–∞—Å—Ç–∞):</b>
‚Ä¢ 5 –¥–Ω–µ–π –æ–±—ã—á–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, 2 –¥–Ω—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (500-600 –∫–∫–∞–ª)
‚Ä¢ –î–Ω–∏ –≥–æ–ª–æ–¥–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–æ–¥—Ä—è–¥

<b>24-—á–∞—Å–æ–≤–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ:</b>
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å –±–µ–∑ –µ–¥—ã 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç —É–∂–∏–Ω–∞ –¥–æ —É–∂–∏–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è

<b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ:</b>
‚Ä¢ –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–π –æ–±—ã—á–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏ –≥–æ–ª–æ–¥–∞–Ω–∏—è
‚Ä¢ –°–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π –º–µ—Ç–æ–¥

üî¨ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–ª—å–∑–∞ –ò–ì:</b>

‚Ä¢ <b>–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞</b> ‚Äî –∑–∞ —Å—á–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ <b>–£–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞</b> ‚Äî –ø–æ–≤—ã—à–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É
‚Ä¢ <b>–ö–ª–µ—Ç–æ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</b> ‚Äî –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞—É—Ç–æ—Ñ–∞–≥–∏–∏
‚Ä¢ <b>–ó–¥–æ—Ä–æ–≤—å–µ –º–æ–∑–≥–∞</b> ‚Äî —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ <b>–î–æ–ª–≥–æ–ª–µ—Ç–∏–µ</b> ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏

üíß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –≤–æ –≤—Ä–µ–º—è –≥–æ–ª–æ–¥–∞–Ω–∏—è:</b>

‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–æ:</b>
‚Ä¢ –í–æ–¥–∞ (–≥–ª–∞–≤–Ω–æ–µ!)
‚Ä¢ –ß–µ—Ä–Ω—ã–π –∫–æ—Ñ–µ –±–µ–∑ –¥–æ–±–∞–≤–æ–∫
‚Ä¢ –ó–µ–ª–µ–Ω—ã–π, —á–µ—Ä–Ω—ã–π, —Ç—Ä–∞–≤—è–Ω–æ–π —á–∞–π
‚Ä¢ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞

‚ùå <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>
‚Ä¢ –õ—é–±—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ —Å –∫–∞–ª–æ—Ä–∏—è–º–∏
‚Ä¢ –ñ–µ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∑–∏–Ω–∫–∞ —Å —Å–∞—Ö–∞—Ä–æ–º
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –≤ —Å–∏—Ä–æ–ø–µ
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–ª–∞—Å—Ç–∏—Ç–µ–ª–∏ (—Å–ø–æ—Ä–Ω–æ)

üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ò–ì:</b>

<b>–ù–µ–¥–µ–ª—è 1-2:</b> 12-—á–∞—Å–æ–≤–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ
<b>–ù–µ–¥–µ–ª—è 3-4:</b> 14-—á–∞—Å–æ–≤–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ  
<b>–ù–µ–¥–µ–ª—è 5+:</b> 16-—á–∞—Å–æ–≤–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ

<b>–°–æ–≤–µ—Ç—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö:</b>
‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
‚Ä¢ –ü–µ–π—Ç–µ –º–Ω–æ–≥–æ –≤–æ–¥—ã
‚Ä¢ –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ –ø–µ—Ä–∏–æ–¥—ã –≥–æ–ª–æ–¥–∞–Ω–∏—è –ª–µ–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
‚Ä¢ –ù–µ –ø–µ—Ä–µ–µ–¥–∞–π—Ç–µ –≤ –æ–∫–Ω–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏

‚ö†Ô∏è <b>–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏:</b>

<b>–ò–ì –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –ø—Ä–∏:</b>
‚Ä¢ –î–∏–∞–±–µ—Ç–µ 1 —Ç–∏–ø–∞
‚Ä¢ –†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
‚Ä¢ –ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
‚Ä¢ –î–µ—Ç—Å–∫–æ–º –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ
‚Ä¢ –°–µ—Ä—å–µ–∑–Ω—ã—Ö —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö

<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</b>
‚Ä¢ –ì–æ–ª–æ–¥ –∏ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø–µ—Ä–≤—ã–µ –Ω–µ–¥–µ–ª–∏)
‚Ä¢ –ì–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏
‚Ä¢ –£—Å—Ç–∞–ª–æ—Å—Ç—å
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π

üìä <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>

‚Ä¢ <b>–ö–∞—á–µ—Å—Ç–≤–æ –ø–∏—â–∏ –≤–∞–∂–Ω–µ–µ:</b> –ò–ì –Ω–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–µ—Ç –Ω–µ–∑–¥–æ—Ä–æ–≤—É—é –µ–¥—É
‚Ä¢ <b>–°–ª—É—à–∞–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–º:</b> –µ—Å–ª–∏ –ø–ª–æ—Ö–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å
‚Ä¢ <b>–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å:</b> –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –æ–∫–Ω–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –ø–æ–¥ —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫
‚Ä¢ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b> –º–æ–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞—Ç–æ—â–∞–∫, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ

üè• <b>–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É:</b>
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ò–ì, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏–ª–∏ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.

–ü–æ–º–Ω–∏—Ç–µ: –ò–ì ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∞ –Ω–µ –ø–∞–Ω–∞—Ü–µ—è. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –æ–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–∏—Ç–∞–Ω–∏—è –∏ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏!
                """, "–ö–æ–º–∞–Ω–¥–∞ NutriBot", "New England Journal of Medicine, Harvard Health", "2024-01-01"),

                # –î—Ä—É–≥–æ–µ
                (6, "–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è: —Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –Ω—É–∂–Ω–æ –ø–∏—Ç—å –≤ –¥–µ–Ω—å", """
<b>–í–æ–¥–∞</b> ‚Äî –æ—Å–Ω–æ–≤–∞ –∂–∏–∑–Ω–∏. –ù–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º –Ω–∞ 60% —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤–æ–¥—ã, –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è.

üíß <b>–§—É–Ω–∫—Ü–∏–∏ –≤–æ–¥—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ:</b>

‚Ä¢ <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</b> –î–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –∫ –∫–ª–µ—Ç–∫–∞–º
‚Ä¢ <b>–î–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è:</b> –í—ã–≤–µ–¥–µ–Ω–∏–µ —Ç–æ–∫—Å–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø–æ—á–∫–∏
‚Ä¢ <b>–¢–µ—Ä–º–æ—Ä–µ–≥—É–ª—è—Ü–∏—è:</b> –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞
‚Ä¢ <b>–°–º–∞–∑–∫–∞:</b> –°–º–∞–∑—ã–≤–∞–Ω–∏–µ —Å—É—Å—Ç–∞–≤–æ–≤ –∏ –æ—Ä–≥–∞–Ω–æ–≤
‚Ä¢ <b>–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ:</b> –ü–æ–º–æ—â—å –≤ —Ä–∞—Å—â–µ–ø–ª–µ–Ω–∏–∏ –ø–∏—â–∏
‚Ä¢ <b>–ö—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ:</b> –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫—Ä–æ–≤–∏

üìä <b>–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –Ω—É–∂–Ω–æ –ø–∏—Ç—å?</b>

<b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ú—É–∂—á–∏–Ω—ã: 3.7 –ª (15 —Å—Ç–∞–∫–∞–Ω–æ–≤) –≤—Å–µ—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π –≤ –¥–µ–Ω—å
‚Ä¢ –ñ–µ–Ω—â–∏–Ω—ã: 2.7 –ª (11 —Å—Ç–∞–∫–∞–Ω–æ–≤) –≤—Å–µ—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π –≤ –¥–µ–Ω—å
‚Ä¢ –ò–∑ –Ω–∏—Ö —á–∏—Å—Ç–æ–π –≤–æ–¥—ã: 8-10 —Å—Ç–∞–∫–∞–Ω–æ–≤ (2-2.5 –ª)

<b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞:</b>
30-35 –º–ª –Ω–∞ 1 –∫–≥ –º–∞—Å—Å—ã —Ç–µ–ª–∞

<b>–ü—Ä–∏–º–µ—Ä:</b> –í–µ—Å 70 –∫–≥ = 70 √ó 30 = 2100 –º–ª (2.1 –ª)

üí™ <b>–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–∏—Ç—å –±–æ–ª—å—à–µ:</b>

‚Ä¢ <b>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> +500-750 –º–ª –Ω–∞ —á–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ <b>–ñ–∞—Ä–∫–∞—è –ø–æ–≥–æ–¥–∞:</b> +500-1000 –º–ª –≤ –¥–µ–Ω—å
‚Ä¢ <b>–ë–æ–ª–µ–∑–Ω—å:</b> –ø—Ä–∏ –ª–∏—Ö–æ—Ä–∞–¥–∫–µ, —Ä–≤–æ—Ç–µ, –¥–∏–∞—Ä–µ–µ
‚Ä¢ <b>–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:</b> +300-700 –º–ª –≤ –¥–µ–Ω—å
‚Ä¢ <b>–ë–æ–ª—å—à–∞—è –≤—ã—Å–æ—Ç–∞:</b> –Ω–∞–¥ 2500 –º
‚Ä¢ <b>–ê–ª–∫–æ–≥–æ–ª—å –∏ –∫–æ—Ñ–µ–∏–Ω:</b> –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –Ω–∞ –∫–∞–∂–¥—É—é –ø–æ—Ä—Ü–∏—é

üö∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∂–∏–¥–∫–æ—Å—Ç–∏:</b>

<b>–õ—É—á—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>
‚Ä¢ –ß–∏—Å—Ç–∞—è –≤–æ–¥–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
‚Ä¢ –¢—Ä–∞–≤—è–Ω—ã–µ —á–∞–∏ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞
‚Ä¢ –í–æ–¥–∞ —Å –ª–∏–º–æ–Ω–æ–º –∏–ª–∏ –æ–≥—É—Ä—Ü–æ–º

<b>–•–æ—Ä–æ—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>
‚Ä¢ –ó–µ–ª–µ–Ω—ã–π –∏ —á–µ—Ä–Ω—ã–π —á–∞–π
‚Ä¢ –ö–æ—Ñ–µ (–≤ —É–º–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö)
‚Ä¢ –ú–æ–ª–æ–∫–æ –∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>
‚Ä¢ –°—É–ø—ã –∏ –±—É–ª—å–æ–Ω—ã
‚Ä¢ –§—Ä—É–∫—Ç—ã (–∞—Ä–±—É–∑, –∞–ø–µ–ª—å—Å–∏–Ω—ã, –≤–∏–Ω–æ–≥—Ä–∞–¥)
‚Ä¢ –û–≤–æ—â–∏ (–æ–≥—É—Ä—Ü—ã, –ø–æ–º–∏–¥–æ—Ä—ã, —Å–∞–ª–∞—Ç)

‚ö†Ô∏è <b>–ü—Ä–∏–∑–Ω–∞–∫–∏ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏—è:</b>

<b>–õ–µ–≥–∫–æ–µ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ñ–∞–∂–¥–∞
‚Ä¢ –¢–µ–º–Ω–∞—è –º–æ—á–∞
‚Ä¢ –£—Å—Ç–∞–ª–æ—Å—Ç—å
‚Ä¢ –ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å

<b>–£–º–µ—Ä–µ–Ω–Ω–æ–µ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –°—É—Ö–æ—Å—Ç—å –≤–æ —Ä—Ç—É –∏ –Ω–∞ —è–∑—ã–∫–µ
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏—è
‚Ä¢ –ú—ã—à–µ—á–Ω—ã–µ —Å–ø–∞–∑–º—ã
‚Ä¢ –¢–æ—à–Ω–æ—Ç–∞

<b>–°–µ—Ä—å–µ–∑–Ω–æ–µ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ö—Ä–∞–π–Ω—è—è –∂–∞–∂–¥–∞
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏—è
‚Ä¢ –û–±–º–æ—Ä–æ–∫
‚Ä¢ –£—á–∞—â–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ

üí° <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:</b>

1. <b>–ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–Ω—å —Å–æ —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã</b>
2. <b>–ù–æ—Å–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã —Å —Å–æ–±–æ–π</b>
3. <b>–ü–µ–π—Ç–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏</b>
4. <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ</b>
5. <b>–ê—Ä–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –≤–æ–¥—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–æ–±–∞–≤–∫–∞–º–∏</b>
6. <b>–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ü–≤–µ—Ç–æ–º –º–æ—á–∏</b> ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç–æ–π

‚öñÔ∏è <b>–ú–æ–∂–Ω–æ –ª–∏ –ø–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–¥—ã?</b>

–î–∞, –≥–∏–ø–æ–Ω–∞—Ç—Ä–∏–µ–º–∏—è (–≤–æ–¥–Ω–æ–µ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ) –≤–æ–∑–º–æ–∂–Ω–∞, –Ω–æ —Ä–µ–¥–∫–∞:
‚Ä¢ –ë–æ–ª–µ–µ 1 –ª–∏—Ç—Ä–∞ –≤ —á–∞—Å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤
‚Ä¢ –°–∏–º–ø—Ç–æ–º—ã: —Ç–æ—à–Ω–æ—Ç–∞, –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å, confusion

<b>–ó–æ–ª–æ—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ:</b> –ü–µ–π—Ç–µ, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è, –∏ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∂–∞—Ä—ã.

–ü–æ–º–Ω–∏—Ç–µ: –∂–∞–∂–¥–∞ ‚Äî —É–∂–µ –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏—è. –ù–µ –∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø–∏—Ç—å!
                """, "–ö–æ–º–∞–Ω–¥–∞ NutriBot", "Mayo Clinic, National Academies", "2023-12-28")
            ]

            for article in sample_articles:
                conn.execute('''
                    INSERT INTO articles (topic_id, title, content, author, sources, publication_date)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', article)

            conn.commit()
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü —Å—Ç–∞—Ç–µ–π: {e}")
    finally:
        conn.close()

def get_article_topics():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º —Å—Ç–∞—Ç–µ–π."""
    conn = get_db_connection()
    try:
        cursor = conn.execute('''
            SELECT * FROM article_topics 
            WHERE is_active = 1 
            ORDER BY sort_order, name
        ''')
        topics = [dict(row) for row in cursor.fetchall()]
        return topics
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º —Å—Ç–∞—Ç–µ–π: {e}")
        return []
    finally:
        conn.close()

def get_articles_by_topic(topic_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ."""
    conn = get_db_connection()
    try:
        cursor = conn.execute('''
            SELECT * FROM articles 
            WHERE topic_id = ? AND is_published = 1 
            ORDER BY publication_date DESC, title
        ''', (topic_id,))
        articles = [dict(row) for row in cursor.fetchall()]
        return articles
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ {topic_id}: {e}")
        return []
    finally:
        conn.close()

def get_article_by_id(article_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—å—é –ø–æ ID."""
    conn = get_db_connection()
    try:
        cursor = conn.execute('''
            SELECT * FROM articles 
            WHERE id = ? AND is_published = 1
        ''', (article_id,))
        row = cursor.fetchone()

        if row:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            conn.execute('''
                UPDATE articles 
                SET views_count = views_count + 1 
                WHERE id = ?
            ''', (article_id,))
            conn.commit()

        return dict(row) if row else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ ID {article_id}: {e}")
        return None
    finally:
        conn.close()


def init_weight_reports_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–ø–∏—Å–µ–π –≤–µ—Å–∞."""
    conn = get_db_connection()

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø–∏—Å–µ–π –≤–µ—Å–∞
        conn.execute('''
            CREATE TABLE IF NOT EXISTS weight_records (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                date TEXT,
                weight REAL NOT NULL,
                notes TEXT,
                entry_time TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                UNIQUE(user_id, date)
            )
        ''')

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        conn.execute('CREATE INDEX IF NOT EXISTS idx_weight_records_user_date ON weight_records (user_id, date)')

        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π –≤–µ—Å–∞ —Å–æ–∑–¥–∞–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø–∏—Å–µ–π –≤–µ—Å–∞: {e}")
    finally:
        conn.close()

def add_weight_record(user_id, weight, notes=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –≤–µ—Å–µ."""
    conn = get_db_connection()
    try:
        today = datetime.now().strftime("%Y-%m-%d")

        conn.execute('''
            INSERT OR REPLACE INTO weight_records (user_id, date, weight, notes)
            VALUES (?, ?, ?, ?)
        ''', (user_id, today, weight, notes))

        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {weight} –∫–≥")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞: {e}")
        return False
    finally:
        conn.close()

def get_weight_history(user_id, days=30):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π –≤–µ—Å–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."""
    conn = get_db_connection()
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")

        cursor = conn.execute('''
            SELECT date, weight, notes, entry_time
            FROM weight_records 
            WHERE user_id = ? AND date >= ?
            ORDER BY date DESC
        ''', (user_id, start_date))

        records = [dict(row) for row in cursor.fetchall()]
        return records

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Å–∞: {e}")
        return []
    finally:
        conn.close()

def get_latest_weight_record(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    try:
        cursor = conn.execute('''
            SELECT date, weight, notes, entry_time
            FROM weight_records 
            WHERE user_id = ?
            ORDER BY date DESC
            LIMIT 1
        ''', (user_id,))

        row = cursor.fetchone()
        return dict(row) if row else None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞: {e}")
        return None
    finally:
        conn.close()

def update_weight_record(user_id, date, weight, notes=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤–µ—Å–∞."""
    conn = get_db_connection()
    try:
        conn.execute('''
            UPDATE weight_records 
            SET weight = ?, notes = ?, entry_time = CURRENT_TIMESTAMP
            WHERE user_id = ? AND date = ?
        ''', (weight, notes, user_id, date))

        conn.commit()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {date}: {weight} –∫–≥")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞: {e}")
        return False
    finally:
        conn.close()

def update_user_weight(user_id, new_weight):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    try:
        conn.execute('''
            UPDATE users 
            SET weight = ?
            WHERE id = ?
        ''', (new_weight, user_id))

        conn.commit()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –≤–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {new_weight} –∫–≥")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ: {e}")
        return False
    finally:
        conn.close()


def init_shopping_cart_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω—ã."""
    conn = get_db_connection()

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ—Ä–∑–∏–Ω—ã
        conn.execute('''
            CREATE TABLE IF NOT EXISTS shopping_cart (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                product_name TEXT NOT NULL,
                quantity REAL NOT NULL,
                unit TEXT DEFAULT '–≥',
                period TEXT,
                is_purchased BOOLEAN DEFAULT 0,
                source TEXT DEFAULT 'manual',
                created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        conn.execute('CREATE INDEX IF NOT EXISTS idx_shopping_cart_user ON shopping_cart (user_id)')

        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å–æ–∑–¥–∞–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä–∑–∏–Ω—ã: {e}")
    finally:
        conn.close()

def get_shopping_cart_items(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    try:
        cursor = conn.execute('''
            SELECT id, product_name, quantity, unit, period, is_purchased, source, created_date
            FROM shopping_cart 
            WHERE user_id = ?
            ORDER BY is_purchased ASC, product_name ASC
        ''', (user_id,))

        items = [dict(row) for row in cursor.fetchall()]
        return items

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return []
    finally:
        conn.close()

def add_shopping_cart_item(user_id, product_name, quantity, unit='–≥', period='manual', source='manual'):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç
        cursor = conn.execute('''
            SELECT id, quantity FROM shopping_cart 
            WHERE user_id = ? AND product_name = ? AND unit = ?
        ''', (user_id, product_name, unit))

        existing = cursor.fetchone()

        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            new_quantity = existing['quantity'] + quantity
            conn.execute('''
                UPDATE shopping_cart 
                SET quantity = ?, period = ?, source = ?
                WHERE id = ?
            ''', (new_quantity, period, source, existing['id']))
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
            conn.execute('''
                INSERT INTO shopping_cart (user_id, product_name, quantity, unit, period, source)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, product_name, quantity, unit, period, source))

        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É: {product_name} - {quantity} {unit}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        return False
    finally:
        conn.close()

def remove_shopping_cart_item(user_id, item_id):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    conn = get_db_connection()
    try:
        conn.execute('''
            DELETE FROM shopping_cart 
            WHERE user_id = ? AND id = ?
        ''', (user_id, item_id))

        conn.commit()
        return conn.total_changes > 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return False
    finally:
        conn.close()

def update_shopping_cart_item(user_id, item_id, quantity, unit):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    conn = get_db_connection()
    try:
        conn.execute('''
            UPDATE shopping_cart 
            SET quantity = ?, unit = ?
            WHERE user_id = ? AND id = ?
        ''', (quantity, unit, user_id, item_id))

        conn.commit()
        return conn.total_changes > 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return False
    finally:
        conn.close()

def toggle_item_purchased(user_id, item_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    conn = get_db_connection()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        cursor = conn.execute('''
            SELECT is_purchased FROM shopping_cart 
            WHERE user_id = ? AND id = ?
        ''', (user_id, item_id))

        row = cursor.fetchone()
        if not row:
            return False

        new_status = not row['is_purchased']

        conn.execute('''
            UPDATE shopping_cart 
            SET is_purchased = ?
            WHERE user_id = ? AND id = ?
        ''', (new_status, user_id, item_id))

        conn.commit()
        return conn.total_changes > 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
        return False
    finally:
        conn.close()

def clear_shopping_cart(user_id):
    """–û—á–∏—â–∞–µ—Ç –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    try:
        conn.execute('''
            DELETE FROM shopping_cart 
            WHERE user_id = ?
        ''', (user_id,))

        conn.commit()
        logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return False
    finally:
        conn.close()

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã."""
    conn = get_db_connection()

    try:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        conn.execute(f'''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            name TEXT,
            age INTEGER,
            gender TEXT,
            height REAL,
            weight REAL,
            activity_level TEXT,
            goal TEXT,
            goal_calories REAL,
            protein INTEGER,
            fat INTEGER,
            carbs INTEGER,
            registration_date TEXT DEFAULT CURRENT_TIMESTAMP,
            water_goal INTEGER DEFAULT {DEFAULT_WATER_GOAL},
            registration_complete BOOLEAN DEFAULT FALSE
        )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ
        conn.execute('''
        CREATE TABLE IF NOT EXISTS food_entries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT,
            meal_type TEXT,
            food_name TEXT,
            calories REAL,
            protein REAL,
            fat REAL,
            carbs REAL,
            entry_time TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã
        conn.execute('''
        CREATE TABLE IF NOT EXISTS water_entries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT,
            amount INTEGER,
            entry_time TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        conn.execute('''
                CREATE TABLE IF NOT EXISTS recipes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    name TEXT,
                    ingredients TEXT,
                    instructions TEXT,
                    calories REAL,
                    protein REAL,
                    fat REAL,
                    carbs REAL,
                    photo_path TEXT,
                    creation_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    is_favorite BOOLEAN DEFAULT 0,
                    FOREIGN KEY (user_id) REFERENCES users (id)
                )
                ''')

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        conn.execute('''
        CREATE TABLE IF NOT EXISTS meal_plan (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT,
            meal_type TEXT,
            recipe_id INTEGER,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (recipe_id) REFERENCES recipes (id)
        )
        ''')



        # —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_recipes_user_name 
                ON recipes(user_id, name COLLATE NOCASE)
                """)

        conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_recipes_user_ingredients 
                ON recipes(user_id, ingredients COLLATE NOCASE)
                """)

        conn.execute('CREATE INDEX IF NOT EXISTS idx_food_entries_user_date ON food_entries (user_id, date)')
        conn.execute('CREATE INDEX IF NOT EXISTS idx_water_entries_user_date ON water_entries (user_id, date)')
        conn.execute('CREATE INDEX IF NOT EXISTS idx_recipes_user ON recipes (user_id)')
        conn.execute('CREATE INDEX IF NOT EXISTS idx_meal_plan_user_date ON meal_plan (user_id, date)')



        cursor = conn.execute("PRAGMA table_info(users)")
        columns = [row[1] for row in cursor.fetchall()]  # –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users: {columns}")

        cursor = conn.execute("PRAGMA table_info(recipes)")
        columns = [row[1] for row in cursor.fetchall()]

        if "photo_path" not in columns:
            conn.execute("ALTER TABLE recipes ADD COLUMN photo_path TEXT")
            conn.commit()
            logger.info("–°—Ç–æ–ª–±–µ—Ü photo_path —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É recipes.")

        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

    init_nutritionists_table()
    init_articles_tables()
    init_weight_reports_table()
    init_shopping_cart_table()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if not os.path.exists(DB_PATH):
    init_db()
else:
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    init_db()


def execute_query(query, params=(), fetch_one=False, fetch_all=False):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è).

    Args:
        query (str): SQL-–∑–∞–ø—Ä–æ—Å.
        params (tuple): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏.
        fetch_one (bool): –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.
        fetch_all (bool): –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏.

    Returns:
        list or dict or None: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    conn = get_db_connection()
    if not conn:
        return None

    try:
        cursor = conn.cursor()
        cursor.execute(query, params)
        conn.commit()

        if fetch_one:
            return cursor.fetchone()

        if fetch_all:
            return cursor.fetchall()

        return None  # –ï—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

    finally:
        conn.close()
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

def create_user(user_id, name=None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()

        if not user:
            conn.execute(
                'INSERT INTO users (id, name, water_goal) VALUES (?, ?, ?)',
                (user_id, name, DEFAULT_WATER_GOAL)
            )
            conn.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")
            return True
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        conn.close()


def get_user(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    try:
        user = conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
        if user:
            return dict(user)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        conn.close()

    logging.info(f"–í—ã–∑–æ–≤ get_user —Å ID: {user_id}")
    query = "SELECT * FROM users WHERE id = ?"
    result = execute_query(query, (user_id,), fetchone=True)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_user: {result}")
    return result


def update_user(user_id, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    try:
        if 'goal_calories' in kwargs:
            kwargs['registration_complete'] = True

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
        fields = []
        values = []

        for key, value in kwargs.items():
            fields.append(f"{key} = ?")
            values.append(value)

        # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        values.append(user_id)

        query = f"UPDATE users SET {', '.join(fields)} WHERE id = ?"
        conn.execute(query, values)
        conn.commit()

        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –æ –µ–¥–µ

def add_food_entry(user_id, date, meal_type, food_name, calories, protein, fat, carbs):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –µ–¥–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫."""
    conn = get_db_connection()
    try:
        conn.execute(
            '''INSERT INTO food_entries 
            (user_id, date, meal_type, food_name, calories, protein, fat, carbs) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
            (user_id, date, meal_type, food_name, calories, protein, fat, carbs)
        )
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –µ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return conn.execute('SELECT last_insert_rowid()').fetchone()[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ: {e}")
        return None
    finally:
        conn.close()


def get_daily_entries(user_id, date):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ –∑–∞ –¥–µ–Ω—å."""
    conn = get_db_connection()
    try:
        entries = conn.execute(
            'SELECT * FROM food_entries WHERE user_id = ? AND date = ? ORDER BY entry_time',
            (user_id, date)
        ).fetchall()
        return [dict(entry) for entry in entries]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        return []
    finally:
        conn.close()


def get_entries_by_meal(user_id, date, meal_type):
    #–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ –∑–∞ –¥–µ–Ω—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    conn = get_db_connection()
    try:
        entries = conn.execute(
            'SELECT * FROM food_entries WHERE user_id = ? AND date = ? AND meal_type = ? ORDER BY entry_time',
            (user_id, date, meal_type)
        ).fetchall()
        return [dict(entry) for entry in entries]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: {e}")
        return []
    finally:
        conn.close()


def get_daily_totals(user_id, date):
    #–ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å.
    conn = get_db_connection()
    try:
        result = conn.execute(
            '''SELECT 
                COALESCE(SUM(calories), 0) as total_calories, 
                COALESCE(SUM(protein), 0) as total_protein, 
                COALESCE(SUM(fat), 0) as total_fat, 
                COALESCE(SUM(carbs), 0) as total_carbs 
            FROM food_entries 
            WHERE user_id = ? AND date = ?''',
            (user_id, date)
        ).fetchone()

        if result:
            return dict(result)
        return {"total_calories": 0, "total_protein": 0, "total_fat": 0, "total_carbs": 0}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω—ã—Ö —Ç–æ—Ç–∞–ª–æ–≤: {e}")
        return {"total_calories": 0, "total_protein": 0, "total_fat": 0, "total_carbs": 0}
    finally:
        conn.close()


def clear_daily_entries(user_id, date):
    #–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    conn = get_db_connection()
    try:
        conn.execute(
            'DELETE FROM food_entries WHERE user_id = ? AND date = ?',
            (user_id, date)
        )
        conn.commit()
        logger.info(f"–û—á–∏—â–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {date}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        return False
    finally:
        conn.close()


def get_recent_foods(user_id, limit=5):
    #–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    conn = get_db_connection()
    try:
        entries = conn.execute(
            '''SELECT DISTINCT food_name, AVG(calories) as calories, AVG(protein) as protein, 
            AVG(fat) as fat, AVG(carbs) as carbs, MAX(id) as id 
            FROM food_entries 
            WHERE user_id = ? 
            GROUP BY food_name 
            ORDER BY MAX(entry_time) DESC LIMIT ?''',
            (user_id, limit)
        ).fetchall()
        return [dict(entry) for entry in entries]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return []
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º

def add_water_entry(user_id, amount):
    #–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã
    date = datetime.now().strftime("%Y-%m-%d")
    conn = get_db_connection()
    try:
        conn.execute(
            'INSERT INTO water_entries (user_id, date, amount) VALUES (?, ?, ?)',
            (user_id, date, amount)
        )
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –≤–æ–¥–µ ({amount} –º–ª) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –≤–æ–¥–µ: {e}")
        return False
    finally:
        conn.close()


def get_daily_water(user_id, date=None):
    #–ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å
    if date is None:
        date = datetime.now().strftime("%Y-%m-%d")

    conn = get_db_connection()
    try:
        result = conn.execute(
            'SELECT COALESCE(SUM(amount), 0) as amount FROM water_entries WHERE user_id = ? AND date = ?',
            (user_id, date)
        ).fetchone()

        if result:
            return result['amount']
        return 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã: {e}")
        return 0
    finally:
        conn.close()


def get_water_goal(user_id):
    #–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã
    conn = get_db_connection()
    try:
        result = conn.execute(
            'SELECT water_goal FROM users WHERE id = ?',
            (user_id,)
        ).fetchone()

        if result:
            return result['water_goal']
        return DEFAULT_WATER_GOAL
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏ –ø–æ –≤–æ–¥–µ: {e}")
        return DEFAULT_WATER_GOAL
    finally:
        conn.close()


def set_water_goal(user_id, goal):
    #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–ª—å –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤–æ–¥—ã
    conn = get_db_connection()
    try:
        conn.execute(
            'UPDATE users SET water_goal = ? WHERE id = ?',
            (goal, user_id)
        )
        conn.commit()
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ ({goal} –º–ª) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏ –ø–æ –≤–æ–¥–µ: {e}")
        return False
    finally:
        conn.close()


def get_weekly_water(user_id, end_date=None):
    #–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é
    if end_date is None:
        end_date = datetime.now().strftime("%Y-%m-%d")

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥)
    end_date_obj = datetime.strptime(end_date, "%Y-%m-%d")
    start_date_obj = end_date_obj - timedelta(days=6)

    result = []
    current_date = start_date_obj

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
    while current_date <= end_date_obj:
        date_str = current_date.strftime("%Y-%m-%d")
        amount = get_daily_water(user_id, date_str)

        result.append({
            "date": date_str,
            "amount": amount
        })

        current_date += timedelta(days=1)

    return result


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
#–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç

def save_recipe(user_id, name, ingredients, instructions, calories, protein, fat, carbs, photo_path=None):
    conn = get_db_connection()
    try:
        conn.execute(
            '''INSERT INTO recipes 
            (user_id, name, ingredients, instructions, calories, protein, fat, carbs, photo_path) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
            (user_id, name, ingredients, instructions, calories, protein, fat, carbs, photo_path)
        )
        conn.commit()
        #return True
        recipe_id = conn.execute('SELECT last_insert_rowid()').fetchone()[0]

        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç {name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return recipe_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        return None
    finally:
        conn.close()


def get_saved_recipes(user_id, is_favorite=None):
    #–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
    conn = get_db_connection()
    try:
        query = 'SELECT * FROM recipes WHERE user_id = ?'
        params = [user_id]

        if is_favorite is not None:
            query += ' AND is_favorite = ?'
            params.append(int(is_favorite))

        query += ' ORDER BY is_favorite DESC, creation_date DESC'

        recipes = conn.execute(query, params).fetchall()
        return [dict(recipe) for recipe in recipes]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        return []
    finally:
        conn.close()


def get_recipe_details(recipe_id):
    #–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ
    conn = get_db_connection()
    try:
        recipe = conn.execute('SELECT * FROM recipes WHERE id = ?', (recipe_id,)).fetchone()

        if recipe:
            return dict(recipe)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ü–µ–ø—Ç–µ: {e}")
        return None
    finally:
        conn.close()


def toggle_favorite_recipe(recipe_id):
    #–ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞
    conn = get_db_connection()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current = conn.execute(
            'SELECT is_favorite FROM recipes WHERE id = ?',
            (recipe_id,)
        ).fetchone()

        if current:
            new_status = 1 - current['is_favorite']  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å

            conn.execute(
                'UPDATE recipes SET is_favorite = ? WHERE id = ?',
                (new_status, recipe_id)
            )
            conn.commit()
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ {recipe_id} –Ω–∞ {new_status}")

            return bool(new_status)
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        return False
    finally:
        conn.close()


def delete_recipe(recipe_id):
    #–£–¥–∞–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç
    conn = get_db_connection()
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        conn.execute('DELETE FROM meal_plan WHERE recipe_id = ?', (recipe_id,))

        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º —Ä–µ—Ü–µ–ø—Ç
        conn.execute('DELETE FROM recipes WHERE id = ?', (recipe_id,))

        conn.commit()
        logger.info(f"–£–¥–∞–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç {recipe_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        return False
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è
#–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
def add_to_meal_plan(user_id, recipe_id, meal_type, date):
    conn = get_db_connection()
    try:
        conn.execute(
            'INSERT INTO meal_plan (user_id, recipe_id, meal_type, date) VALUES (?, ?, ?, ?)',
            (user_id, recipe_id, meal_type, date)
        )
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç {recipe_id} –≤ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return conn.execute('SELECT last_insert_rowid()').fetchone()[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è: {e}")
        return None
    finally:
        conn.close()

#–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
def get_daily_meal_plan(user_id, date):
    conn = get_db_connection()
    try:
        result = conn.execute(
            '''SELECT mp.id, mp.meal_type, r.name, r.calories, r.protein, r.fat, r.carbs 
            FROM meal_plan mp 
            JOIN recipes r ON mp.recipe_id = r.id 
            WHERE mp.user_id = ? AND mp.date = ? 
            ORDER BY 
                CASE mp.meal_type 
                    WHEN '–ó–∞–≤—Ç—Ä–∞–∫' THEN 1 
                    WHEN '–û–±–µ–¥' THEN 2 
                    WHEN '–£–∂–∏–Ω' THEN 3 
                    WHEN '–ü–µ—Ä–µ–∫—É—Å' THEN 4 
                    ELSE 5 
                END''',
            (user_id, date)
        ).fetchall()

        return [dict(entry) for entry in result]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        return []
    finally:
        conn.close()


def get_meal_plan_for_type(user_id, meal_type, date):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏."""
    conn = get_db_connection()
    try:
        result = conn.execute(
            '''SELECT mp.id, mp.meal_type, r.id as recipe_id, r.name, r.calories, r.protein, r.fat, r.carbs 
            FROM meal_plan mp 
            JOIN recipes r ON mp.recipe_id = r.id 
            WHERE mp.user_id = ? AND mp.date = ? AND mp.meal_type = ?''',
            (user_id, date, meal_type)
        ).fetchall()

        return [dict(entry) for entry in result]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: {e}")
        return []
    finally:
        conn.close()


def remove_from_meal_plan(plan_id):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    conn = get_db_connection()
    try:
        conn.execute('DELETE FROM meal_plan WHERE id = ?', (plan_id,))
        conn.commit()
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å {plan_id} –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        return False
    finally:
        conn.close()


def clear_meal_plan(user_id, date):
    """–û—á–∏—â–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å."""
    conn = get_db_connection()
    try:
        conn.execute(
            'DELETE FROM meal_plan WHERE user_id = ? AND date = ?',
            (user_id, date)
        )
        conn.commit()
        logger.info(f"–û—á–∏—â–µ–Ω –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {date}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        return False
    finally:
        conn.close()

def check_db_structure():
    conn = get_db_connection()
    try:
        cursor = conn.execute("PRAGMA table_info(users)")
        columns = [row[1] for row in cursor.fetchall()]
        logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users: {columns}")
    finally:
        conn.close()


def search_recipes(user_id, search_query):
    """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º"""
    conn = get_db_connection()
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_query = f"%{search_query.strip().lower()}%"

        query = """
        SELECT * FROM recipes 
        WHERE user_id = ? 
        AND (LOWER(name) LIKE ? OR LOWER(ingredients) LIKE ?)
        ORDER BY 
            CASE 
                WHEN LOWER(name) LIKE ? THEN 1  
                ELSE 2 
            END,
            is_favorite DESC,
            creation_date DESC
        LIMIT 20
        """

        recipes = conn.execute(query, (user_id, search_query, search_query, search_query)).fetchall()
        logger.info(f"Found {len(recipes)} recipes for query: {search_query}")
        return [dict(recipe) for recipe in recipes]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}", exc_info=True)
        return []
    finally:
        conn.close()



def close_db():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    pass  # –ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, —Ç.–∫. –º—ã —Å–æ–∑–¥–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏