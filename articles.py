"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–æ–º "–°—Ç–∞—Ç—å–∏".
–†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–∞–º, –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.
"""

import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database import get_user, get_article_topics, get_articles_by_topic, get_article_by_id

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ArticlesStates(StatesGroup):
    viewing_topics = State()
    viewing_articles_list = State()
    reading_article = State()


async def show_articles_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–µ–π —Å —Ç–µ–º–∞–º–∏."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    if not user or not user.get('registration_complete'):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ üöÄ –ü–æ–µ—Ö–∞–ª–∏!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    topics = get_article_topics()

    if not topics:
        await message.answer(
            "üìö <b>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–∞—Ç—å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        return

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    info_text = (
        "üìö <b>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏</b>\n\n"
        "üí° –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏, "
        "–∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.\n\n"
        "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
    keyboard = []
    for topic in topics:
        keyboard.append([
            InlineKeyboardButton(
                text=f"{topic['emoji']} {topic['name']}",
                callback_data=f"articles:topic:{topic['id']}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="articles:back_to_main")
    ])

    await message.answer(
        info_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.set_state(ArticlesStates.viewing_topics)


async def show_articles_by_topic(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ."""
    topic_id = int(callback_query.data.split(':')[2])

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ
    articles = get_articles_by_topic(topic_id)
    topics = get_article_topics()

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
    topic_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞"
    topic_emoji = "üìñ"
    for topic in topics:
        if topic['id'] == topic_id:
            topic_name = topic['name']
            topic_emoji = topic['emoji']
            break

    if not articles:
        await callback_query.message.edit_text(
            f"{topic_emoji} <b>{topic_name}</b>\n\n"
            "üìÑ –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="articles:back_to_topics")]
            ])
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
    articles_text = f"{topic_emoji} <b>{topic_name}</b>\n\n"
    articles_text += "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞—Ç—å—è–º–∏
    keyboard = []
    for i, article in enumerate(articles, 1):
        articles_text += f"{i}. {article['title']}\n"
        keyboard.append([
            InlineKeyboardButton(
                text=f"üìñ {article['title']}",
                callback_data=f"articles:read:{article['id']}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="articles:back_to_topics")
    ])
    keyboard.append([
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="articles:back_to_main")
    ])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(current_topic_id=topic_id, topic_name=topic_name, topic_emoji=topic_emoji)
    await state.set_state(ArticlesStates.viewing_articles_list)

    await callback_query.message.edit_text(
        articles_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def show_article(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏."""
    article_id = int(callback_query.data.split(':')[2])

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é
    article = get_article_by_id(article_id)

    if not article:
        await callback_query.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
    article_text = f"üìñ <b>{article['title']}</b>\n\n"
    article_text += f"{article['content']}\n\n"

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    if article.get('sources'):
        article_text += f"üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n{article['sources']}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏ –¥–∞—Ç–µ
    if article.get('author'):
        article_text += f"‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> {article['author']}\n"

    if article.get('publication_date'):
        article_text += f"üìÖ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {article['publication_date']}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π", callback_data="articles:back_to_list")],
        [InlineKeyboardButton(text="üìö –ö —Ç–µ–º–∞–º", callback_data="articles:back_to_topics")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="articles:back_to_main")]
    ]

    await state.set_state(ArticlesStates.reading_article)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram - 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(article_text) > 4000:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —á–∞—Å—Ç–∏
        parts = []
        current_part = ""

        for paragraph in article_text.split('\n\n'):
            if len(current_part + paragraph + '\n\n') > 4000:
                if current_part:
                    parts.append(current_part.strip())
                current_part = paragraph + '\n\n'
            else:
                current_part += paragraph + '\n\n'

        if current_part:
            parts.append(current_part.strip())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback_query.message.edit_text(
            parts[0],
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for part in parts[1:]:
            await callback_query.message.answer(
                part,
                parse_mode="HTML"
            )
    else:
        await callback_query.message.edit_text(
            article_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )


async def handle_articles_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–µ–π."""
    data = callback_query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω articles callback: {data}")

    try:
        if data.startswith("articles:topic:"):
            await show_articles_by_topic(callback_query, state)

        elif data.startswith("articles:read:"):
            await show_article(callback_query, state)

        elif data == "articles:back_to_topics":
            await show_topics_menu(callback_query, state)

        elif data == "articles:back_to_list":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
            data = await state.get_data()
            topic_id = data.get('current_topic_id')
            if topic_id:
                callback_query.data = f"articles:topic:{topic_id}"
                await show_articles_by_topic(callback_query, state)
            else:
                await show_topics_menu(callback_query, state)

        elif data == "articles:back_to_main":
            await return_to_main_menu(callback_query, state)

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ articles: {data}")
            await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_articles_callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    await callback_query.answer()


async def show_topics_menu(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞)."""
    topics = get_article_topics()

    info_text = (
        "üìö <b>–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏</b>\n\n"
        "üí° –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏, "
        "–∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.\n\n"
        "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
    keyboard = []
    for topic in topics:
        keyboard.append([
            InlineKeyboardButton(
                text=f"{topic['emoji']} {topic['name']}",
                callback_data=f"articles:topic:{topic['id']}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="articles:back_to_main")
    ])

    await callback_query.message.edit_text(
        info_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.set_state(ArticlesStates.viewing_topics)


async def return_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()

    from keyboards import after_calories_keyboard

    await callback_query.message.answer(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=after_calories_keyboard
    )