"""
weight_reports.py

–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–æ–º "–û—Ç—á–µ—Ç".
–†–µ–∞–ª–∏–∑—É–µ—Ç –≤–≤–æ–¥ –≤–µ—Å–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤.
"""

import logging
import io
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.dates import DateFormatter
import matplotlib

matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Agg –±—ç–∫–µ–Ω–¥–∞ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç GUI)

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile

from database import (
    get_user, add_weight_record, get_weight_history,
    get_latest_weight_record, update_user_weight
)
from utils import format_date

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class WeightReportStates(StatesGroup):
    entering_weight = State()
    viewing_reports = State()


async def show_weight_reports_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ –≤–µ—Å–∞."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    if not user or not user.get('registration_complete'):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ üöÄ –ü–æ–µ—Ö–∞–ª–∏!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤–µ—Å–∞
    latest_record = get_latest_weight_record(user_id)
    current_weight = user.get('weight', 0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    info_text = (
        "üìà <b>–û—Ç—á–µ—Ç –ø–æ –≤–µ—Å—É</b>\n\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤–≤–æ–¥—è –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ. "
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–∏–¥–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è.\n\n"
    )

    if latest_record:
        days_since = (datetime.now() - datetime.strptime(latest_record['date'], '%Y-%m-%d')).days
        info_text += f"‚öñÔ∏è <b>–¢–µ–∫—É—â–∏–π –≤–µ—Å:</b> {current_weight} –∫–≥\n"
        info_text += f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥:</b> {format_date(latest_record['date'])}"
        if days_since > 0:
            info_text += f" ({days_since} –¥–Ω. –Ω–∞–∑–∞–¥)"
        info_text += f"\nüìä <b>–ó–∞–ø–∏—Å–∞–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π:</b> {len(get_weight_history(user_id, 365))}\n\n"

        if days_since >= 1:
            info_text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–≤–µ—à–∏–≤–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è."
    else:
        info_text += f"‚öñÔ∏è <b>–ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å:</b> {current_weight} –∫–≥\n"
        info_text += "üìù <b>–ó–∞–ø–∏—Å–µ–π –≤–µ—Å–∞:</b> –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
        info_text += "üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –≤–µ—Å–∞ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton(text="‚öñÔ∏è –í–≤–µ—Å—Ç–∏ –≤–µ—Å", callback_data="weight:enter")],
        [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="weight:show_chart")],
        [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π", callback_data="weight:show_history")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="weight:back_to_main")]
    ]

    await message.answer(
        info_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def request_weight_input(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    latest_record = get_latest_weight_record(user_id)

    input_text = (
        "‚öñÔ∏è <b>–í–≤–æ–¥ –≤–µ—Å–∞</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>70.5</code> –∏–ª–∏ <code>68</code>\n\n"
    )

    if latest_record:
        input_text += f"üìä <b>–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–µ—Å:</b> {latest_record['weight']} –∫–≥ "
        input_text += f"({format_date(latest_record['date'])})\n\n"

    input_text += "üí° <b>–°–æ–≤–µ—Ç:</b> –í–∑–≤–µ—à–∏–≤–∞–π—Ç–µ—Å—å —É—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."

    keyboard = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="weight:cancel")]
    ]

    await callback_query.message.edit_text(
        input_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.set_state(WeightReportStates.entering_weight)


async def process_weight_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = message.from_user.id

    try:
        # –ü–∞—Ä—Å–∏–º –≤–µ—Å
        weight_text = message.text.replace(',', '.')
        weight = float(weight_text)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if weight < 20 or weight > 300:
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –æ—Ç 20 –¥–æ 300 –∫–≥.",
                parse_mode="HTML"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime("%Y-%m-%d")
        existing_records = get_weight_history(user_id, days=1)

        if existing_records and existing_records[0]['date'] == today:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            update_weight_record(user_id, today, weight)
            action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            add_weight_record(user_id, weight)
            action_text = "–∑–∞–ø–∏—Å–∞–Ω"

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_weight(user_id, weight)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        previous_records = get_weight_history(user_id, days=7)
        change_text = ""

        if len(previous_records) > 1:
            previous_weight = previous_records[1]['weight']
            change = weight - previous_weight

            if abs(change) > 0.1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 100–≥
                change_sign = "+" if change > 0 else ""
                change_text = f"\nüìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {change_sign}{change:.1f} –∫–≥ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è"

        success_text = (
            f"‚úÖ <b>–í–µ—Å —É—Å–ø–µ—à–Ω–æ {action_text}!</b>\n\n"
            f"‚öñÔ∏è <b>–í–∞—à –≤–µ—Å:</b> {weight} –∫–≥\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {format_date(today)}"
            f"{change_text}\n\n"
            "üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"
        )

        keyboard = [
            [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="weight:show_chart")],
            [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="weight:show_history")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="weight:back_to_main")]
        ]

        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

        await state.clear()

    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>70.5</code> –∏–ª–∏ <code>68</code>",
            parse_mode="HTML"
        )


async def show_weight_chart(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞."""
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
    weight_history = get_weight_history(user_id, days=90)

    if len(weight_history) < 2:
        await callback_query.message.edit_text(
            "üìä <b>–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞</b>\n\n"
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–∑–º–µ—Ä–µ–Ω–∏—è.\n\n"
            "üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –≤–µ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öñÔ∏è –í–≤–µ—Å—Ç–∏ –≤–µ—Å", callback_data="weight:enter")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="weight:back_to_menu")]
            ])
        )
        return

    await callback_query.message.edit_text(
        "üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        reply_markup=None
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.style.use('default')
        fig, ax = plt.subplots(figsize=(12, 8))

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        dates = [datetime.strptime(record['date'], '%Y-%m-%d') for record in weight_history]
        weights = [record['weight'] for record in weight_history]

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        ax.plot(dates, weights, marker='o', linewidth=2, markersize=6, color='#2E86AB')
        ax.fill_between(dates, weights, alpha=0.3, color='#2E86AB')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
        ax.set_ylabel('–í–µ—Å (–∫–≥)', fontsize=12)
        ax.set_title('üìä –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞', fontsize=16, fontweight='bold', pad=20)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
        if len(dates) > 30:
            ax.xaxis.set_major_locator(mdates.WeekdayLocator(interval=2))
            ax.xaxis.set_major_formatter(DateFormatter('%d.%m'))
        else:
            ax.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, len(dates) // 10)))
            ax.xaxis.set_major_formatter(DateFormatter('%d.%m'))

        plt.xticks(rotation=45)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
        ax.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        if len(weights) > 1:
            ax.annotate(f'{weights[0]:.1f} –∫–≥',
                        (dates[0], weights[0]),
                        xytext=(10, 10), textcoords='offset points',
                        bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7))

            ax.annotate(f'{weights[-1]:.1f} –∫–≥',
                        (dates[-1], weights[-1]),
                        xytext=(10, 10), textcoords='offset points',
                        bbox=dict(boxstyle='round,pad=0.3', facecolor='lightgreen', alpha=0.7))

        # –ü–æ–¥–≥–æ–Ω—è–µ–º –º–∞–∫–µ—Ç
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
        buffer.seek(0)
        plt.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        photo = BufferedInputFile(buffer.read(), filename="weight_chart.png")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_change = weights[-1] - weights[0]
        total_days = (dates[-1] - dates[0]).days
        avg_change_per_week = (total_change / max(total_days, 1)) * 7 if total_days > 0 else 0

        change_sign = "+" if total_change > 0 else ""
        trend_emoji = "üìà" if total_change > 0 else "üìâ" if total_change < 0 else "‚û°Ô∏è"

        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {total_days} –¥–Ω–µ–π:</b>\n\n"
            f"üéØ <b>–ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å:</b> {weights[0]:.1f} –∫–≥\n"
            f"‚öñÔ∏è <b>–¢–µ–∫—É—â–∏–π –≤–µ—Å:</b> {weights[-1]:.1f} –∫–≥\n"
            f"{trend_emoji} <b>–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {change_sign}{total_change:.1f} –∫–≥\n"
            f"üìà <b>–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø:</b> {change_sign}{avg_change_per_week:.1f} –∫–≥/–Ω–µ–¥–µ–ª—é\n"
            f"üìã <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π:</b> {len(weights)}"
        )

        keyboard = [
            [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π", callback_data="weight:show_history")],
            [InlineKeyboardButton(text="‚öñÔ∏è –í–≤–µ—Å—Ç–∏ –≤–µ—Å", callback_data="weight:enter")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="weight:back_to_menu")]
        ]

        await callback_query.message.answer_photo(
            photo=photo,
            caption=stats_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="weight:back_to_menu")]
            ])
        )


async def show_weight_history(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤–µ—Å–∞."""
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    weight_history = get_weight_history(user_id, days=30)

    if not weight_history:
        await callback_query.message.edit_text(
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π</b>\n\n"
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤–µ—Å–µ.\n\n"
            "üí° –ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –≤–µ—Å–∞ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öñÔ∏è –í–≤–µ—Å—Ç–∏ –≤–µ—Å", callback_data="weight:enter")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="weight:back_to_menu")]
            ])
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π</b>\n\n"

    for i, record in enumerate(weight_history[:15]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π
        date_formatted = format_date(record['date'])
        weight = record['weight']

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –¥–Ω–µ–º
        change_text = ""
        if i < len(weight_history) - 1:
            prev_weight = weight_history[i + 1]['weight']
            change = weight - prev_weight
            if abs(change) > 0.1:
                change_sign = "+" if change > 0 else ""
                change_emoji = "üìà" if change > 0 else "üìâ"
                change_text = f" ({change_sign}{change:.1f} –∫–≥ {change_emoji})"

        history_text += f"üìÖ {date_formatted}: <b>{weight} –∫–≥</b>{change_text}\n"

    if len(weight_history) > 15:
        history_text += f"\n... –∏ –µ—â–µ {len(weight_history) - 15} –∑–∞–ø–∏—Å–µ–π"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if len(weight_history) > 1:
        total_change = weight_history[0]['weight'] - weight_history[-1]['weight']
        change_sign = "+" if total_change > 0 else ""
        trend_emoji = "üìà" if total_change > 0 else "üìâ" if total_change < 0 else "‚û°Ô∏è"

        history_text += f"\n\n{trend_emoji} <b>–ó–∞ –ø–µ—Ä–∏–æ–¥:</b> {change_sign}{total_change:.1f} –∫–≥"

    keyboard = [
        [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="weight:show_chart")],
        [InlineKeyboardButton(text="‚öñÔ∏è –í–≤–µ—Å—Ç–∏ –≤–µ—Å", callback_data="weight:enter")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="weight:back_to_menu")]
    ]

    await callback_query.message.edit_text(
        history_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def handle_weight_reports_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤–µ—Å–∞."""
    data = callback_query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω weight callback: {data}")

    try:
        if data == "weight:enter":
            await request_weight_input(callback_query, state)

        elif data == "weight:show_chart":
            await show_weight_chart(callback_query, state)

        elif data == "weight:show_history":
            await show_weight_history(callback_query, state)

        elif data == "weight:back_to_menu":
            await show_weight_menu_callback(callback_query, state)

        elif data == "weight:back_to_main":
            await return_to_main_menu(callback_query, state)

        elif data == "weight:cancel":
            await state.clear()
            await show_weight_menu_callback(callback_query, state)

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ weight: {data}")
            await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_weight_reports_callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    await callback_query.answer()


async def show_weight_menu_callback(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ callback (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞)."""
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤–µ—Å–∞
    latest_record = get_latest_weight_record(user_id)
    current_weight = user.get('weight', 0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    info_text = (
        "üìà <b>–û—Ç—á–µ—Ç –ø–æ –≤–µ—Å—É</b>\n\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤–≤–æ–¥—è –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ. "
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–∏–¥–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è.\n\n"
    )

    if latest_record:
        days_since = (datetime.now() - datetime.strptime(latest_record['date'], '%Y-%m-%d')).days
        info_text += f"‚öñÔ∏è <b>–¢–µ–∫—É—â–∏–π –≤–µ—Å:</b> {current_weight} –∫–≥\n"
        info_text += f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥:</b> {format_date(latest_record['date'])}"
        if days_since > 0:
            info_text += f" ({days_since} –¥–Ω. –Ω–∞–∑–∞–¥)"
        info_text += f"\nüìä <b>–ó–∞–ø–∏—Å–∞–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π:</b> {len(get_weight_history(user_id, 365))}\n\n"

        if days_since >= 1:
            info_text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–≤–µ—à–∏–≤–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è."
    else:
        info_text += f"‚öñÔ∏è <b>–ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å:</b> {current_weight} –∫–≥\n"
        info_text += "üìù <b>–ó–∞–ø–∏—Å–µ–π –≤–µ—Å–∞:</b> –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
        info_text += "üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –≤–µ—Å–∞ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton(text="‚öñÔ∏è –í–≤–µ—Å—Ç–∏ –≤–µ—Å", callback_data="weight:enter")],
        [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="weight:show_chart")],
        [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π", callback_data="weight:show_history")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="weight:back_to_main")]
    ]

    await callback_query.message.edit_text(
        info_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def return_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()

    from keyboards import after_calories_keyboard

    await callback_query.message.answer(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=after_calories_keyboard
    )