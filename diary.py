import logging
from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery

from database import (
    get_user, get_daily_entries, add_food_entry,
    get_daily_totals, clear_daily_entries, get_entries_by_meal,
    get_recent_foods
)

from keyboards import create_date_selection_keyboard, create_meal_types_keyboard, create_food_entry_keyboard, \
    create_recent_foods_keyboard
from food_api import search_food, get_food_nutrients, get_branded_food_info
from utils import format_date, get_progress_percentage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞
class DiaryStates(StatesGroup):
    selecting_date = State()
    selecting_meal_type = State()
    entering_food = State()
    selecting_food = State()
    entering_amount = State()
    confirming_entry = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –≤–æ–¥—ã
class WaterStates(StatesGroup):
    entering_amount = State()
    setting_goal = State()


async def show_diary(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(message.from_user.id)
    if not user or not user.get('registration_complete'):  # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ üöÄ –ü–æ–≥–Ω–∞–ª–∏!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().strftime("%Y-%m-%d")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_date=current_date)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    await show_diary_for_date(message, current_date, user, state)


async def show_diary_for_date(message, date, user, state):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    user_id = user['id'] if isinstance(user, dict) else user

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
    entries = get_daily_entries(user_id, date)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å
    totals = get_daily_totals(user_id, date)

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user(user_id)
    goal_calories = user_data.get('goal_calories', 0)
    goal_protein = user_data.get('protein', 0)
    goal_fat = user_data.get('fat', 0)
    goal_carbs = user_data.get('carbs', 0)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    formatted_date = format_date(date)

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üìù <b>–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ {formatted_date}</b>\n\n"

    if entries:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
        meal_entries = {}
        for entry in entries:
            meal_type = entry['meal_type']
            if meal_type not in meal_entries:
                meal_entries[meal_type] = []
            meal_entries[meal_type].append(entry)

        # –í—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏–µ–º—É –ø–∏—â–∏
        for meal_type, meal_list in meal_entries.items():
            message_text += f"<b>{meal_type}:</b>\n"

            meal_calories = 0
            for entry in meal_list:
                message_text += f"  ‚Ä¢ {entry['food_name']} ‚Äì {entry['calories']:.0f} –∫–∫–∞–ª\n"
                meal_calories += entry['calories']

            message_text += f"  –í—Å–µ–≥–æ: {meal_calories:.0f} –∫–∫–∞–ª\n\n"

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å
        message_text += "<b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b>\n"
        message_text += f"–ö–∞–ª–æ—Ä–∏–∏: {totals['total_calories']:.0f} / {goal_calories:.0f} –∫–∫–∞–ª "

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏
        calories_percent = get_progress_percentage(totals['total_calories'], goal_calories)
        message_text += f"({calories_percent}%)\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ë–ñ–£
        message_text += f"–ë–µ–ª–∫–∏: {totals['total_protein']:.1f} / {goal_protein:.1f} –≥ "
        protein_percent = get_progress_percentage(totals['total_protein'], goal_protein)
        message_text += f"({protein_percent}%)\n"

        message_text += f"–ñ–∏—Ä—ã: {totals['total_fat']:.1f} / {goal_fat:.1f} –≥ "
        fat_percent = get_progress_percentage(totals['total_fat'], goal_fat)
        message_text += f"({fat_percent}%)\n"

        message_text += f"–£–≥–ª–µ–≤–æ–¥—ã: {totals['total_carbs']:.1f} / {goal_carbs:.1f} –≥ "
        carbs_percent = get_progress_percentage(totals['total_carbs'], goal_carbs)
        message_text += f"({carbs_percent}%)\n"
    else:
        message_text += "–í –¥–Ω–µ–≤–Ω–∏–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫."

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
    keyboard = create_date_selection_keyboard(date)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")


async def handle_diary_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    action = callback_query.data

    if action.startswith("date:"):
        await handle_date_selection(callback_query, state)
    elif action == "add_food":
        await start_food_entry(callback_query, state)
    elif action == "clear_diary":
        await clear_diary(callback_query, state)
    elif action.startswith("meal_type:"):
        await handle_meal_type_selection(callback_query, state)
    elif action == "return_to_diary":
        await return_to_diary(callback_query, state)

    await callback_query.answer()


async def handle_date_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ."""
    date_action = callback_query.data.split(':')[1]
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    user_data = await state.get_data()
    current_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
    current_date_obj = datetime.strptime(current_date, "%Y-%m-%d")

    if date_action == "prev":
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
        new_date = (current_date_obj - timedelta(days=1)).strftime("%Y-%m-%d")
    elif date_action == "next":
        # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        new_date = (current_date_obj + timedelta(days=1)).strftime("%Y-%m-%d")
    elif date_action == "today":
        # –°–µ–≥–æ–¥–Ω—è
        new_date = datetime.now().strftime("%Y-%m-%d")
    else:
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
        new_date = date_action

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_date=new_date)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã
    await show_diary_for_date(callback_query.message, new_date, user, state)


async def start_food_entry(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    keyboard = create_meal_types_keyboard()

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    await state.set_state(DiaryStates.selecting_meal_type)


async def handle_meal_type_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏."""
    meal_type = callback_query.data.split(':')[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    await state.update_data(meal_type=meal_type)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    user_id = callback_query.from_user.id
    recent_foods = get_recent_foods(user_id)

    if recent_foods:
        keyboard = create_recent_foods_keyboard(recent_foods)

        await callback_query.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è {meal_type}:",
            reply_markup=keyboard
        )
    else:
        keyboard = create_food_entry_keyboard()

        await callback_query.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è {meal_type}:",
            reply_markup=keyboard
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    await state.set_state(DiaryStates.entering_food)


async def process_food_entry(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."""
    food_name = message.text.strip()

    if not food_name or len(food_name) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    logger.info(f"Searching for food: {food_name}")

    # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ API
    search_results = search_food(food_name)
    logger.info(f"Search results: {search_results}")

    if search_results:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(search_results=search_results)

        # –í–ù–ò–ú–ê–ù–ò–ï!!! –í–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])

        for i, food in enumerate(search_results):
            display_name = food.get('food_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')
            if food.get('brand_name'):
                display_name += f" ({food['brand_name']})"

            if len(display_name) > 30:
                display_name = display_name[:27] + "..."

            button = types.InlineKeyboardButton(
                text=display_name,
                callback_data=f"select_food:{i}"
            )
            keyboard.inline_keyboard.append([button])

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="return_to_meal_selection"
            )
        ])

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=keyboard
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        await state.set_state(DiaryStates.selecting_food)
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        )



async def handle_food_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞."""
    data = callback_query.data

    if not data.startswith("select_food:"):
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    index_str = data.split(":")[1]

    try:
        index = int(index_str)
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    search_results = user_data.get('search_results', [])

    if index >= len(search_results):
        await callback_query.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    selected_food = search_results[index]

    food_type = selected_food.get('food_type', 'common')

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    if food_type == 'common':
        food_info = get_food_nutrients(selected_food['food_name'])
    else:
        food_info = get_branded_food_info(selected_food.get('nix_item_id'))

    if not food_info:
        await callback_query.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç."
        )
        await callback_query.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    await state.update_data(selected_food=food_info)

    await callback_query.message.answer(
        f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: <b>{food_info['food_name']}</b>\n\n"
        f"–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ {food_info['serving_qty']} {food_info['serving_unit']}):\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {food_info['calories']:.0f} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {food_info['protein']:.1f} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {food_info['fat']:.1f} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {food_info['carbs']:.1f} –≥\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö:",
        parse_mode="HTML"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é ‚Äî –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    await state.set_state(DiaryStates.entering_amount)

    await callback_query.answer()



async def process_food_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        amount = float(message.text.strip().replace(',', '.'))
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    selected_food = user_data.get('selected_food')
    meal_type = user_data.get('meal_type')
    selected_date = user_data.get('selected_date')

    if not selected_food or not meal_type or not selected_date:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞ (–≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ / —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    serving_weight = selected_food.get('serving_weight_grams', 100)
    ratio = amount / serving_weight

    calories = selected_food['calories'] * ratio
    protein = selected_food['protein'] * ratio
    fat = selected_food['fat'] * ratio
    carbs = selected_food['carbs'] * ratio

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    await state.update_data(
        amount=amount,
        calories=calories,
        protein=protein,
        fat=fat,
        carbs=carbs
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:</b>\n\n"
        f"–ü—Ä–æ–¥—É–∫—Ç: {selected_food['food_name']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} –≥\n"
        f"–ü—Ä–∏–µ–º –ø–∏—â–∏: {meal_type}\n"
        f"–î–∞—Ç–∞: {format_date(selected_date)}\n\n"
        f"–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {protein:.1f} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {fat:.1f} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f} –≥\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_food"),
                types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_food")
            ]
        ])
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(DiaryStates.confirming_entry)


async def confirm_food_entry(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_id = callback_query.from_user.id
    selected_food = user_data.get('selected_food')
    meal_type = user_data.get('meal_type')
    selected_date = user_data.get('selected_date')
    calories = user_data.get('calories')
    protein = user_data.get('protein')
    fat = user_data.get('fat')
    carbs = user_data.get('carbs')

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    entry_id = add_food_entry(
        user_id,
        selected_date,
        meal_type,
        selected_food['food_name'],
        calories,
        protein,
        fat,
        carbs
    )

    if entry_id:
        await callback_query.message.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫
        user = get_user(user_id)
        await show_diary_for_date(callback_query.message, selected_date, user, state)
    else:
        await callback_query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback_query.answer()


async def cancel_food_entry(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    await callback_query.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    await start_food_entry(callback_query, state)
    await callback_query.answer()


async def clear_diary(callback_query: CallbackQuery, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date')

    await callback_query.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ {format_date(selected_date)}?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_clear"),
                types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_clear")
            ]
        ])
    )


async def confirm_clear_diary(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    user_id = callback_query.from_user.id
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date')

    # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏
    success = clear_daily_entries(user_id, selected_date)

    if success:
        await callback_query.message.answer(f"‚úÖ –î–Ω–µ–≤–Ω–∏–∫ –∑–∞ {format_date(selected_date)} –æ—á–∏—â–µ–Ω.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫
        user = get_user(user_id)
        await show_diary_for_date(callback_query.message, selected_date, user, state)
    else:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–Ω–µ–≤–Ω–∏–∫–∞.")

    await callback_query.answer()


async def cancel_clear_diary(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    await callback_query.message.answer("–û—á–∏—Å—Ç–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫
    user_id = callback_query.from_user.id
    user = get_user(user_id)
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date')

    await show_diary_for_date(callback_query.message, selected_date, user, state)
    await callback_query.answer()


async def return_to_diary(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().strftime("%Y-%m-%d")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_date=current_date)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫
    await show_diary_for_date(callback_query.message, current_date, user, state)

    await callback_query.answer()


async def handle_recent_food_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    food_id = int(callback_query.data.split(':')[1])
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    recent_foods = get_recent_foods(user_id)

    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    selected_food = None
    for food in recent_foods:
        if food['id'] == food_id:
            selected_food = food
            break

    if not selected_food:
        await callback_query.message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    meal_type = user_data.get('meal_type')
    selected_date = user_data.get('selected_date')

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫
    entry_id = add_food_entry(
        user_id,
        selected_date,
        meal_type,
        selected_food['food_name'],
        selected_food['calories'],
        selected_food['protein'],
        selected_food['fat'],
        selected_food['carbs']
    )

    if entry_id:
        await callback_query.message.answer(
            f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{selected_food['food_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {meal_type.lower()}!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫
        user = get_user(user_id)
        await show_diary_for_date(callback_query.message, selected_date, user, state)
    else:
        await callback_query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback_query.answer()


async def handle_food_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞."""
    data = callback_query.data

    index_str = data.split(":")[1]

    try:
        index = int(index_str)
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    search_results = user_data.get('search_results', [])

    if index >= len(search_results):
        await callback_query.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    selected_food = search_results[index]

    food_type = selected_food.get('food_type', 'common')

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    if food_type == 'common':
        food_info = get_food_nutrients(selected_food['food_name'])
    else:
        food_info = get_branded_food_info(selected_food.get('nix_item_id'))

    if not food_info:
        await callback_query.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç."
        )
        await callback_query.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    await state.update_data(selected_food=food_info)

    await callback_query.message.answer(
        f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: <b>{food_info['food_name']}</b>\n\n"
        f"–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ {food_info['serving_qty']} {food_info['serving_unit']}):\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {food_info['calories']:.0f} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {food_info['protein']:.1f} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {food_info['fat']:.1f} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {food_info['carbs']:.1f} –≥\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö:",
        parse_mode="HTML"
    )

    await state.set_state(DiaryStates.entering_amount)
    await callback_query.answer()

async def return_to_meal_selection(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏."""
    await start_food_entry(callback_query, state)
