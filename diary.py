"""
üìò dairy.py ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º –ø–∏—Ç–∞–Ω–∏—è –≤ Telegram-–±–æ—Ç–µ

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π –∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤.
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø—Ä–∏–µ–º—É –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏ —Ç.–ø.) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞ –ø–æ API (FatSecret).
- –†–∞–±–æ—Ç–∞ —Å –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.
- –û—á–∏—Å—Ç–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º —Å –ø–æ–º–æ—â—å—é inline-–∫–Ω–æ–ø–æ–∫.
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (Finite State Machine) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ú–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
- aiogram –¥–ª—è Telegram-–±–æ—Ç–∞,
- —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã (`utils.py`, `keyboards.py`, `food_api.py`, `database.py`) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –∏ API,
- —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.

–§—É–Ω–∫—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≤—ã–±–æ—Ä –¥–∞—Ç—ã/–ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.
"""


import logging
import json

from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter

from database import (
    get_user, get_daily_entries, add_food_entry,
    get_daily_totals, clear_daily_entries, get_entries_by_meal,
    get_recent_foods
)

from keyboards import create_date_selection_keyboard, create_meal_types_keyboard, create_food_entry_keyboard,  create_recent_foods_keyboard
from food_api import search_food, get_food_nutrients, get_branded_food_info
from utils import format_date, get_progress_percentage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


'''–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞'''
class DiaryStates(StatesGroup):
    selecting_date = State()        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    selecting_meal_type = State()   # –í—ã–±–æ—Ä –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏
    entering_food = State()         # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    selecting_food = State()        # –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    entering_amount = State()       # –í–≤–æ–¥ –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    confirming_entry = State()      # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –≤–æ–¥—ã
class WaterStates(StatesGroup):
    entering_amount = State()
    setting_goal = State()


async def show_diary(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(message.from_user.id)
    if not user or not user.get('registration_complete'):  # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ üöÄ –ü–æ–µ—Ö–∞–ª–∏!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().strftime("%Y-%m-%d")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_date=current_date)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    await show_diary_for_date(message, current_date, user, state)


async def show_diary_for_date(message, date, user, state):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    user_id = user['id'] if isinstance(user, dict) else user

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
    entries = get_daily_entries(user_id, date)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å
    totals = get_daily_totals(user_id, date)

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user(user_id)
    goal_calories = user_data.get('goal_calories', 0)
    goal_protein = user_data.get('protein', 0)
    goal_fat = user_data.get('fat', 0)
    goal_carbs = user_data.get('carbs', 0)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    formatted_date = format_date(date)

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üìù <b>–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ {formatted_date}</b>\n\n"

    if entries:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
        meal_entries = {}
        for entry in entries:
            meal_type = entry['meal_type']
            if meal_type not in meal_entries:
                meal_entries[meal_type] = []
            meal_entries[meal_type].append(entry)

        # –í—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏–µ–º—É –ø–∏—â–∏
        for meal_type, meal_list in meal_entries.items():
            message_text += f"<b>{meal_type}:</b>\n"

            meal_calories = 0
            for entry in meal_list:
                message_text += f"  ‚Ä¢ {entry['food_name']} ‚Äì {entry['calories']:.0f} –∫–∫–∞–ª\n"
                meal_calories += entry['calories']

            message_text += f"  –í—Å–µ–≥–æ: {meal_calories:.0f} –∫–∫–∞–ª\n\n"

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å
        message_text += "<b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b>\n"
        message_text += f"–ö–∞–ª–æ—Ä–∏–∏: {totals['total_calories']:.0f} / {goal_calories:.0f} –∫–∫–∞–ª "

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏
        calories_percent = get_progress_percentage(totals['total_calories'], goal_calories)
        message_text += f"({calories_percent}%)\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ë–ñ–£
        message_text += f"–ë–µ–ª–∫–∏: {totals['total_protein']:.1f} / {goal_protein:.1f} –≥ "
        protein_percent = get_progress_percentage(totals['total_protein'], goal_protein)
        message_text += f"({protein_percent}%)\n"

        message_text += f"–ñ–∏—Ä—ã: {totals['total_fat']:.1f} / {goal_fat:.1f} –≥ "
        fat_percent = get_progress_percentage(totals['total_fat'], goal_fat)
        message_text += f"({fat_percent}%)\n"

        message_text += f"–£–≥–ª–µ–≤–æ–¥—ã: {totals['total_carbs']:.1f} / {goal_carbs:.1f} –≥ "
        carbs_percent = get_progress_percentage(totals['total_carbs'], goal_carbs)
        message_text += f"({carbs_percent}%)\n"
    else:
        message_text += "–í –¥–Ω–µ–≤–Ω–∏–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫."

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
    keyboard = create_date_selection_keyboard(date)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")


async def handle_diary_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    action = callback_query.data

    if action.startswith("date:"):
        await handle_date_selection(callback_query, state)
    elif action == "add_food":
        await start_food_entry(callback_query, state)
    elif action == "clear_diary":
        await clear_diary(callback_query, state)
    elif action.startswith("meal_type:"):
        await handle_meal_type_selection(callback_query, state)
    elif action == "return_to_diary":
        await return_to_diary(callback_query, state)

    await callback_query.answer()


async def handle_date_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ."""
    date_action = callback_query.data.split(':')[1]
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    user_data = await state.get_data()
    current_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
    current_date_obj = datetime.strptime(current_date, "%Y-%m-%d")

    if date_action == "prev":
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
        new_date = (current_date_obj - timedelta(days=1)).strftime("%Y-%m-%d")
    elif date_action == "next":
        # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        new_date = (current_date_obj + timedelta(days=1)).strftime("%Y-%m-%d")
    elif date_action == "today":
        # –°–µ–≥–æ–¥–Ω—è
        new_date = datetime.now().strftime("%Y-%m-%d")
    else:
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
        new_date = date_action

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_date=new_date)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã
    await show_diary_for_date(callback_query.message, new_date, user, state)


async def start_food_entry(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    keyboard = create_meal_types_keyboard()

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    await state.set_state(DiaryStates.selecting_meal_type)


async def handle_meal_type_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏."""
    meal_type = callback_query.data.split(':')[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    await state.update_data(meal_type=meal_type)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    user_id = callback_query.from_user.id
    recent_foods = get_recent_foods(user_id)

    if recent_foods:
        keyboard = create_recent_foods_keyboard(recent_foods)

        await callback_query.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è {meal_type}:",
            reply_markup=keyboard
        )
    else:
        keyboard = create_food_entry_keyboard()

        await callback_query.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è {meal_type}:",
            reply_markup=keyboard
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    await state.set_state(DiaryStates.entering_food)


async def process_food_entry(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    logger.info(f"Initial message: {message.text}")
    logger.info(f"Current state: {await state.get_state()}")

    food_name = message.text.strip()

    if not food_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    logger.info(f"Searching for: {food_name}")

    search_results = search_food(food_name)
    logger.info(f"Search results: {search_results}")

    if not search_results:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    simplified_results = []
    for item in search_results:
        simplified_results.append({
            'food_name': item.get('food_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç'),
            'food_type': item.get('food_type', 'common'),
            'tag_id': item.get('tag_id'),
            'nix_item_id': item.get('nix_item_id'),
            'serving_qty': item.get('serving_qty', 1),
            'serving_unit': item.get('serving_unit', '–≥')
        })

    await state.update_data(search_results=simplified_results)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    buttons = []
    for i, item in enumerate(simplified_results):
        btn_text = item['food_name']
        if len(btn_text) > 30:
            btn_text = btn_text[:27] + "..."
        buttons.append([types.InlineKeyboardButton(
            text=btn_text,
            callback_data=f"select_food:{i}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([types.InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data="return_to_meal_selection"
    )])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º inline_keyboard
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=keyboard)
    await state.set_state(DiaryStates.selecting_food)



async def process_food_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        weight = float(message.text)
        user_data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        selected_food = user_data.get('selected_food')
        if not selected_food:
            await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        logger.info(f"Processing amount for food: {selected_food}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–µ—Å–∞
        if 'serving_weight_grams' in selected_food:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–µ –ø–æ—Ä—Ü–∏–∏
            ratio = weight / selected_food['serving_weight_grams']
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Å–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ 1 –µ–¥–∏–Ω–∏—Ü–∞ = 100–≥
            ratio = weight / 100

        nutrients = {
            'calories': selected_food.get('calories', 0) * ratio,
            'protein': selected_food.get('protein', 0) * ratio,
            'fat': selected_food.get('fat', 0) * ratio,
            'carbs': selected_food.get('carbs', 0) * ratio
        }

        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        meal_type = user_data.get('meal_type')
        selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
        food_name = selected_food.get('food_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        entry_id = add_food_entry(
            user_id=message.from_user.id,
            date=selected_date,
            meal_type=meal_type,
            food_name=food_name,
            calories=nutrients['calories'],
            protein=nutrients['protein'],
            fat=nutrients['fat'],
            carbs=nutrients['carbs']
        )

        if entry_id:
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {weight}–≥ –ø—Ä–æ–¥—É–∫—Ç–∞ '{food_name}'")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫
            user = get_user(message.from_user.id)
            await show_diary_for_date(message, selected_date, user, state)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)")
        return
    except Exception as e:
        logger.error(f"Error in process_food_amount: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    finally:
        await state.clear()


async def confirm_food_entry(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_id = callback_query.from_user.id
    selected_food = user_data.get('selected_food')
    meal_type = user_data.get('meal_type')
    selected_date = user_data.get('selected_date')
    calories = user_data.get('calories')
    protein = user_data.get('protein')
    fat = user_data.get('fat')
    carbs = user_data.get('carbs')

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    entry_id = add_food_entry(
        user_id,
        selected_date,
        meal_type,
        selected_food['food_name'],
        calories,
        protein,
        fat,
        carbs
    )

    if entry_id:
        await callback_query.message.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫
        user = get_user(user_id)
        await show_diary_for_date(callback_query.message, selected_date, user, state)
    else:
        await callback_query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback_query.answer()


async def cancel_food_entry(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    await callback_query.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    await start_food_entry(callback_query, state)
    await callback_query.answer()


async def clear_diary(callback_query: CallbackQuery, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date')

    await callback_query.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ {format_date(selected_date)}?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_clear"),
                types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_clear")
            ]
        ])
    )


async def confirm_clear_diary(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    user_id = callback_query.from_user.id
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date')

    # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏
    success = clear_daily_entries(user_id, selected_date)

    if success:
        await callback_query.message.answer(f"‚úÖ –î–Ω–µ–≤–Ω–∏–∫ –∑–∞ {format_date(selected_date)} –æ—á–∏—â–µ–Ω.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫
        user = get_user(user_id)
        await show_diary_for_date(callback_query.message, selected_date, user, state)
    else:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–Ω–µ–≤–Ω–∏–∫–∞.")

    await callback_query.answer()


async def cancel_clear_diary(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    await callback_query.message.answer("–û—á–∏—Å—Ç–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫
    user_id = callback_query.from_user.id
    user = get_user(user_id)
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date')

    await show_diary_for_date(callback_query.message, selected_date, user, state)
    await callback_query.answer()


async def return_to_diary(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().strftime("%Y-%m-%d")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_date=current_date)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫
    await show_diary_for_date(callback_query.message, current_date, user, state)

    await callback_query.answer()


async def handle_recent_food_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    food_id = int(callback_query.data.split(':')[1])
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    recent_foods = get_recent_foods(user_id)

    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    selected_food = None
    for food in recent_foods:
        if food['id'] == food_id:
            selected_food = food
            break

    if not selected_food:
        await callback_query.message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    meal_type = user_data.get('meal_type')
    selected_date = user_data.get('selected_date')

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫
    entry_id = add_food_entry(
        user_id,
        selected_date,
        meal_type,
        selected_food['food_name'],
        selected_food['calories'],
        selected_food['protein'],
        selected_food['fat'],
        selected_food['carbs']
    )

    if entry_id:
        await callback_query.message.answer(
            f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{selected_food['food_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {meal_type.lower()}!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫
        user = get_user(user_id)
        await show_diary_for_date(callback_query.message, selected_date, user, state)
    else:
        await callback_query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback_query.answer()


async def handle_food_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞."""
    try:
        index = int(callback_query.data.split(':')[1])
        user_data = await state.get_data()
        search_results = user_data.get('search_results', [])

        if index >= len(search_results):
            await callback_query.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        selected_food = search_results[index]
        logger.info(f"Selected food: {selected_food}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        if selected_food.get('food_type') == 'common':
            food_info = get_food_nutrients(selected_food['food_name'])  # –ü–µ—Ä–µ–¥–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        else:
            food_info = get_branded_food_info(selected_food.get('nix_item_id'))

        if not food_info:
            await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")
            await callback_query.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        await state.update_data(selected_food=food_info)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: <b>{food_info['food_name']}</b>\n\n"
            f"–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ {food_info.get('serving_qty', 1)} {food_info.get('serving_unit', '–≥')}):\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {food_info.get('calories', 0):.0f} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {food_info.get('protein', 0):.1f} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {food_info.get('fat', 0):.1f} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {food_info.get('carbs', 0):.1f} –≥\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö:"
        )

        await callback_query.message.answer(message_text, parse_mode="HTML")
        await state.set_state(DiaryStates.entering_amount)
        await callback_query.answer()

    except Exception as e:
        logger.error(f"Error in handle_food_selection: {str(e)}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

'''async def handle_food_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        index = int(callback_query.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        user_data = await state.get_data()
        search_results = user_data.get('search_results', [])

        logger.info(f"Search results in handler: {search_results}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

        if index >= len(search_results):
            await callback_query.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
            return

        selected_food = search_results[index]
        logger.info(f"Selected food details: {selected_food}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        if selected_food.get('food_type') == 'common':
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º food_name –≤–º–µ—Å—Ç–æ tag_id
            food_info = get_food_nutrients(selected_food['food_name'])
        else:
            food_info = get_branded_food_info(selected_food.get('nix_item_id'))

        logger.info(f"Food info from API: {food_info}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API

        if not food_info:
            await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")
            await callback_query.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        await state.update_data(
            selected_food=food_info,
            selected_product_index=index
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: <b>{food_info.get('food_name', selected_food['food_name'])}</b>\n\n"
            f"–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ {food_info.get('serving_qty', 100)} {food_info.get('serving_unit', '–≥')}):\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {food_info.get('calories', 0):.0f} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {food_info.get('protein', 0):.1f} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {food_info.get('fat', 0):.1f} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {food_info.get('carbs', 0):.1f} –≥\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö:"
        )

        await callback_query.message.answer(message_text, parse_mode="HTML")
        await state.set_state(DiaryStates.entering_amount)
        await callback_query.answer()

    except Exception as e:
        logger.error(f"Error in handle_food_selection: {str(e)}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")'''

async def return_to_meal_selection(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏."""
    await start_food_entry(callback_query, state)


async def add_product_handler(callback_query: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –≤–µ—Å–æ–º (100–≥)"""
    index = int(callback_query.data.split(":")[1])
    user_data = await state.get_data()
    product = user_data['search_results'][index]

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É (–ø—Ä–∏–º–µ—Ä –¥–ª—è 100–≥)
    success = add_food_entry(
        user_id=callback_query.from_user.id,
        date=datetime.now().strftime("%Y-%m-%d"),
        meal_type=user_data['meal_type'],
        food_name=product['food_name'],
        calories=product['calories'],
        protein=product['protein'],
        fat=product['fat'],
        carbs=product['carbs']
    )

    if success:
        await callback_query.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")


async def enter_weight_handler(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞"""
    index = int(callback_query.data.split(":")[1])
    await state.update_data(selected_product_index=index)

    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(DiaryStates.entering_amount)
    await callback_query.answer()


async def back_to_list_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    await callback_query.message.delete()
    await process_food_entry(callback_query.message, state)



