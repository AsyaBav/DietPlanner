"""
shopping_cart.py

–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–æ–º "–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞".
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ä–∞—Ü–∏–æ–Ω–∞ –∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.
"""

import logging
import re
from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database import (
    get_user, get_shopping_cart_items, add_shopping_cart_item,
    remove_shopping_cart_item, update_shopping_cart_item,
    clear_shopping_cart, toggle_item_purchased,
    get_daily_meal_plan, get_recipe_details,
    get_daily_entries
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ShoppingCartStates(StatesGroup):
    selecting_period = State()
    adding_manual_item = State()
    viewing_cart = State()


async def show_shopping_cart_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω—ã."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    if not user or not user.get('registration_complete'):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ üöÄ –ü–æ–µ—Ö–∞–ª–∏!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É
    cart_items = get_shopping_cart_items(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    info_text = (
        "üõí <b>–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
        "üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
        "‚Ä¢ üìÜ –í–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ üç≥ –í—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "‚Ä¢ üìò –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n"
    )

    if cart_items:
        purchased_count = len([item for item in cart_items if item.get('is_purchased')])
        total_count = len(cart_items)

        info_text += f"üìä <b>–í –∫–æ—Ä–∑–∏–Ω–µ:</b> {total_count} –ø–æ–∑–∏—Ü–∏–π\n"
        if purchased_count > 0:
            info_text += f"‚úÖ <b>–ö—É–ø–ª–µ–Ω–æ:</b> {purchased_count} –∏–∑ {total_count}\n"

        info_text += f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {cart_items[0].get('period', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        info_text += "üõçÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</b>\n"
        for item in cart_items[:5]:
            status = "‚úÖ" if item.get('is_purchased') else "üîò"
            name = item['product_name']
            quantity = item['quantity']
            unit = item.get('unit', '–≥')
            info_text += f"{status} {name} ‚Äî {quantity} {unit}\n"

        if len(cart_items) > 5:
            info_text += f"... –∏ –µ—â–µ {len(cart_items) - 5} –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
    else:
        info_text += "üìù <b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n"
        info_text += "üí° –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫!"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton(text="üõí –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:view")],
        [
            InlineKeyboardButton(text="üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:generate"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:refresh")
        ],
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="cart:add_manual"),
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:clear")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cart:back_to_main")]
    ]

    await message.answer(
        info_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def show_cart_items(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    user_id = callback_query.from_user.id
    cart_items = get_shopping_cart_items(user_id)

    if not cart_items:
        await callback_query.message.edit_text(
            "üõí <b>–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
            "üìù –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n\n"
            "üí° –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Ä—É—á–Ω—É—é!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:generate")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:back_to_menu")]
            ])
        )
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏ –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ
    not_purchased = [item for item in cart_items if not item.get('is_purchased')]
    purchased = [item for item in cart_items if item.get('is_purchased')]

    cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</b>\n\n"

    if cart_items:
        period = cart_items[0].get('period', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        cart_text += f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {period}\n"
        cart_text += f"üìä <b>–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:</b> {len(cart_items)}\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    if not_purchased:
        cart_text += "üîò <b>–ö –ø–æ–∫—É–ø–∫–µ:</b>\n"
        for item in not_purchased:
            name = item['product_name']
            quantity = item['quantity']
            unit = item.get('unit', '–≥')
            cart_text += f"‚Ä¢ {name} ‚Äî {quantity} {unit}\n"
        cart_text += "\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    if purchased:
        cart_text += "‚úÖ <b>–ö—É–ø–ª–µ–Ω–æ:</b>\n"
        for item in purchased:
            name = item['product_name']
            quantity = item['quantity']
            unit = item.get('unit', '–≥')
            cart_text += f"‚Ä¢ <s>{name} ‚Äî {quantity} {unit}</s>\n"

    if len(cart_text) > 4000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
        cart_text = cart_text[:3900] + "...\n\nüìù –°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω–∞ —á–∞—Å—Ç—å."

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω–æ–µ", callback_data="cart:mark_purchased"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="cart:remove_item")
        ],
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="cart:add_manual"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cart:refresh")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:back_to_menu")]
    ]

    await callback_query.message.edit_text(
        cart_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def request_generation_period(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã."""
    period_text = (
        "üìÖ <b>–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É</b>\n\n"
        "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤?\n\n"
        "üí° –ö–æ—Ä–∑–∏–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
        "‚Ä¢ –í–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"
    )

    keyboard = [
        [
            InlineKeyboardButton(text="üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="cart:generate:1"),
            InlineKeyboardButton(text="üóì –ù–∞ 3 –¥–Ω—è", callback_data="cart:generate:3")
        ],
        [
            InlineKeyboardButton(text="üìä –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="cart:generate:7")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cart:back_to_menu")]
    ]

    await callback_query.message.edit_text(
        period_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.set_state(ShoppingCartStates.selecting_period)


async def generate_shopping_cart(callback_query: CallbackQuery, state: FSMContext, days: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    user_id = callback_query.from_user.id

    await callback_query.message.edit_text(
        "üîÑ –§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        reply_markup=None
    )

    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–æ—Ä–∑–∏–Ω—É
        clear_shopping_cart(user_id)

        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        all_products = {}
        period_text = f"–Ω–∞ {days} –¥–Ω." if days > 1 else "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        for day_offset in range(days):
            current_date = (datetime.now() + timedelta(days=day_offset)).strftime("%Y-%m-%d")

            # –ò–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã)
            try:
                meal_plan = get_daily_meal_plan(user_id, current_date)
                for meal in meal_plan:
                    if 'recipe_id' in meal and meal['recipe_id']:
                        recipe = get_recipe_details(meal['recipe_id'])
                        if recipe and recipe.get('ingredients'):
                            products = parse_ingredients(recipe['ingredients'])
                            merge_products(all_products, products)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è {current_date}: {e}")

            # –ò–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è - –±–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            try:
                diary_entries = get_daily_entries(user_id, current_date)
                for entry in diary_entries:
                    product_name = entry['food_name']

                    # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ª–æ—Ä–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
                    # –°—Ä–µ–¥–Ω—è—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ~2-4 –∫–∫–∞–ª/–≥
                    estimated_grams = max(50, int(entry['calories'] / 3))

                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
                    product_name = product_name.strip().capitalize()

                    if product_name in all_products:
                        all_products[product_name]['quantity'] += estimated_grams
                    else:
                        all_products[product_name] = {
                            'quantity': estimated_grams,
                            'unit': '–≥'
                        }
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è {current_date}: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        items_added = 0
        for product_name, details in all_products.items():
            try:
                if add_shopping_cart_item(
                        user_id,
                        product_name,
                        details['quantity'],
                        details['unit'],
                        period_text
                ):
                    items_added += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_name}: {e}")

        if items_added > 0:
            success_text = (
                f"‚úÖ <b>–ö–æ—Ä–∑–∏–Ω–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {items_added}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_text}\n\n"
                f"üí° –ö–æ—Ä–∑–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–µ–π –≤ –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ –ø–∏—Ç–∞–Ω–∏—è"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            if items_added <= 5:
                success_text += " –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                for product_name, details in list(all_products.items())[:5]:
                    success_text += f"‚Ä¢ {product_name} ‚Äî {details['quantity']} {details['unit']}\n"
        else:
            success_text = (
                "üòî <b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
                "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –≤—Ä—É—á–Ω—É—é"
            )

        keyboard = [
            [InlineKeyboardButton(text="üõí –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:view")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="cart:add_manual")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:back_to_menu")]
        ]

        await callback_query.message.edit_text(
            success_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã.\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Ä—É—á–Ω—É—é.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="cart:add_manual")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:back_to_menu")]
            ])
        )

    await state.clear()

def parse_ingredients(ingredients_text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º."""
    products = {}

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    lines = ingredients_text.split('\n')

    for line in lines:
        line = line.strip()
        if not line or line.startswith('‚Ä¢') and len(line) <= 2:
            continue

        # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
        line = re.sub(r'^[‚Ä¢\-*]\s*', '', line)

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–ü—Ä–æ–¥—É–∫—Ç - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü–∞"
        patterns = [
            r'(.+?)\s*[-‚Äì‚Äî]\s*(\d+(?:\.\d+)?)\s*(–≥|–∫–≥|–º–ª|–ª|—à—Ç|—Å—Ç\.–ª\.|—á\.–ª\.)',
            r'(.+?)\s*(\d+(?:\.\d+)?)\s*(–≥|–∫–≥|–º–ª|–ª|—à—Ç|—Å—Ç\.–ª\.|—á\.–ª\.)',
            r'(\d+(?:\.\d+)?)\s*(–≥|–∫–≥|–º–ª|–ª|—à—Ç|—Å—Ç\.–ª\.|—á\.–ª\.)\s*(.+)',
        ]

        parsed = False
        for pattern in patterns:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                if pattern.startswith('(\\d'):  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞—á–∞–ª–µ
                    quantity_str, unit, product_name = match.groups()
                else:  # –ø—Ä–æ–¥—É–∫—Ç –≤ –Ω–∞—á–∞–ª–µ
                    product_name, quantity_str, unit = match.groups()

                try:
                    quantity = float(quantity_str)

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–º–º—ã
                    if unit.lower() in ['–∫–≥']:
                        quantity *= 1000
                        unit = '–≥'
                    elif unit.lower() in ['–ª']:
                        quantity *= 1000
                        unit = '–º–ª'
                    elif unit.lower() in ['—Å—Ç.–ª.', '—Å—Ç.–ª']:
                        quantity *= 15  # –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–ª/–≥ –≤ —Å—Ç–æ–ª–æ–≤–æ–π –ª–æ–∂–∫–µ
                        unit = '–≥'
                    elif unit.lower() in ['—á.–ª.', '—á.–ª']:
                        quantity *= 5  # –ø—Ä–∏–º–µ—Ä–Ω–æ 5 –º–ª/–≥ –≤ —á–∞–π–Ω–æ–π –ª–æ–∂–∫–µ
                        unit = '–≥'

                    product_name = product_name.strip().capitalize()

                    if product_name in products:
                        products[product_name]['quantity'] += quantity
                    else:
                        products[product_name] = {
                            'quantity': quantity,
                            'unit': unit
                        }

                    parsed = True
                    break

                except ValueError:
                    continue

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        if not parsed and len(line) > 2:
            product_name = line.strip().capitalize()
            products[product_name] = {
                'quantity': 100,  # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                'unit': '–≥'
            }

    return products


def merge_products(target_dict, source_dict):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å—É–º–º–∏—Ä—É—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    for product_name, details in source_dict.items():
        if product_name in target_dict:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
            if target_dict[product_name]['unit'] == details['unit']:
                target_dict[product_name]['quantity'] += details['quantity']
            else:
                # –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã —Ä–∞–∑–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                new_name = f"{product_name} ({details['unit']})"
                target_dict[new_name] = details
        else:
            target_dict[product_name] = details


async def request_manual_item(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    input_text = (
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤—Ä—É—á–Ω—É—é</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>–•–ª–µ–± ‚Äî 300 –≥</code>\n"
        "‚Ä¢ <code>–ú–æ–ª–æ–∫–æ 1 –ª</code>\n"
        "‚Ä¢ <code>–Ø–π—Ü–∞ - 10 —à—Ç</code>\n"
        "‚Ä¢ <code>–†–∏—Å 500–≥</code>\n\n"
        "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã: –≥, –∫–≥, –º–ª, –ª, —à—Ç"
    )

    keyboard = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cart:back_to_menu")]
    ]

    await callback_query.message.edit_text(
        input_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.set_state(ShoppingCartStates.adding_manual_item)


async def process_manual_item(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    user_id = message.from_user.id
    input_text = message.text.strip()

    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    products = parse_ingredients(input_text)

    if not products:
        await message.answer(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü–∞</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–•–ª–µ–± - 300 –≥</code>",
            parse_mode="HTML"
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
    added_count = 0
    for product_name, details in products.items():
        if add_shopping_cart_item(
                user_id,
                product_name,
                details['quantity'],
                details['unit'],
                "–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é"
        ):
            added_count += 1

    if added_count > 0:
        if added_count == 1:
            product_name = list(products.keys())[0]
            details = products[product_name]
            success_text = (
                f"‚úÖ <b>–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üõí {product_name} ‚Äî {details['quantity']} {details['unit']}"
            )
        else:
            success_text = f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</b> {added_count}"
    else:
        success_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    keyboard = [
        [InlineKeyboardButton(text="üõí –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:view")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="cart:add_manual")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cart:back_to_main")]
    ]

    await message.answer(
        success_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.clear()


async def show_items_for_action(callback_query: CallbackQuery, action: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è (–æ—Ç–º–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å)."""
    user_id = callback_query.from_user.id
    cart_items = get_shopping_cart_items(user_id)

    if not cart_items:
        await callback_query.message.edit_text(
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:view")]
            ])
        )
        return

    if action == "mark":
        title = "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω–æ–µ"
        items_to_show = [item for item in cart_items if not item.get('is_purchased')]
        action_prefix = "cart:mark:"
    else:  # remove
        title = "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
        items_to_show = cart_items
        action_prefix = "cart:delete:"

    if not items_to_show:
        message_text = f"{title}\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:view")]]
    else:
        message_text = f"{title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:"
        keyboard = []

        for item in items_to_show[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            product_name = item['product_name']
            quantity = item['quantity']
            unit = item.get('unit', '–≥')
            button_text = f"{product_name} ({quantity} {unit})"

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            if len(button_text) > 30:
                button_text = button_text[:27] + "..."

            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"{action_prefix}{item['id']}"
                )
            ])

        if len(items_to_show) > 10:
            message_text += f"\n\n–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(items_to_show)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤."

        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cart:view")])

    await callback_query.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def handle_shopping_cart_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω—ã."""
    data = callback_query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω cart callback: {data}")

    try:
        if data == "cart:view":
            await show_cart_items(callback_query, state)

        elif data == "cart:generate":
            await request_generation_period(callback_query, state)

        elif data.startswith("cart:generate:"):
            days = int(data.split(':')[2])
            await generate_shopping_cart(callback_query, state, days)

        elif data == "cart:refresh":
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É (—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥)
            cart_items = get_shopping_cart_items(callback_query.from_user.id)
            if cart_items:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
                period = cart_items[0].get('period', '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
                if '—Å–µ–≥–æ–¥–Ω—è' in period:
                    days = 1
                elif '3' in period:
                    days = 3
                elif '–Ω–µ–¥–µ–ª—é' in period:
                    days = 7
                else:
                    days = 1
                await generate_shopping_cart(callback_query, state, days)
            else:
                await request_generation_period(callback_query, state)

        elif data == "cart:add_manual":
            await request_manual_item(callback_query, state)

        elif data == "cart:mark_purchased":
            await show_items_for_action(callback_query, "mark")

        elif data == "cart:remove_item":
            await show_items_for_action(callback_query, "remove")

        elif data.startswith("cart:mark:"):
            item_id = int(data.split(':')[2])
            if toggle_item_purchased(callback_query.from_user.id, item_id):
                await callback_query.answer("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω–æ–µ!")
                await show_cart_items(callback_query, state)
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ")

        elif data.startswith("cart:delete:"):
            item_id = int(data.split(':')[2])
            if remove_shopping_cart_item(callback_query.from_user.id, item_id):
                await callback_query.answer("üóë –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω!")
                await show_cart_items(callback_query, state)
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

        elif data == "cart:clear":
            if clear_shopping_cart(callback_query.from_user.id):
                await callback_query.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
                await show_shopping_cart_menu_callback(callback_query, state)
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")

        elif data == "cart:back_to_menu":
            await show_shopping_cart_menu_callback(callback_query, state)

        elif data == "cart:back_to_main":
            await return_to_main_menu(callback_query, state)

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ cart: {data}")
            await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_shopping_cart_callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    await callback_query.answer()


async def show_shopping_cart_menu_callback(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã —á–µ—Ä–µ–∑ callback (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞)."""
    user_id = callback_query.from_user.id
    cart_items = get_shopping_cart_items(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    info_text = (
        "üõí <b>–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
        "üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
        "‚Ä¢ üìÜ –í–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ üç≥ –í—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "‚Ä¢ üìò –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n"
    )

    if cart_items:
        purchased_count = len([item for item in cart_items if item.get('is_purchased')])
        total_count = len(cart_items)

        info_text += f"üìä <b>–í –∫–æ—Ä–∑–∏–Ω–µ:</b> {total_count} –ø–æ–∑–∏—Ü–∏–π\n"
        if purchased_count > 0:
            info_text += f"‚úÖ <b>–ö—É–ø–ª–µ–Ω–æ:</b> {purchased_count} –∏–∑ {total_count}\n"

        info_text += f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {cart_items[0].get('period', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        info_text += "üõçÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</b>\n"
        for item in cart_items[:5]:
            status = "‚úÖ" if item.get('is_purchased') else "üîò"
            name = item['product_name']
            quantity = item['quantity']
            unit = item.get('unit', '–≥')
            info_text += f"{status} {name} ‚Äî {quantity} {unit}\n"

        if len(cart_items) > 5:
            info_text += f"... –∏ –µ—â–µ {len(cart_items) - 5} –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
    else:
        info_text += "üìù <b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n"
        info_text += "üí° –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫!"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton(text="üõí –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:view")],
        [
            InlineKeyboardButton(text="üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:generate"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:refresh")
        ],
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="cart:add_manual"),
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:clear")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cart:back_to_main")]
    ]

    await callback_query.message.edit_text(
        info_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def return_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()

    from keyboards import after_calories_keyboard

    await callback_query.message.answer(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=after_calories_keyboard
    )