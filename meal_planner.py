"""
meal_planner.py

–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram-–±–æ—Ç–∞.

–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω –∏ —Ç.–¥.).
- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ (–≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞).
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è (–±—É–¥—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª).
- –ü–µ—Ä–µ–Ω–æ—Å –±–ª—é–¥ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
- –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª—é–¥ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –ø–ª–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å.

–ú–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
- `aiogram` –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API.
- –õ–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è `database`.
- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –º–æ–¥—É–ª—è `keyboards`.
- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ `utils` –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ `config`.

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
"""


import logging
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery

from database import (
    get_user, get_daily_meal_plan, get_saved_recipes,
    add_to_meal_plan, remove_from_meal_plan, clear_meal_plan,
    get_meal_plan_for_type, get_recipe_details, toggle_favorite_recipe,
    add_food_entry
)
from keyboards import create_date_selection_keyboard, create_meal_types_keyboard
from utils import format_date
from config import MEAL_TYPES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
class MealPlanStates(StatesGroup):
    selecting_date = State()
    selecting_meal_type = State()
    selecting_recipe = State()
    viewing_meal_plan = State()
    generating_plan = State()


async def show_meal_planner(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Ü–∏–æ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    await message.answer(
        "üçΩ <b>–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—é—â–∏–π –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    await show_daily_plan(message, state)


async def show_daily_plan(message: types.Message, state: FSMContext, selected_date=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å."""
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
    if selected_date is None:
        selected_date = datetime.now().strftime("%Y-%m-%d")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if state:
        await state.update_data(selected_date=selected_date)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    daily_plan = get_daily_meal_plan(user_id, selected_date)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    meals = {}
    for meal_type in MEAL_TYPES:
        meals[meal_type] = []

    for entry in daily_plan:
        meal_type = entry['meal_type']
        meals[meal_type].append(entry)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
    message_text = f"üçΩ <b>–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {format_date(selected_date)}</b>\n\n"

    if not daily_plan:
        message_text += "–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â–µ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.\n"
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
        for meal_type in MEAL_TYPES:
            meal_entries = meals[meal_type]
            if meal_entries:
                message_text += f"<b>{meal_type}:</b>\n"

                # –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                meal_calories = sum(entry['calories'] for entry in meal_entries)

                for entry in meal_entries:
                    message_text += f"  ‚Ä¢ {entry['name']} ‚Äì {entry['calories']:.0f} –∫–∫–∞–ª\n"

                message_text += f"  –í—Å–µ–≥–æ: {meal_calories:.0f} –∫–∫–∞–ª\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–∞–Ω–æ–º
    keyboard = [
        [
            types.InlineKeyboardButton(text="‚óÄÔ∏è –í—á–µ—Ä–∞", callback_data="plan_date:prev"),
            types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="plan_date:today"),
            types.InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞ ‚ñ∂Ô∏è", callback_data="plan_date:next")
        ],
        [
            types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="plan:add"),
            types.InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="plan:generate")
        ]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if daily_plan:
        keyboard.append([
            types.InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫", callback_data="plan:to_diary"),
            types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="plan:clear")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    for meal_type in MEAL_TYPES:
        if meals[meal_type]:
            keyboard.append([
                types.InlineKeyboardButton(text=f"üëÅ {meal_type}", callback_data=f"plan:{meal_type}")
            ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="plan:back")
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        text=message_text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def handle_plan_date_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    data = callback_query.data.split(':')

    if len(data) > 1:
        date_action = data[1]

        if date_action == "prev":
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –¥–∞—Ç—É
            user_data = await state.get_data()
            current_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
            current_date_obj = datetime.strptime(current_date, "%Y-%m-%d")
            prev_date = (current_date_obj - timedelta(days=1)).strftime("%Y-%m-%d")

            await show_daily_plan(callback_query.message, state, prev_date)
        elif date_action == "next":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
            user_data = await state.get_data()
            current_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
            current_date_obj = datetime.strptime(current_date, "%Y-%m-%d")
            next_date = (current_date_obj + timedelta(days=1)).strftime("%Y-%m-%d")

            await show_daily_plan(callback_query.message, state, next_date)
        elif date_action == "today":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            today = datetime.now().strftime("%Y-%m-%d")
            await show_daily_plan(callback_query.message, state, today)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            await show_daily_plan(callback_query.message, state, date_action)

    await callback_query.answer()


async def start_add_to_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    keyboard = create_meal_types_keyboard()

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞:",
        reply_markup=keyboard
    )

    await state.set_state(MealPlanStates.selecting_meal_type)
    await callback_query.answer()


async def handle_meal_type_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –¥–ª—è –ø–ª–∞–Ω–∞."""
    meal_type = callback_query.data.split(':')[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    await state.update_data(meal_type=meal_type)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
    user_id = callback_query.from_user.id
    recipes = get_saved_recipes(user_id)

    if not recipes:
        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. "
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ—Ü–µ–ø—Ç—ã'."
        )
        await state.clear()
        await callback_query.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    keyboard = []
    for recipe in recipes:
        recipe_name = recipe['name']
        if len(recipe_name) > 30:
            recipe_name = recipe_name[:27] + "..."

        keyboard.append([
            types.InlineKeyboardButton(
                text=f"{'‚òÖ' if recipe['is_favorite'] else '‚òÜ'} {recipe_name} ({recipe['calories']} –∫–∫–∞–ª)",
                callback_data=f"plan_recipe:{recipe['id']}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="return_to_plan_view")
    ])

    await callback_query.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è {meal_type}:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.set_state(MealPlanStates.selecting_recipe)
    await callback_query.answer()


async def handle_recipe_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    recipe_id = int(callback_query.data.split(':')[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_id = callback_query.from_user.id
    meal_type = user_data.get('meal_type')
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –ø–ª–∞–Ω
    plan_id = add_to_meal_plan(user_id, recipe_id, meal_type, selected_date)

    if plan_id:
        await callback_query.message.answer(f"‚úÖ –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–∞–Ω –Ω–∞ {meal_type.lower()}!")
    else:
        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ –≤ –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–ª–∞–Ω–∞
    await state.clear()
    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()


async def view_meal_type_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è."""
    meal_type = callback_query.data.split(':')[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    user_data = await state.get_data()
    user_id = callback_query.from_user.id
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    meal_plan = get_meal_plan_for_type(user_id, meal_type, selected_date)

    if not meal_plan:
        await callback_query.message.answer(f"–ù–∞ {meal_type.lower()} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª—é–¥.")
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üçΩ <b>{meal_type} ({format_date(selected_date)})</b>\n\n"

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    total_calories = 0
    total_protein = 0
    total_fat = 0
    total_carbs = 0

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –±–ª—é–¥–µ
    for i, entry in enumerate(meal_plan, 1):
        message_text += f"{i}. <b>{entry['name']}</b>\n"
        message_text += f"   –ö–∞–ª–æ—Ä–∏–∏: {entry['calories']:.0f} –∫–∫–∞–ª\n"
        message_text += f"   –ë–ñ–£: {entry['protein']:.1f}–≥ / {entry['fat']:.1f}–≥ / {entry['carbs']:.1f}–≥\n\n"

        # –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        total_calories += entry['calories']
        total_protein += entry['protein']
        total_fat += entry['fat']
        total_carbs += entry['carbs']

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    message_text += f"<b>–í—Å–µ–≥–æ –¥–ª—è {meal_type.lower()}:</b>\n"
    message_text += f"–ö–∞–ª–æ—Ä–∏–∏: {total_calories:.0f} –∫–∫–∞–ª\n"
    message_text += f"–ë–ñ–£: {total_protein:.1f}–≥ / {total_fat:.1f}–≥ / {total_carbs:.1f}–≥\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
    for entry in meal_plan:
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å {entry['name'][:20] + '...' if len(entry['name']) > 20 else entry['name']}",
                callback_data=f"delete_plan_entry:{entry['id']}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω—É", callback_data="return_to_plan_view")
    ])

    await callback_query.message.answer(
        message_text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await callback_query.answer()


async def delete_plan_entry(callback_query: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –±–ª—é–¥–æ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    plan_id = int(callback_query.data.split(':')[1])

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    success = remove_from_meal_plan(plan_id)

    if success:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        await callback_query.message.edit_text("‚úÖ –ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è!")
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        await asyncio.sleep(1)
    else:
        await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–ª–∞–Ω–∞
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()


async def clear_plan(callback_query: CallbackQuery, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    keyboard = [
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_clear_plan:{selected_date}"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_clear_plan")
        ]
    ]

    await callback_query.message.answer(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {format_date(selected_date)}?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()


async def confirm_clear_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    date = callback_query.data.split(':')[1]
    user_id = callback_query.from_user.id

    # –û—á–∏—â–∞–µ–º –ø–ª–∞–Ω
    success = clear_meal_plan(user_id, date)

    if success:
        await callback_query.message.answer(f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {format_date(date)} –æ—á–∏—â–µ–Ω!")
    else:
        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
    await show_daily_plan(callback_query.message, state, date)
    await callback_query.answer()


async def cancel_clear_plan(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    await callback_query.message.answer("–û—á–∏—Å—Ç–∫–∞ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()


async def transfer_plan_to_diary(callback_query: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –±–ª—é–¥–∞ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫."""
    user_data = await state.get_data()
    user_id = callback_query.from_user.id
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    daily_plan = get_daily_meal_plan(user_id, selected_date)

    if not daily_plan:
        await callback_query.message.answer("–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—É—Å—Ç.")
        await callback_query.answer()
        return

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫
    for entry in daily_plan:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞
        recipe = get_recipe_details(entry['recipe_id'])

        if recipe:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
            add_food_entry(
                user_id,
                selected_date,
                entry['meal_type'],
                recipe['name'],
                recipe['calories'],
                recipe['protein'],
                recipe['fat'],
                recipe['carbs']
            )

    await callback_query.message.answer(
        f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {format_date(selected_date)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫!"
    )
    await callback_query.answer()


async def generate_meal_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    if not user:
        await callback_query.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        await callback_query.answer()
        return

    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    clear_meal_plan(user_id, selected_date)

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
    goal_calories = user['goal_calories']

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    recipes = get_saved_recipes(user_id)

    if not recipes:
        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. "
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ—Ü–µ–ø—Ç—ã'."
        )
        await callback_query.answer()
        return

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    # –ó–∞–≤—Ç—Ä–∞–∫: 25%, –û–±–µ–¥: 35%, –£–∂–∏–Ω: 30%, –ü–µ—Ä–µ–∫—É—Å: 10%
    meal_calories = {
        "–ó–∞–≤—Ç—Ä–∞–∫": goal_calories * 0.25,
        "–û–±–µ–¥": goal_calories * 0.35,
        "–£–∂–∏–Ω": goal_calories * 0.30,
        "–ü–µ—Ä–µ–∫—É—Å": goal_calories * 0.10
    }

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã
    for meal_type, target_calories in meal_calories.items():
        await callback_query.message.answer(f"–ü–æ–¥–±–∏—Ä–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è {meal_type.lower()}...")

        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±15% –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö
        suitable_recipes = [
            r for r in recipes
            if target_calories * 0.85 <= r['calories'] <= target_calories * 1.15
        ]

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ ¬±25%
        if not suitable_recipes:
            suitable_recipes = [
                r for r in recipes
                if target_calories * 0.75 <= r['calories'] <= target_calories * 1.25
            ]

        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
        if not suitable_recipes and recipes:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ —Å —Ü–µ–ª–µ–≤—ã–º–∏ –∫–∞–ª–æ—Ä–∏—è–º–∏
            recipes_sorted = sorted(recipes, key=lambda r: abs(r['calories'] - target_calories))
            suitable_recipes = [recipes_sorted[0]]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –≤ –ø–ª–∞–Ω
        if suitable_recipes:
            selected_recipe = random.choice(suitable_recipes)
            add_to_meal_plan(user_id, selected_recipe['id'], meal_type, selected_date)

    await callback_query.message.answer("‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()


async def return_to_plan_view(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()



