"""
meal_planner.py

–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram-–±–æ—Ç–∞.

–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω –∏ —Ç.–¥.).
- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ (–≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞).
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è (–±—É–¥—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª).
- –ü–µ—Ä–µ–Ω–æ—Å –±–ª—é–¥ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
- –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª—é–¥ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –ø–ª–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å.

–ú–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
- `aiogram` –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API.
- –õ–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è `database`.
- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –º–æ–¥—É–ª—è `keyboards`.
- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ `utils` –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ `config`.

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
"""


import logging
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery

from database import (
    get_user, get_daily_meal_plan, get_saved_recipes,
    add_to_meal_plan, remove_from_meal_plan, clear_meal_plan,
    get_meal_plan_for_type, get_recipe_details, toggle_favorite_recipe,
    add_food_entry
)
from keyboards import create_date_selection_keyboard, create_meal_types_keyboard
from utils import format_date
from config import MEAL_TYPES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
class MealPlanStates(StatesGroup):
    selecting_date = State()
    selecting_meal_type = State()
    selecting_recipe = State()
    viewing_meal_plan = State()
    generating_plan = State()


async def show_meal_planner(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Ü–∏–æ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    keyboard = [
        [
            types.InlineKeyboardButton(text="üçΩ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="meal_plan:today"),
            types.InlineKeyboardButton(text="üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="meal_plan:week")
        ],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="meal_plan:back")]
    ]

    await message.answer(
        "üçΩ <b>–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—é—â–∏–π –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞:",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def show_daily_plan(message: types.Message, state: FSMContext, selected_date=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å."""
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
    if selected_date is None:
        selected_date = datetime.now().strftime("%Y-%m-%d")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if state:
        await state.update_data(selected_date=selected_date)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    daily_plan = get_daily_meal_plan(user_id, selected_date)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    meals = {}
    for meal_type in MEAL_TYPES:
        meals[meal_type] = []

    for entry in daily_plan:
        meal_type = entry['meal_type']
        meals[meal_type].append(entry)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
    message_text = f"üçΩ <b>–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {format_date(selected_date)}</b>\n\n"

    if not daily_plan:
        message_text += "–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â–µ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.\n"
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
        for meal_type in MEAL_TYPES:
            meal_entries = meals[meal_type]
            if meal_entries:
                message_text += f"<b>{meal_type}:</b>\n"

                # –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                meal_calories = sum(entry['calories'] for entry in meal_entries)

                for entry in meal_entries:
                    message_text += f"  ‚Ä¢ {entry['name']} ‚Äì {entry['calories']:.0f} –∫–∫–∞–ª\n"

                message_text += f"  –í—Å–µ–≥–æ: {meal_calories:.0f} –∫–∫–∞–ª\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–∞–Ω–æ–º
    keyboard = [
        [
            types.InlineKeyboardButton(text="‚óÄÔ∏è –í—á–µ—Ä–∞", callback_data="plan_date:prev"),
            types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="plan_date:today"),
            types.InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞ ‚ñ∂Ô∏è", callback_data="plan_date:next")
        ],
        [
            types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="plan:add"),
            types.InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="plan:generate")
        ]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if daily_plan:
        keyboard.append([
            types.InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫", callback_data="plan:to_diary"),
            types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="plan:clear")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    for meal_type in MEAL_TYPES:
        if meals[meal_type]:
            keyboard.append([
                types.InlineKeyboardButton(text=f"üëÅ {meal_type}", callback_data=f"plan:{meal_type}")
            ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="plan:back")
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        text=message_text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def handle_plan_date_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    data = callback_query.data.split(':')

    if len(data) > 1:
        date_action = data[1]

        if date_action == "prev":
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –¥–∞—Ç—É
            user_data = await state.get_data()
            current_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
            current_date_obj = datetime.strptime(current_date, "%Y-%m-%d")
            prev_date = (current_date_obj - timedelta(days=1)).strftime("%Y-%m-%d")

            await show_daily_plan(callback_query.message, state, prev_date)
        elif date_action == "next":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
            user_data = await state.get_data()
            current_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
            current_date_obj = datetime.strptime(current_date, "%Y-%m-%d")
            next_date = (current_date_obj + timedelta(days=1)).strftime("%Y-%m-%d")

            await show_daily_plan(callback_query.message, state, next_date)
        elif date_action == "today":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            today = datetime.now().strftime("%Y-%m-%d")
            await show_daily_plan(callback_query.message, state, today)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            await show_daily_plan(callback_query.message, state, date_action)

    await callback_query.answer()


async def start_add_to_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    keyboard = create_meal_types_keyboard()

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞:",
        reply_markup=keyboard
    )

    await state.set_state(MealPlanStates.selecting_meal_type)
    await callback_query.answer()


async def handle_meal_type_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –¥–ª—è –ø–ª–∞–Ω–∞."""
    meal_type = callback_query.data.split(':')[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    await state.update_data(meal_type=meal_type)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
    user_id = callback_query.from_user.id
    recipes = get_saved_recipes(user_id)

    if not recipes:
        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. "
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ—Ü–µ–ø—Ç—ã'."
        )
        await state.clear()
        await callback_query.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    keyboard = []
    for recipe in recipes:
        recipe_name = recipe['name']
        if len(recipe_name) > 30:
            recipe_name = recipe_name[:27] + "..."

        keyboard.append([
            types.InlineKeyboardButton(
                text=f"{'‚òÖ' if recipe['is_favorite'] else '‚òÜ'} {recipe_name} ({recipe['calories']} –∫–∫–∞–ª)",
                callback_data=f"plan_recipe:{recipe['id']}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="return_to_plan_view")
    ])

    await callback_query.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è {meal_type}:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.set_state(MealPlanStates.selecting_recipe)
    await callback_query.answer()


async def handle_recipe_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    recipe_id = int(callback_query.data.split(':')[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_id = callback_query.from_user.id
    meal_type = user_data.get('meal_type')
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –ø–ª–∞–Ω
    plan_id = add_to_meal_plan(user_id, recipe_id, meal_type, selected_date)

    if plan_id:
        await callback_query.message.answer(f"‚úÖ –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–∞–Ω –Ω–∞ {meal_type.lower()}!")
    else:
        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ –≤ –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–ª–∞–Ω–∞
    await state.clear()
    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()


async def view_meal_type_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è."""
    meal_type = callback_query.data.split(':')[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    user_data = await state.get_data()
    user_id = callback_query.from_user.id
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    meal_plan = get_meal_plan_for_type(user_id, meal_type, selected_date)

    if not meal_plan:
        await callback_query.message.answer(f"–ù–∞ {meal_type.lower()} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª—é–¥.")
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üçΩ <b>{meal_type} ({format_date(selected_date)})</b>\n\n"

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    total_calories = 0
    total_protein = 0
    total_fat = 0
    total_carbs = 0

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –±–ª—é–¥–µ
    for i, entry in enumerate(meal_plan, 1):
        message_text += f"{i}. <b>{entry['name']}</b>\n"
        message_text += f"   –ö–∞–ª–æ—Ä–∏–∏: {entry['calories']:.0f} –∫–∫–∞–ª\n"
        message_text += f"   –ë–ñ–£: {entry['protein']:.1f}–≥ / {entry['fat']:.1f}–≥ / {entry['carbs']:.1f}–≥\n\n"

        # –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        total_calories += entry['calories']
        total_protein += entry['protein']
        total_fat += entry['fat']
        total_carbs += entry['carbs']

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    message_text += f"<b>–í—Å–µ–≥–æ –¥–ª—è {meal_type.lower()}:</b>\n"
    message_text += f"–ö–∞–ª–æ—Ä–∏–∏: {total_calories:.0f} –∫–∫–∞–ª\n"
    message_text += f"–ë–ñ–£: {total_protein:.1f}–≥ / {total_fat:.1f}–≥ / {total_carbs:.1f}–≥\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
    for entry in meal_plan:
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å {entry['name'][:20] + '...' if len(entry['name']) > 20 else entry['name']}",
                callback_data=f"delete_plan_entry:{entry['id']}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω—É", callback_data="return_to_plan_view")
    ])

    await callback_query.message.answer(
        message_text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await callback_query.answer()


async def delete_plan_entry(callback_query: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –±–ª—é–¥–æ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    plan_id = int(callback_query.data.split(':')[1])

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    success = remove_from_meal_plan(plan_id)

    if success:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        await callback_query.message.edit_text("‚úÖ –ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è!")
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        await asyncio.sleep(1)
    else:
        await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–ª–∞–Ω–∞
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()


async def clear_plan(callback_query: CallbackQuery, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    keyboard = [
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_clear_plan:{selected_date}"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_clear_plan")
        ]
    ]

    await callback_query.message.answer(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {format_date(selected_date)}?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()


async def confirm_clear_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    date = callback_query.data.split(':')[1]
    user_id = callback_query.from_user.id

    # –û—á–∏—â–∞–µ–º –ø–ª–∞–Ω
    success = clear_meal_plan(user_id, date)

    if success:
        await callback_query.message.answer(f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {format_date(date)} –æ—á–∏—â–µ–Ω!")
    else:
        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
    await show_daily_plan(callback_query.message, state, date)
    await callback_query.answer()


async def cancel_clear_plan(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    await callback_query.message.answer("–û—á–∏—Å—Ç–∫–∞ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))
    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()


async def transfer_plan_to_diary(callback_query: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –±–ª—é–¥–∞ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫."""
    user_data = await state.get_data()
    user_id = callback_query.from_user.id
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    daily_plan = get_daily_meal_plan(user_id, selected_date)

    if not daily_plan:
        await callback_query.message.answer("–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—É—Å—Ç.")
        await callback_query.answer()
        return

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫
    for entry in daily_plan:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞
        recipe = get_recipe_details(entry['recipe_id'])

        if recipe:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
            add_food_entry(
                user_id,
                selected_date,
                entry['meal_type'],
                recipe['name'],
                recipe['calories'],
                recipe['protein'],
                recipe['fat'],
                recipe['carbs']
            )

    await callback_query.message.answer(
        f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {format_date(selected_date)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫!"
    )
    await callback_query.answer()


async def generate_meal_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    if not user:
        await callback_query.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        await callback_query.answer()
        return

    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    clear_meal_plan(user_id, selected_date)

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
    goal_calories = user['goal_calories']

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    recipes = get_saved_recipes(user_id)

    if not recipes:
        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. "
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ—Ü–µ–ø—Ç—ã'."
        )
        await callback_query.answer()
        return

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    # –ó–∞–≤—Ç—Ä–∞–∫: 25%, –û–±–µ–¥: 35%, –£–∂–∏–Ω: 30%, –ü–µ—Ä–µ–∫—É—Å: 10%
    meal_calories = {
        "–ó–∞–≤—Ç—Ä–∞–∫": goal_calories * 0.25,
        "–û–±–µ–¥": goal_calories * 0.35,
        "–£–∂–∏–Ω": goal_calories * 0.30,
        "–ü–µ—Ä–µ–∫—É—Å": goal_calories * 0.10
    }

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã
    for meal_type, target_calories in meal_calories.items():
        await callback_query.message.answer(f"–ü–æ–¥–±–∏—Ä–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è {meal_type.lower()}...")

        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±15% –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö
        suitable_recipes = [
            r for r in recipes
            if target_calories * 0.85 <= r['calories'] <= target_calories * 1.15
        ]

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ ¬±25%
        if not suitable_recipes:
            suitable_recipes = [
                r for r in recipes
                if target_calories * 0.75 <= r['calories'] <= target_calories * 1.25
            ]

        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
        if not suitable_recipes and recipes:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ —Å —Ü–µ–ª–µ–≤—ã–º–∏ –∫–∞–ª–æ—Ä–∏—è–º–∏
            recipes_sorted = sorted(recipes, key=lambda r: abs(r['calories'] - target_calories))
            suitable_recipes = [recipes_sorted[0]]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –≤ –ø–ª–∞–Ω
        if suitable_recipes:
            selected_recipe = random.choice(suitable_recipes)
            add_to_meal_plan(user_id, selected_recipe['id'], meal_type, selected_date)

    await callback_query.message.answer("‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()


async def return_to_plan_view(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date', datetime.now().strftime("%Y-%m-%d"))

    await show_daily_plan(callback_query.message, state, selected_date)
    await callback_query.answer()


# –í—ã–Ω–æ—Å–∏–º —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –º–æ–¥—É–ª—è
async def handle_meal_plan_menu(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é —Ä–∞—Ü–∏–æ–Ω–∞."""
    try:
        action = callback_query.data.split(':')[1]

        if action == "today":
            await generate_daily_meal_plan(callback_query, state)
        elif action == "week":
            await generate_weekly_meal_plan(callback_query, state)
        elif action == "back":
            from keyboards import after_calories_keyboard
            try:
                await callback_query.message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            await callback_query.message.answer(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=after_calories_keyboard
            )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_meal_plan_menu: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def generate_daily_meal_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Ü–∏–æ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    if not user:
        await callback_query.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        await callback_query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if not user.get('goal_calories'):
        await callback_query.message.edit_text(
            "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        await callback_query.answer()
        return

    try:
        await callback_query.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        goal_calories = user['goal_calories']
        goal_protein = user['protein']
        goal_fat = user['fat'] 
        goal_carbs = user['carbs']

        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        today = datetime.now().strftime("%Y-%m-%d")

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        clear_meal_plan(user_id, today)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recipes = get_saved_recipes(user_id)

        if not recipes:
            keyboard = [
                [types.InlineKeyboardButton(text="üç≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—Ü–µ–ø—Ç–∞–º", callback_data="recipe:search")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="meal_plan:back")]
            ]
            await callback_query.message.edit_text(
                "üö´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞.\n\n"
                "üí° –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ—Ü–µ–ø—Ç—ã'.\n\n"
                "üîç –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–ª—é–¥–∞ –∏–∑ –±–æ–ª—å—à–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã!",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            await callback_query.answer()
            return

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –±–ª—é–¥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–ª–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        if len(recipes) < 4:
            await create_demo_recipes(user_id)
            recipes = get_saved_recipes(user_id)

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
        meal_distribution = {
            "–ó–∞–≤—Ç—Ä–∞–∫": {"calories": 0.25, "protein": 0.25, "fat": 0.30, "carbs": 0.30},
            "–û–±–µ–¥": {"calories": 0.35, "protein": 0.40, "fat": 0.35, "carbs": 0.35},
            "–£–∂–∏–Ω": {"calories": 0.30, "protein": 0.30, "fat": 0.25, "carbs": 0.25},
            "–ü–µ—Ä–µ–∫—É—Å": {"calories": 0.10, "protein": 0.05, "fat": 0.10, "carbs": 0.10}
        }

        generated_plan = []
        total_actual_calories = 0
        total_actual_protein = 0
        total_actual_fat = 0
        total_actual_carbs = 0

        for meal_type, distribution in meal_distribution.items():
            target_calories = goal_calories * distribution["calories"]
            target_protein = goal_protein * distribution["protein"]
            target_fat = goal_fat * distribution["fat"]
            target_carbs = goal_carbs * distribution["carbs"]

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
            suitable_recipes = []
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤ —É–∑–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (¬±20%)
            for recipe in recipes:
                if (target_calories * 0.8 <= recipe['calories'] <= target_calories * 1.2):
                    suitable_recipes.append(recipe)

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (¬±40%)
            if not suitable_recipes:
                for recipe in recipes:
                    if (target_calories * 0.6 <= recipe['calories'] <= target_calories * 1.4):
                        suitable_recipes.append(recipe)

            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
            if not suitable_recipes:
                suitable_recipes = sorted(recipes, key=lambda r: abs(r['calories'] - target_calories))[:3]

            if suitable_recipes:
                # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ—Ü–µ–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ë–ñ–£
                best_recipe = None
                best_score = float('inf')

                for recipe in suitable_recipes[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º—É–º 5 –ª—É—á—à–∏—Ö –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
                    # –°—á–∏—Ç–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ë–ñ–£
                    calorie_diff = abs(recipe['calories'] - target_calories) / target_calories
                    protein_diff = abs(recipe['protein'] - target_protein) / max(target_protein, 1)
                    fat_diff = abs(recipe['fat'] - target_fat) / max(target_fat, 1)
                    carbs_diff = abs(recipe['carbs'] - target_carbs) / max(target_carbs, 1)

                    # –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
                    score = calorie_diff + protein_diff * 0.3 + fat_diff * 0.3 + carbs_diff * 0.3

                    if score < best_score:
                        best_score = score
                        best_recipe = recipe

                if best_recipe:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
                    add_to_meal_plan(user_id, best_recipe['id'], meal_type, today)
                    generated_plan.append({
                        'meal_type': meal_type,
                        'recipe': best_recipe,
                        'target_calories': target_calories
                    })

                    # –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    total_actual_calories += best_recipe['calories']
                    total_actual_protein += best_recipe['protein']
                    total_actual_fat += best_recipe['fat']
                    total_actual_carbs += best_recipe['carbs']

                    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è
                    recipes = [r for r in recipes if r['id'] != best_recipe['id']]

        if generated_plan:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ü–µ–ª—è–º
            plan_info = {
                'total_calories': total_actual_calories,
                'total_protein': total_actual_protein,
                'total_fat': total_actual_fat,
                'total_carbs': total_actual_carbs,
                'goal_calories': goal_calories,
                'goal_protein': goal_protein,
                'goal_fat': goal_fat,
                'goal_carbs': goal_carbs
            }

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
            await show_generated_daily_plan(callback_query, state, generated_plan, today, plan_info)
        else:
            keyboard = [
                [types.InlineKeyboardButton(text="üç≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="recipe:search")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="meal_plan:back")]
            ]
            await callback_query.message.edit_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–ª—é–¥–∞ –∏–∑ –≤–∞—à–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n"
                "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
                "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –±–ª—é–¥–∞ —Å —Ä–∞–∑–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é\n"
                "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞, –æ–±–µ–¥–∞, —É–∂–∏–Ω–∞ –∏ –ø–µ—Ä–µ–∫—É—Å–æ–≤",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞: {e}")
        keyboard = [
            [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="meal_plan:today")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="meal_plan:back")]
        ]
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    
    await callback_query.answer()


async def create_demo_recipes(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    from database import save_recipe
    
    demo_recipes = [
        {
            "name": "–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —è–≥–æ–¥–∞–º–∏",
            "ingredients": "–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è 50–≥, –ú–æ–ª–æ–∫–æ 200–º–ª, –Ø–≥–æ–¥—ã 100–≥, –ú–µ–¥ 1 —á.–ª.",
            "instructions": "–°–≤–∞—Ä–∏—Ç—å –æ–≤—Å—è–Ω–∫—É –Ω–∞ –º–æ–ª–æ–∫–µ, –¥–æ–±–∞–≤–∏—Ç—å —è–≥–æ–¥—ã –∏ –º–µ–¥",
            "calories": 280,
            "protein": 12,
            "fat": 6,
            "carbs": 45
        },
        {
            "name": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –æ–≤–æ—â–∞–º–∏",
            "ingredients": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 150–≥, –ë—Ä–æ–∫–∫–æ–ª–∏ 100–≥, –ú–æ—Ä–∫–æ–≤—å 80–≥, –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ 1 —Å—Ç.–ª.",
            "instructions": "–ó–∞–ø–µ—á—å –∫—É—Ä–∏—Ü—É —Å –æ–≤–æ—â–∞–º–∏ –≤ –¥—É—Ö–æ–≤–∫–µ",
            "calories": 350,
            "protein": 35,
            "fat": 12,
            "carbs": 15
        },
        {
            "name": "–°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º",
            "ingredients": "–¢—É–Ω–µ—Ü –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 100–≥, –õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞ 50–≥, –ü–æ–º–∏–¥–æ—Ä—ã 100–≥, –û–≥—É—Ä—Ü—ã 80–≥",
            "instructions": "–°–º–µ—à–∞—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∑–∞–ø—Ä–∞–≤–∏—Ç—å –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º",
            "calories": 180,
            "protein": 25,
            "fat": 3,
            "carbs": 8
        },
        {
            "name": "–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏",
            "ingredients": "–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç 150–≥, –û—Ä–µ—Ö–∏ –≥—Ä–µ—Ü–∫–∏–µ 20–≥, –ú–µ–¥ 1 —á.–ª.",
            "instructions": "–°–º–µ—à–∞—Ç—å –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏ –∏ –º–µ–¥–æ–º",
            "calories": 220,
            "protein": 15,
            "fat": 12,
            "carbs": 18
        }
    ]
    
    for recipe in demo_recipes:
        save_recipe(
            user_id,
            recipe["name"],
            recipe["ingredients"],
            recipe["instructions"],
            recipe["calories"],
            recipe["protein"],
            recipe["fat"],
            recipe["carbs"]
        )


async def show_generated_daily_plan(callback_query: CallbackQuery, state: FSMContext, plan, date, plan_info=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    
    if not plan:
        keyboard = [
            [types.InlineKeyboardButton(text="üç≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="recipe:search")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="meal_plan:back")]
        ]
        await callback_query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –±–∞–∑–µ\n"
            "‚Ä¢ –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ –∫–∞–ª–æ—Ä–∏—è–º\n\n"
            "üí° –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        return

    message_text = f"üçΩ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ {format_date(date)}</b>\n\n"

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–ª—é–¥–∞ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    for item in plan:
        recipe = item['recipe']
        meal_type = item['meal_type']
        target_calories = item.get('target_calories', 0)

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        meal_emoji = {
            "–ó–∞–≤—Ç—Ä–∞–∫": "üåÖ",
            "–û–±–µ–¥": "üçΩ",
            "–£–∂–∏–Ω": "üåô", 
            "–ü–µ—Ä–µ–∫—É—Å": "üçé"
        }
        
        emoji = meal_emoji.get(meal_type, "üçΩ")
        message_text += f"{emoji} <b>{meal_type}:</b>\n"
        message_text += f"   ü•ò {recipe['name']}\n"
        message_text += f"   üìä {recipe['calories']:.0f} –∫–∫–∞–ª"
        
        if target_calories > 0:
            diff_percent = ((recipe['calories'] - target_calories) / target_calories) * 100
            if abs(diff_percent) <= 15:
                message_text += " ‚úÖ"
            elif abs(diff_percent) <= 25:
                message_text += " ‚ö†Ô∏è"
            else:
                message_text += " ‚ùó"
        
        message_text += f"\n   ü•© –ë: {recipe['protein']:.1f}–≥ | ü•ë –ñ: {recipe['fat']:.1f}–≥ | üçû –£: {recipe['carbs']:.1f}–≥\n\n"

    # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if plan_info:
        total_calories = plan_info['total_calories']
        total_protein = plan_info['total_protein']
        total_fat = plan_info['total_fat']
        total_carbs = plan_info['total_carbs']
        goal_calories = plan_info['goal_calories']
        goal_protein = plan_info['goal_protein']
        goal_fat = plan_info['goal_fat']
        goal_carbs = plan_info['goal_carbs']

        message_text += "üìà <b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b>\n"
        message_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {total_calories:.0f} / {goal_calories:.0f} –∫–∫–∞–ª"
        
        cal_diff = total_calories - goal_calories
        if abs(cal_diff) <= goal_calories * 0.05:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 5%
            message_text += " ‚úÖ\n"
        elif abs(cal_diff) <= goal_calories * 0.15:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 15%
            message_text += " ‚ö†Ô∏è\n"
        else:
            message_text += " ‚ùó\n"

        message_text += f"ü•© –ë–µ–ª–∫–∏: {total_protein:.1f} / {goal_protein}–≥\n"
        message_text += f"ü•ë –ñ–∏—Ä—ã: {total_fat:.1f} / {goal_fat}–≥\n"
        message_text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f} / {goal_carbs}–≥\n\n"

        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª—è–º
        cal_percentage = (total_calories / goal_calories) * 100
        if 95 <= cal_percentage <= 105:
            message_text += "üéØ –û—Ç–ª–∏—á–Ω–æ! –†–∞—Ü–∏–æ–Ω –∏–¥–µ–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º —Ü–µ–ª—è–º."
        elif 85 <= cal_percentage <= 115:
            message_text += "üëç –•–æ—Ä–æ—à–æ! –†–∞—Ü–∏–æ–Ω –±–ª–∏–∑–æ–∫ –∫ –≤–∞—à–∏–º —Ü–µ–ª—è–º."
        else:
            message_text += "‚ö° –†–∞—Ü–∏–æ–Ω —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–º–µ–Ω—É –±–ª—é–¥."
    else:
        # –ü–æ–¥—Å—á–µ—Ç –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        total_calories = sum(item['recipe']['calories'] for item in plan)
        total_protein = sum(item['recipe']['protein'] for item in plan)
        total_fat = sum(item['recipe']['fat'] for item in plan)
        total_carbs = sum(item['recipe']['carbs'] for item in plan)

        message_text += f"üìà <b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b>\n"
        message_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {total_calories:.0f} –∫–∫–∞–ª\n"
        message_text += f"ü•© –ë–µ–ª–∫–∏: {total_protein:.1f}–≥\n"
        message_text += f"ü•ë –ñ–∏—Ä—ã: {total_fat:.1f}–≥\n"
        message_text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f}–≥"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—ã –±–ª—é–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    keyboard = []

    if len(plan) > 0:
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–º–µ–Ω—ã –±–ª—é–¥
        for item in plan:
            recipe = item['recipe']
            meal_type = item['meal_type']
            recipe_name = recipe['name'][:12] + "..." if len(recipe['name']) > 12 else recipe['name']
            keyboard.append([
                types.InlineKeyboardButton(
                    text=f"üîÑ –ó–∞–º–µ–Ω–∏—Ç—å {recipe_name}",
                    callback_data=f"replace_dish:{recipe['id']}:{meal_type}:{date}"
                )
            ])

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.append([
            types.InlineKeyboardButton(
                text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫",
                callback_data=f"save_plan_to_diary:{date}"
            )
        ])

    keyboard.append([
        types.InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="meal_plan:today"),
        types.InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"show_plan:{date}")
    ])
    
    keyboard.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="meal_plan:back")
    ])

    await callback_query.message.edit_text(
        message_text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def generate_weekly_meal_plan(callback_query: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    await callback_query.message.answer(
        "üìÖ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞</b>\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–¥–µ–ª—å–Ω–æ.",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="meal_plan:back")]
        ])
    )
    await callback_query.answer()


async def handle_replace_dish(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–º–µ–Ω—É –±–ª—é–¥–∞ –≤ —Ä–∞—Ü–∏–æ–Ω–µ."""
    data = callback_query.data.split(':')
    recipe_id = int(data[1])
    meal_type = data[2]
    date = data[3]

    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
    current_recipe = get_recipe_details(recipe_id)
    if not current_recipe:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    target_calories = current_recipe['calories']

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    all_recipes = get_saved_recipes(user_id)
    available_recipes = [r for r in all_recipes if r['id'] != recipe_id]

    if not available_recipes:
        await callback_query.answer("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã")
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —Ä–µ—Ü–µ–ø—Ç—ã
    similar_recipes = [
        r for r in available_recipes
        if target_calories * 0.8 <= r['calories'] <= target_calories * 1.2
    ]

    if not similar_recipes:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö, –±–µ—Ä–µ–º 3 –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
        similar_recipes = sorted(
            available_recipes, 
            key=lambda r: abs(r['calories'] - target_calories)
        )[:3]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–º–µ–Ω—ã
    message_text = f"üîÑ <b>–ó–∞–º–µ–Ω–∞ –±–ª—é–¥–∞ –¥–ª—è {meal_type}</b>\n\n"
    message_text += f"–¢–µ–∫—É—â–µ–µ: {current_recipe['name']} ({current_recipe['calories']} –∫–∫–∞–ª)\n\n"
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ–Ω—É:"

    keyboard = []
    for recipe in similar_recipes[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"{recipe['name']} ({recipe['calories']} –∫–∫–∞–ª)",
                callback_data=f"confirm_replace:{recipe_id}:{recipe['id']}:{meal_type}:{date}"
            )
        ])

    keyboard.append([
        types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"show_plan:{date}")
    ])

    await callback_query.message.answer(
        message_text,
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()


async def confirm_replace_dish(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–º–µ–Ω—É –±–ª—é–¥–∞."""
    data = callback_query.data.split(':')
    old_recipe_id = int(data[1])
    new_recipe_id = int(data[2])
    meal_type = data[3]
    date = data[4]

    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –≤ –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã
    plan_entries = get_meal_plan_for_type(user_id, meal_type, date)
    plan_entry_to_replace = None

    for entry in plan_entries:
        if entry['recipe_id'] == old_recipe_id:
            plan_entry_to_replace = entry
            break

    if plan_entry_to_replace:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
        remove_from_meal_plan(plan_entry_to_replace['id'])

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        add_to_meal_plan(user_id, new_recipe_id, meal_type, date)

        new_recipe = get_recipe_details(new_recipe_id)
        await callback_query.message.answer(
            f"‚úÖ –ë–ª—é–¥–æ –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_recipe['name']}!"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
        await show_daily_plan(callback_query.message, state, date)
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –±–ª—é–¥–∞")

    await callback_query.answer()


async def save_whole_plan_to_diary(callback_query: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫."""
    date = callback_query.data.split(':')[1]
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    daily_plan = get_daily_meal_plan(user_id, date)

    if not daily_plan:
        await callback_query.message.answer("–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—É—Å—Ç.")
        await callback_query.answer()
        return

    try:
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫
        for entry in daily_plan:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞
            recipe = get_recipe_details(entry.get('recipe_id'))

            if recipe:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
                add_food_entry(
                    user_id,
                    date,
                    entry['meal_type'],
                    recipe['name'],
                    recipe['calories'],
                    recipe['protein'],
                    recipe['fat'],
                    recipe['carbs']
                )

        await callback_query.message.answer(
            f"‚úÖ –í–µ—Å—å —Ä–∞—Ü–∏–æ–Ω –Ω–∞ {format_date(date)} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫!"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–Ω–µ–≤–Ω–∏–∫—É
        keyboard = [
            [types.InlineKeyboardButton(text="üìñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–Ω–µ–≤–Ω–∏–∫—É", callback_data="return_to_diary")],
            [types.InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Ü–∏–æ–Ω", callback_data="meal_plan:today")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="meal_plan:back")]
        ]
        
        await callback_query.message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫: {e}")
        await callback_query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫."
        )

    await callback_query.answer()


async def show_plan_for_date(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã."""
    date = callback_query.data.split(':')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_date=date)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
    await show_daily_plan(callback_query.message, state, date)
    await callback_query.answer()