def calculate_bmi(weight, height):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ò–Ω–¥–µ–∫—Å –ú–∞—Å—Å—ã –¢–µ–ª–∞ (–ò–ú–¢).

    Args:
        weight (float): –í–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
        height (float): –†–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö

    Returns:
        float: –ó–Ω–∞—á–µ–Ω–∏–µ –ò–ú–¢
    """
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–æ—Å—Ç –∏–∑ —Å–º –≤ –º–µ—Ç—Ä—ã
    height_m = height / 100
    # –§–æ—Ä–º—É–ª–∞ –ò–ú–¢: –≤–µ—Å (–∫–≥) / (—Ä–æ—Å—Ç (–º))¬≤
    bmi = weight / (height_m ** 2)
    return bmi


def get_bmi_category(bmi):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ò–ú–¢.

    Args:
        bmi (float): –ó–Ω–∞—á–µ–Ω–∏–µ –ò–ú–¢

    Returns:
        str: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ò–ú–¢
    """
    if bmi < 16:
        return "üö® –í—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞"
    elif bmi < 18.5:
        return "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞"
    elif bmi < 25:
        return "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞"
    elif bmi < 30:
        return "‚ö†Ô∏è –ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞ (–ø—Ä–µ–¥–æ–∂–∏—Ä–µ–Ω–∏–µ)"
    elif bmi < 35:
        return "üö® –û–∂–∏—Ä–µ–Ω–∏–µ I —Å—Ç–µ–ø–µ–Ω–∏"
    elif bmi < 40:
        return "üö® –û–∂–∏—Ä–µ–Ω–∏–µ II —Å—Ç–µ–ø–µ–Ω–∏"
    else:
        return "üö® –û–∂–∏—Ä–µ–Ω–∏–µ III —Å—Ç–µ–ø–µ–Ω–∏"


def calculate_tdee(weight, height, age, activity_level, sex):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ (TDEE).

    Args:
        weight (float): –í–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
        height (float): –†–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö
        age (int): –í–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö
        activity_level (str): –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        sex (str): –ü–æ–ª

    Returns:
        float: –ó–Ω–∞—á–µ–Ω–∏–µ TDEE –≤ –∫–∞–ª–æ—Ä–∏—è—Ö
    """
    from config import ACTIVITY_LEVELS

    # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –æ–±–º–µ–Ω–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
    if sex == "–ú—É–∂—á–∏–Ω–∞":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:  # –ñ–µ–Ω—â–∏–Ω–∞
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    # –£—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_multiplier = ACTIVITY_LEVELS.get(activity_level, 1.2)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏
    tdee = bmr * activity_multiplier

    return tdee


def get_goal_calories(tdee, goal):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏.

    Args:
        tdee (float): –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏
        goal (str): –¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        float: –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π
    """
    from config import USER_GOALS

    # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ü–µ–ª–∏
    goal_multiplier = USER_GOALS.get(goal, 1.0)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏
    goal_calories = tdee * goal_multiplier

    return goal_calories


def calculate_macronutrients(calories, weight, goal):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤.

    Args:
        calories (float): –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π
        weight (float): –í–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
        goal (str): –¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    """
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±–µ–ª–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    if goal == "üîª –ü–æ—Ö—É–¥–µ–Ω–∏–µ":
        protein_per_kg = 2.2  # –ë–æ–ª—å—à–µ –±–µ–ª–∫–∞ –ø—Ä–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–∏
    elif goal == "üî∫ –ù–∞–±–æ—Ä –≤–µ—Å–∞":
        protein_per_kg = 1.8  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–ª–∫–∞ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ
    else:  # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ
        protein_per_kg = 2.0  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–∞
    protein = round(weight * protein_per_kg)
    protein_cal = protein * 4  # 1–≥ –±–µ–ª–∫–∞ = 4 –∫–∫–∞–ª

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ (–æ–∫–æ–ª–æ 25% –æ—Ç –æ–±—â–∏—Ö –∫–∞–ª–æ—Ä–∏–π)
    fat_cal = calories * 0.25
    fat = round(fat_cal / 9)  # 1–≥ –∂–∏—Ä–∞ = 9 –∫–∫–∞–ª

    # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–ª–æ—Ä–∏–∏ –∏–¥—É—Ç –Ω–∞ —É–≥–ª–µ–≤–æ–¥—ã
    carbs_cal = calories - protein_cal - fat_cal
    carbs = round(carbs_cal / 4)  # 1–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ = 4 –∫–∫–∞–ª

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–µ
    return {
        "protein": protein,
        "protein_cal": protein_cal,
        "fat": fat,
        "fat_cal": fat_cal,
        "carbs": carbs,
        "carbs_cal": carbs_cal
    }


def get_progress_percentage(current, goal):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏.

    Args:
        current (float): –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        goal (float): –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    Returns:
        int: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
    """
    if goal <= 0:
        return 0
    percentage = (current / goal) * 100
    return min(100, int(percentage))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 100%

def format_date(date_str):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.

    Args:
        date_str (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (YYYY-MM-DD)

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ (DD.MM.YYYY)
    """
    try:
        year, month, day = date_str.split('-')
        return f"{day}.{month}.{year}"
    except:
        return date_str