"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–æ–º "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º".
–†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤, –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –Ω–∏–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏.
"""

import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database import get_user, get_nutritionists, get_nutritionist_by_id

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ConsultationStates(StatesGroup):
    viewing_nutritionists = State()
    viewing_nutritionist_card = State()
    contact_form = State()


async def show_consultation_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    if not user or not user.get('registration_complete'):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ üöÄ –ü–æ–µ—Ö–∞–ª–∏!")
        return

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    info_text = (
        "ü©∫ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º</b>\n\n"
        "üí° <b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?</b>\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –ø–æ –≤–µ—Å—É\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π\n\n"
        "üë®‚Äç‚öïÔ∏è –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏–º–µ—é—Ç –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º "
        "—Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–µ—Ç–æ–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:"
    )

    keyboard = [
        [InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –í—ã–±—Ä–∞—Ç—å –¥–∏–µ—Ç–æ–ª–æ–≥–∞", callback_data="consultation:select_nutritionist")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="consultation:back_to_main")]
    ]

    await message.answer(
        info_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def show_nutritionists_list(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤
    nutritionists = get_nutritionists()

    if not nutritionists:
        await callback_query.message.edit_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–∏–µ—Ç–æ–ª–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="consultation:back_to_main")]
            ])
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        nutritionists=nutritionists,
        current_index=0
    )
    await state.set_state(ConsultationStates.viewing_nutritionists)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∞
    await show_nutritionist_card(callback_query, state, 0)


async def show_nutritionist_card(callback_query: CallbackQuery, state: FSMContext, index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∞."""
    data = await state.get_data()
    nutritionists = data.get('nutritionists', [])

    if not nutritionists or index < 0 or index >= len(nutritionists):
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return

    nutritionist = nutritionists[index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    card_text = (
        f"üë®‚Äç‚öïÔ∏è <b>{nutritionist['full_name']}</b>\n\n"
        f"üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n{nutritionist['education']}\n\n"
        f"üìä <b>–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã:</b> {nutritionist['experience']}\n\n"
        f"üî¨ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:</b>\n{nutritionist['specialization']}\n\n"
        f"üí° <b>–ü–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é:</b>\n{nutritionist['approach']}\n\n"
        f"üìã –î–∏–µ—Ç–æ–ª–æ–≥ {index + 1} –∏–∑ {len(nutritionists)}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"consultation:prev:{index}"))
    if index < len(nutritionists) - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"consultation:next:{index}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º
    keyboard.append([
        InlineKeyboardButton(
            text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º",
            callback_data=f"consultation:contact:{nutritionist['id']}"
        )
    ])

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="consultation:back_to_main")
    ])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(current_index=index)

    await callback_query.message.edit_text(
        card_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


async def handle_navigation(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –¥–∏–µ—Ç–æ–ª–æ–≥–æ–≤."""
    action = callback_query.data.split(':')[1]
    current_index = int(callback_query.data.split(':')[2])

    if action == "prev":
        new_index = current_index - 1
    elif action == "next":
        new_index = current_index + 1
    else:
        await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return

    await show_nutritionist_card(callback_query, state, new_index)
    await callback_query.answer()


async def handle_contact_nutritionist(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å —Å –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º."""
    nutritionist_id = int(callback_query.data.split(':')[2])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–µ—Ç–æ–ª–æ–≥–∞
    nutritionist = get_nutritionist_by_id(nutritionist_id)

    if not nutritionist:
        await callback_query.answer("‚ùå –î–∏–µ—Ç–æ–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    contact_text = (
        f"üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å {nutritionist['full_name']}</b>\n\n"
        f"–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:\n\n"
        f"üí¨ <b>Telegram:</b> @{nutritionist.get('telegram_username', 'nutritionist_bot')}\n"
        f"üìß <b>Email:</b> {nutritionist.get('email', 'consultation@dietbot.ru')}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {nutritionist.get('phone', '+7 (xxx) xxx-xx-xx')}\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {nutritionist.get('work_hours', '–ü–Ω-–ü—Ç 9:00-18:00')}\n\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b> {nutritionist.get('price', '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏')}\n\n"
        f"üìù –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Diet Planner Bot!"
    )

    keyboard = [
        [InlineKeyboardButton(
            text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram",
            url=f"https://t.me/{nutritionist.get('telegram_username', 'nutritionist_bot')}"
        )],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ", callback_data="consultation:back_to_card")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="consultation:back_to_main")]
    ]

    await callback_query.message.edit_text(
        contact_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await callback_query.answer("üí¨ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")


async def handle_consultation_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
    data = callback_query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω consultation callback: {data}")

    try:
        if data == "consultation:select_nutritionist":
            await show_nutritionists_list(callback_query, state)

        elif data.startswith("consultation:prev:") or data.startswith("consultation:next:"):
            await handle_navigation(callback_query, state)

        elif data.startswith("consultation:contact:"):
            await handle_contact_nutritionist(callback_query, state)

        elif data == "consultation:back_to_card":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
            data = await state.get_data()
            current_index = data.get('current_index', 0)
            await show_nutritionist_card(callback_query, state, current_index)

        elif data == "consultation:back_to_main":
            await return_to_main_menu(callback_query, state)

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ consultation: {data}")
            await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_consultation_callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    await callback_query.answer()


async def return_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()

    from keyboards import after_calories_keyboard

    await callback_query.message.answer(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=after_calories_keyboard
    )