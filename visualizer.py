import logging
import io
from datetime import datetime, date, timedelta
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter
import matplotlib
from aiogram.types import Message

matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Agg –±—ç–∫–µ–Ω–¥–∞ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç GUI)
import os
from database import get_user
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from aiogram import Dispatcher

from database import (
    get_user, get_daily_totals, get_daily_water,
    get_weekly_water, get_water_goal
)
from utils import format_date


# –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏–º–ø–æ—Ä—Ç–∞
def get_progress_percentage(current, goal):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    if goal <= 0:
        return 0
    return min(round(current / goal * 100), 100)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
class VisualizationStates(StatesGroup):
    selecting_period = State()
    selecting_chart_type = State()


async def show_statistics(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ üöÄ –ü–æ–≥–Ω–∞–ª–∏!")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = [
        [
            types.InlineKeyboardButton(text="üìä –ö–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£", callback_data="stats:nutrition"),
            types.InlineKeyboardButton(text="üíß –í–æ–¥–∞", callback_data="stats:water")
        ],
        [
            types.InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="stats:back")
        ]
    ]

    await message.answer(
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


'''async def handle_statistics_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    action = callback_query.data.split(':')[1]
    data = callback_query.data

    if action == "nutrition":
        await show_nutrition_statistics(callback_query, state)
    elif action == "water":
        await show_water_statistics(callback_query, state)
    if data == "stats:water":
        await show_water_statistics(callback_query.message)
    elif data == "stats:nutrition":
        await show_nutrition_statistics(callback_query.message)
    elif action == "back":
        from keyboards import after_calories_keyboard
        await callback_query.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=after_calories_keyboard
        )

    await callback_query.answer()'''

async def handle_statistics_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    data = callback_query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {data}")

    if data == "stats:water":
        await show_water_statistics(callback_query.message, state)
    elif data == "stats:nutrition":
        await show_nutrition_statistics(callback_query.message, state)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


async def show_nutrition_statistics(message: types.Message, state: FSMContext):
    logging.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_nutrition_statistics")
    logging.info(f"User ID: {message.from_user.id}")
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    user = get_user(user_id)

    today = datetime.now().strftime("%Y-%m-%d")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    daily_totals = get_daily_totals(user_id, today)
    logging.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
    user_data = get_user(user_id)
    logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã: {user_data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not daily_totals or user:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã.")
        return

    logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")


    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –ë–ñ–£ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {daily_totals['total_calories']} / {user_data['goal_calories']} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–∏: {daily_totals['total_protein']} –≥\n"
        f"–ñ–∏—Ä—ã: {daily_totals['total_fat']} –≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {daily_totals['total_carbs']} –≥\n"
    )

    await message.answer(text, parse_mode="HTML")

'''async def show_nutrition_statistics(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å."""
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)

    if not user:
        await callback_query.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    today = datetime.now().strftime("%Y-%m-%d")
    daily_totals = get_daily_totals(user_id, today)

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    goal_calories = user['goal_calories']
    goal_protein = user['protein']
    goal_fat = user['fat']
    goal_carbs = user['carbs']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if daily_totals['total_calories'] == 0:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫
        keyboard = [
            [types.InlineKeyboardButton(text="üìù –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫", callback_data="goto:diary")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="stats:back")]
        ]

        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è. "
            "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        return

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ü–µ–ª—è–º–∏
    image_path = await create_nutrition_chart(
        daily_totals,
        goal_calories,
        goal_protein,
        goal_fat,
        goal_carbs,
        user_id
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"

    # –ö–∞–ª–æ—Ä–∏–∏
    calories_percent = get_progress_percentage(daily_totals['total_calories'], goal_calories)
    text += f"–ö–∞–ª–æ—Ä–∏–∏: {daily_totals['total_calories']:.0f} / {goal_calories:.0f} –∫–∫–∞–ª ({calories_percent}%)\n"

    # –ë–ñ–£
    protein_percent = get_progress_percentage(daily_totals['total_protein'], goal_protein)
    fat_percent = get_progress_percentage(daily_totals['total_fat'], goal_fat)
    carbs_percent = get_progress_percentage(daily_totals['total_carbs'], goal_carbs)

    text += f"–ë–µ–ª–∫–∏: {daily_totals['total_protein']:.1f} / {goal_protein:.1f} –≥ ({protein_percent}%)\n"
    text += f"–ñ–∏—Ä—ã: {daily_totals['total_fat']:.1f} / {goal_fat:.1f} –≥ ({fat_percent}%)\n"
    text += f"–£–≥–ª–µ–≤–æ–¥—ã: {daily_totals['total_carbs']:.1f} / {goal_carbs:.1f} –≥ ({carbs_percent}%)\n\n"

    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text += "<b>–ê–Ω–∞–ª–∏–∑:</b>\n"

    if abs(calories_percent - 100) <= 10:
        text += "‚úÖ –í—ã —Å–æ–±–ª—é–¥–∞–µ—Ç–µ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n"
    elif calories_percent < 90:
        text += "‚ö†Ô∏è –í—ã –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –º–µ–Ω—å—à–µ –∫–∞–ª–æ—Ä–∏–π, —á–µ–º –Ω—É–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏.\n"
    else:  # calories_percent > 110
        text += "‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç–µ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n"

    # –ê–Ω–∞–ª–∏–∑ –ë–ñ–£
    if protein_percent < 90:
        text += "üìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞.\n"

    if fat_percent > 110:
        text += "üìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤.\n"

    if carbs_percent > 110 and user['goal'] == "üîª –ü–æ—Ö—É–¥–µ–Ω–∏–µ":
        text += "üìå –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è —Å—Ç–æ–∏—Ç —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    with open(image_path, 'rb') as photo:
        await callback_query.message.answer_photo(
            photo=types.BufferedInputFile(
                file=photo.read(),
                filename="nutrition_chart.png"
            ),
            caption=text,
            parse_mode="HTML"
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(image_path)
    except:
        pass'''


async def create_nutrition_chart(data, goal_calories, goal_protein, goal_fat, goal_carbs, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∏—Ç–∞–Ω–∏—è —Å —Ü–µ–ª—è–º–∏."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    categories = ['–ö–∞–ª–æ—Ä–∏–∏/10', '–ë–µ–ª–∫–∏', '–ñ–∏—Ä—ã', '–£–≥–ª–µ–≤–æ–¥—ã']

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    current_values = [
        data['total_calories'] / 10,  # –î–µ–ª–∏–º –Ω–∞ 10 –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        data['total_protein'],
        data['total_fat'],
        data['total_carbs']
    ]

    goal_values = [
        goal_calories / 10,  # –î–µ–ª–∏–º –Ω–∞ 10 –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        goal_protein,
        goal_fat,
        goal_carbs
    ]

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))

    # –ó–∞–¥–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    width = 0.35

    # –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ —Ü–µ–ª–µ–π
    x = range(len(categories))

    # –°—Ç—Ä–æ–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    plt.bar([i - width / 2 for i in x], current_values, width, label='–¢–µ–∫—É—â–µ–µ', color='#4682b8')
    plt.bar([i + width / 2 for i in x], goal_values, width, label='–¶–µ–ª—å', color='#2ca02c', alpha=0.7)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    for i, v in enumerate(current_values):
        if categories[i] == '–ö–∞–ª–æ—Ä–∏–∏/10':
            # –î–ª—è –∫–∞–ª–æ—Ä–∏–π —É–º–Ω–æ–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 10
            plt.text(i - width / 2, v + 2, f'{int(v * 10)}', ha='center')
        else:
            plt.text(i - width / 2, v + 2, f'{v:.1f}', ha='center')

    for i, v in enumerate(goal_values):
        if categories[i] == '–ö–∞–ª–æ—Ä–∏–∏/10':
            # –î–ª—è –∫–∞–ª–æ—Ä–∏–π —É–º–Ω–æ–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 10
            plt.text(i + width / 2, v + 2, f'{int(v * 10)}', ha='center')
        else:
            plt.text(i + width / 2, v + 2, f'{v:.1f}', ha='center')

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ü–µ–ª—è–º–∏', fontsize=16)
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ', fontsize=12)
    plt.xticks(x, categories)
    plt.legend()
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = f"nutrition_chart_{user_id}.png"
    plt.savefig(filename)
    plt.close()

    return filename


async def show_water_statistics(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é."""
    logging.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_water_statistics")

    user_id = callback_query.from_user.id
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)

    if not user:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await callback_query.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
    weekly_data = get_weekly_water(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not any(day['amount'] > 0 for day in weekly_data):
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ç—Ä–µ–∫–µ—Ä –≤–æ–¥—ã
        keyboard = [
            [types.InlineKeyboardButton(text="üíß –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç—Ä–µ–∫–µ—Ä –≤–æ–¥—ã", callback_data="goto:water")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="stats:back")]
        ]

        await callback_query.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é. "
            "–î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç—Ä–µ–∫–µ—Ä –≤–æ–¥—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ
    water_goal = get_water_goal(user_id)

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    image_path = await create_water_chart(weekly_data, water_goal, user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é
    total_week = sum(day['amount'] for day in weekly_data)
    avg_daily = total_week / 7

    text += f"–í—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {total_week} –º–ª\n"
    text += f"–í —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å: {avg_daily:.0f} –º–ª\n"
    text += f"–¶–µ–ª–µ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {water_goal} –º–ª –≤ –¥–µ–Ω—å\n\n"

    # –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º
    non_zero_days = [day for day in weekly_data if day['amount'] > 0]
    if non_zero_days:
        max_day = max(non_zero_days, key=lambda x: x['amount'])
        min_day = min(non_zero_days, key=lambda x: x['amount'])

        text += f"–õ—É—á—à–∏–π –¥–µ–Ω—å: {format_date(max_day['date'])} ‚Äî {max_day['amount']} –º–ª\n"
        text += f"–•—É–¥—à–∏–π –¥–µ–Ω—å: {format_date(min_day['date'])} ‚Äî {min_day['amount']} –º–ª\n\n"

    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    if avg_daily >= water_goal:
        text += "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–æ—Å—Ç–∏–≥–∞–µ—Ç–µ —Å–≤–æ–µ–π —Ü–µ–ª–∏ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤–æ–¥—ã!"
    elif avg_daily >= water_goal * 0.8:
        text += "üëç –•–æ—Ä–æ—à–æ! –í—ã –±–ª–∏–∑–∫–∏ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Å–≤–æ–µ–π —Ü–µ–ª–∏ –ø–æ –≤–æ–¥–µ."
    else:
        text += "üí° –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    with open(image_path, 'rb') as photo:
        await callback_query.message.answer_photo(
            photo=types.BufferedInputFile(
                file=photo.read(),
                filename="water_chart.png"
            ),
            caption=text,
            parse_mode="HTML"
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(image_path)
    except:
        pass


async def create_water_chart(data, water_goal, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é."""
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    dates = [format_date(day['date']) for day in data]
    amounts = [day['amount'] for day in data]

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))

    # –°—Ç—Ä–æ–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    bars = plt.bar(dates, amounts, color='#4682b8', width=0.6)

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å —Ü–µ–ª—å—é
    plt.axhline(y=water_goal, color='red', linestyle='--', alpha=0.7)
    plt.text(0, water_goal + 100, f'–¶–µ–ª—å: {water_goal} –º–ª', color='red')

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    for bar in bars:
        height = bar.get_height()
        if height > 0:
            plt.text(bar.get_x() + bar.get_width() / 2., height + 50,
                     f'{int(height)}',
                     ha='center', va='bottom', rotation=0)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.title('–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é', fontsize=16)
    plt.xlabel('–î–∞—Ç–∞', fontsize=12)
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–ª)', fontsize=12)
    plt.ylim(0, max(max(amounts) + 500 if amounts else water_goal, water_goal + 500))
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = f"water_chart_{user_id}.png"
    plt.savefig(filename)
    plt.close()

    return filename


async def goto_tracker(callback_query: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫–µ—Ä."""
    action = callback_query.data.split(':')[1]

    if action == "diary":
        from diary import show_diary
        await show_diary(callback_query.message, state)
    elif action == "water":
        from water_tracker import water_tracker
        await water_tracker(callback_query.message, state)

    await callback_query.answer()


def register_visualization_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    dp.callback_query.register(handle_statistics_callback, lambda c: c.data.startswith("stats:"))
    dp.callback_query.register(goto_tracker, lambda c: c.data.startswith("goto:"))