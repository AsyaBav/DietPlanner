from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import io
import logging
import os

from database import get_user, get_daily_water, add_water_entry, get_water_goal, set_water_goal, get_weekly_water
from keyboards import create_water_keyboard
from diary import WaterStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def water_tracker(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫–µ—Ä –≤–æ–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ üöÄ –ü–æ–≥–Ω–∞–ª–∏!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().strftime("%Y-%m-%d")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã
    daily_water = get_daily_water(user_id, today)
    water_goal = get_water_goal(user_id)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
    percentage = min(daily_water / water_goal * 100 if water_goal > 0 else 0, 100)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    emoji = "üåä" if percentage >= 100 else "üíß"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = "‚ñ∞" * int(percentage / 10) + "‚ñ±" * (10 - int(percentage / 10))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"<b>{emoji} –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
    message_text += f"üìè <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress_bar} ({percentage:.0f}%)\n\n"
    message_text += f"ü•õ <b>–í—ã–ø–∏—Ç–æ:</b> {daily_water} –º–ª\n"
    message_text += f"üéØ <b>–¶–µ–ª—å:</b> {water_goal} –º–ª\n"
    message_text += f"üîÜ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å:</b> {max(0, water_goal - daily_water)} –º–ª\n\n"
    message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É:"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_water_keyboard()

    await message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")


async def add_water_amount(callback_query: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã."""
    await callback_query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∏–∑ callback_data
    data = callback_query.data.split(":")
    if len(data) < 2:
        return

    try:
        amount = int(data[1])
    except ValueError:
        await callback_query.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    user_id = callback_query.from_user.id
    add_water_entry(user_id, amount)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
    await callback_query.message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–ª –≤–æ–¥—ã!")
    await water_tracker(callback_query.message, state)


async def custom_water_amount(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã."""
    await callback_query.answer()

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–º–ª):")
    await state.set_state(WaterStates.entering_amount)


async def process_water_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã."""
    try:
        amount = int(message.text.strip())
        if amount <= 0:
            raise ValueError

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã (–Ω–µ –±–æ–ª–µ–µ 3 –ª–∏—Ç—Ä–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑)
        if amount > 3000:
            await message.answer(
                "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 3000 –º–ª.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    user_id = message.from_user.id
    add_water_entry(user_id, amount)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
    await state.clear()
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–ª –≤–æ–¥—ã!")
    await water_tracker(message, state)


async def set_water_goal_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—É—é —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ."""
    await callback_query.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é
    user_id = callback_query.from_user.id
    current_goal = get_water_goal(user_id)

    await callback_query.message.answer(
        f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å: {current_goal} –º–ª.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–º–ª):"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    keyboard = [
        [
            types.InlineKeyboardButton(text="1500 –º–ª", callback_data="water_goal_set:1500"),
            types.InlineKeyboardButton(text="2000 –º–ª", callback_data="water_goal_set:2000"),
            types.InlineKeyboardButton(text="2500 –º–ª", callback_data="water_goal_set:2500")
        ],
        [
            types.InlineKeyboardButton(text="3000 –º–ª", callback_data="water_goal_set:3000"),
            types.InlineKeyboardButton(text="3500 –º–ª", callback_data="water_goal_set:3500"),
            types.InlineKeyboardButton(text="4000 –º–ª", callback_data="water_goal_set:4000")
        ],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="water_back")]
    ]
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback_query.message.answer("–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:", reply_markup=markup)


async def process_water_goal(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Ü–µ–ª–∏ –ø–æ –≤–æ–¥–µ."""
    try:
        goal = int(message.text.strip())
        if goal < 500 or goal > 10000:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 500 –¥–æ 10000 –º–ª.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
    user_id = message.from_user.id
    set_water_goal(user_id, goal)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
    await state.clear()
    await message.answer(f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–ª—å –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {goal} –º–ª!")
    await water_tracker(message, state)


async def show_water_statistics(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é."""
    await callback_query.answer()

    user_id = callback_query.from_user.id
    today = datetime.now().strftime("%Y-%m-%d")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
    weekly_data = get_weekly_water(user_id, today)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("temp", exist_ok=True)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    dates = [item['date'] for item in weekly_data]
    amounts = [item['amount'] for item in weekly_data]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    readable_dates = []
    for date_str in dates:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        readable_dates.append(date_obj.strftime("%d.%m"))

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    water_goal = get_water_goal(user_id)

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))
    plt.bar(readable_dates, amounts, color='skyblue')

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ü–µ–ª–∏
    plt.axhline(y=water_goal, color='r', linestyle='-', label=f'–¶–µ–ª—å: {water_goal} –º–ª')

    plt.title('–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–ª)')
    plt.legend()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer_photo(
        types.BufferedInputFile(
            buf.getvalue(),
            filename="water_stats.png"
        ),
        caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
    )

    # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã matplotlib
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    weekly_total = sum(amounts)
    daily_avg = weekly_total / 7
    days_achieved = sum(1 for amount in amounts if amount >= water_goal)

    stats_text = f"<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n"
    stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {weekly_total} –º–ª\n"
    stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {daily_avg:.0f} –º–ª\n"
    stats_text += f"‚Ä¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å: {days_achieved} –∏–∑ 7 –¥–Ω–µ–π\n"
    stats_text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏: {(daily_avg / water_goal * 100):.0f}%"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–∫–µ—Ä—É –≤–æ–¥—ã", callback_data="water_back")]
    ]
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback_query.message.answer(stats_text, reply_markup=markup, parse_mode="HTML")


async def return_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback_query.answer()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –≤–æ–¥—ã —Å–Ω–æ–≤–∞
    await water_tracker(callback_query.message, state)