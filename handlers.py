import logging
from datetime import datetime
from aiogram import Router, F, types
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup

from config import ACTIVITY_LEVELS
from utils import calculate_bmi, get_bmi_category, calculate_tdee, get_goal_calories, calculate_macronutrients
from database import create_user, get_user, update_user

from keyboards import (
    start_keyboard, gender_keyboard, activity_keyboard,
    goal_keyboard, after_calories_keyboard, create_recipes_keyboard
)
from diary import (
    show_diary, handle_diary_callback, process_food_entry,
    handle_food_selection, process_food_amount, confirm_food_entry,
    cancel_food_entry, confirm_clear_diary, cancel_clear_diary,
    handle_recent_food_selection, return_to_meal_selection,
    DiaryStates, WaterStates
)
from water_tracker import (
    water_tracker, add_water_amount, custom_water_amount,
    process_water_amount, set_water_goal_handler,
    process_water_goal, show_water_statistics, return_to_main_menu
)
from meal_planner import (
    show_meal_planner, handle_plan_date_selection, start_add_to_plan,
    handle_meal_type_selection, handle_recipe_selection,
    view_meal_type_plan, transfer_plan_to_diary, clear_plan,
    show_daily_plan, MealPlanStates
)
from recipe_generator import (
    show_recipes_menu, handle_recipes_callback, view_recipe_details,
    toggle_recipe_favorite_status, delete_recipe_handler,
    return_to_recipes_menu, start_recipe_creation, process_recipe_name,
    process_recipe_ingredients, process_recipe_instructions,
    process_recipe_calories, process_recipe_protein,
    process_recipe_fat, process_recipe_carbs, save_recipe_handler,
    cancel_recipe_creation, generate_recipe, recipe_to_diary,process_search_query, show_search_results, handle_search_page,
    toggle_favorite_handler, add_to_menu_handler, show_favorites,
    show_favorites_page,
    view_favorite_recipe, RecipeStates
)
from visualizer import (
    show_statistics, handle_statistics_callback,
    VisualizationStates
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ProfileStates(StatesGroup):
    editing_weight = State()
    editing_goal = State()
    editing_activity = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_activity = State()
    waiting_for_goal = State()


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    router = Router()
    #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥
    @router.callback_query(F.data == "back_to_favorites")
    async def back_to_favorites_handler(callback_query: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."""
        await show_favorites_page(callback_query, state)

    router.callback_query.register(handle_recipes_callback, F.data.startswith("recipe:"))
    router.message.register(process_search_query, StateFilter(RecipeStates.searching))
    router.callback_query.register(handle_search_page, F.data.startswith("search_page:"))
    router.callback_query.register(view_recipe_details, F.data.startswith("view_recipe:"))
    router.callback_query.register(toggle_favorite_handler, F.data.startswith("toggle_fav:"))
    router.callback_query.register(add_to_menu_handler, F.data.startswith("add_to_menu:"))
    router.callback_query.register(show_favorites_page, F.data.startswith("fav_page:"))
    router.callback_query.register(view_favorite_recipe, F.data.startswith("view_fav_recipe:"))
    router.callback_query.register(back_to_favorites_handler, F.data == "back_to_favorites")

    @router.message(RecipeStates.waiting_for_name)
    async def process_recipe_name(message: Message, state: FSMContext):
        await state.update_data(name=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        await state.set_state(RecipeStates.waiting_for_ingredients)

    @router.message(RecipeStates.waiting_for_ingredients)
    async def process_recipe_ingredients(message: Message, state: FSMContext):
        await state.update_data(ingredients=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:")
        await state.set_state(RecipeStates.waiting_for_instructions)

    @router.message(RecipeStates.waiting_for_instructions)
    async def process_recipe_instructions(message: Message, state: FSMContext):
        await state.update_data(instructions=message.text)
        data = await state.get_data()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database import save_recipe

        recipe_id = save_recipe(
            user_id=message.from_user.id,
            name=data['name'],
            ingredients=data['ingredients'],
            instructions=message.text,
            calories=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            protein=0,
            fat=0,
            carbs=0
        )
        if recipe_id:
            await message.answer("‚úÖ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            await show_recipes_menu(message)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞")

        await state.clear()

    @router.callback_query(F.data == "back_to_search")
    async def back_to_search_handler(callback_query: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
        try:
            data = await state.get_data()
            if 'search_results' in data:
                from recipe_generator import show_search_results  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
                await show_search_results(callback_query, state, data.get('current_page', 0))
            else:
                from recipe_generator import show_recipes_menu  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
                await show_recipes_menu(callback_query.message, state)
            await callback_query.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_search_handler: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    router.callback_query.register(edit_weight_handler, F.data == "edit_weight")
    router.callback_query.register(edit_goal_handler, F.data == "edit_goal")
    router.callback_query.register(edit_activity_handler, F.data == "edit_activity")
    router.callback_query.register(recalculate_handler, F.data == "recalculate")
    router.callback_query.register(profile_back_handler, F.data == "profile_back")

    @router.message(ProfileStates.editing_weight)
    async def process_new_weight(message: Message, state: FSMContext):
        try:
            new_weight = float(message.text)
            if new_weight < 30 or new_weight > 300:
                raise ValueError
            user_id = message.from_user.id
            update_user(message.from_user.id, weight=new_weight)

            user = get_user(user_id)
            tdee = calculate_tdee(
                weight=new_weight,
                height=user['height'],
                age=user['age'],
                activity_level=user['activity_level'],
                sex=user['gender']
            )
            new_calories = get_goal_calories(tdee, user['goal'])
            update_user(user_id, goal_calories=new_calories)

            await message.answer("‚úîÔ∏è –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await show_profile(message)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        await state.clear()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –≤–µ—Å–∞
        @router.message(ProfileStates.editing_weight)
        async def process_new_weight(message: Message, state: FSMContext):
            try:
                new_weight = float(message.text)
                if new_weight < 30 or new_weight > 300:
                    raise ValueError
                user_id = message.from_user.id
                update_user(message.from_user.id, weight=new_weight)

                user = get_user(user_id)
                tdee = calculate_tdee(
                    weight=new_weight,
                    height=user['height'],
                    age=user['age'],
                    activity_level=user['activity_level'],
                    sex=user['gender']
                )
                new_calories = get_goal_calories(tdee, user['goal'])
                #update_user(user_id, goal_calories=new_calories)
                macros = calculate_macronutrients(new_calories, new_weight, user['goal'])
                update_user(
                    user_id,
                    goal_calories=new_calories,
                    protein=macros['protein'],
                    fat=macros['fat'],
                    carbs=macros['carbs']
                )
                await message.answer("‚úîÔ∏è –í–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                await show_profile(message)
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")

            await state.clear()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
        @router.message(ProfileStates.editing_goal)
        async def process_new_goal(message: Message, state: FSMContext):
            valid_goals = ["üîª –ü–æ—Ö—É–¥–µ–Ω–∏–µ", "üî∫ –ù–∞–±–æ—Ä –≤–µ—Å–∞", "üîÑ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"]
            if message.text not in valid_goals:
                await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                return
            user_id = message.from_user.id
            update_user(message.from_user.id, goal=message.text)

            # –ü–µ—Ä–µ—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
            user = get_user(user_id)
            tdee = calculate_tdee(
                weight=user['weight'],
                height=user['height'],
                age=user['age'],
                activity_level=user['activity_level'],
                sex=user['gender']
            )
            new_calories = get_goal_calories(tdee, message.text)
            update_user(user_id, goal_calories=new_calories)

            await message.answer("‚úîÔ∏è –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await show_profile(message)
            await state.clear()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        @router.message(ProfileStates.editing_activity)
        async def process_new_activity(message: Message, state: FSMContext):
            valid_activities = list(ACTIVITY_LEVELS.keys())
            if message.text not in valid_activities:
                await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
                return

            update_user(message.from_user.id, activity_level=message.text)
            await message.answer("‚úîÔ∏è –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await show_profile(message)
            await state.clear()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –≤–æ–¥—ã
    router.callback_query.register(add_water_amount, F.data.startswith("water_add:"))
    router.callback_query.register(custom_water_amount, F.data == "water_custom")
    router.callback_query.register(set_water_goal_handler, F.data == "water_goal")
    router.callback_query.register(show_water_statistics, F.data == "water_stats")
    router.callback_query.register(return_to_main_menu, F.data == "main_menu")
    router.callback_query.register(set_water_goal, F.data.startswith("water_goal_set:"))
    router.callback_query.register(water_tracker, F.data == "water_tracker")  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    router.message.register(process_water_amount, StateFilter(WaterStates.entering_amount))
    router.message.register(process_water_goal, StateFilter(WaterStates.setting_goal))

    # –ö–æ–º–∞–Ω–¥—ã
    router.message.register(cmd_start, CommandStart())
    router.message.register(cmd_help, Command("help"))
    router.message.register(cmd_about, Command("about"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    router.message.register(start_registration, F.text == "üöÄ –ü–æ–≥–Ω–∞–ª–∏!")
    router.message.register(show_about, F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    router.message.register(process_name, StateFilter(RegistrationStates.waiting_for_name))
    router.message.register(process_gender, StateFilter(RegistrationStates.waiting_for_gender))
    router.message.register(process_age, StateFilter(RegistrationStates.waiting_for_age))
    router.message.register(process_height, StateFilter(RegistrationStates.waiting_for_height))
    router.message.register(process_weight, StateFilter(RegistrationStates.waiting_for_weight))
    router.message.register(process_activity, StateFilter(RegistrationStates.waiting_for_activity))
    router.message.register(process_goal, StateFilter(RegistrationStates.waiting_for_goal))

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    router.message.register(show_diary, F.text == "üìù –ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫")
    router.message.register(water_tracker, F.text == "üíß –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    router.message.register(show_meal_planner, F.text == "üçΩ –†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å")
    router.message.register(show_recipes_menu, F.text == "üîÑ –†–µ—Ü–µ–ø—Ç—ã")
    router.message.register(show_profile, F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    router.message.register(show_statistics, F.text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    # –ö–æ–ª–±—ç–∫–∏
    router.callback_query.register(handle_diary_callback)
    router.callback_query.register(handle_food_selection, F.data.startswith("select_food:"))
    # router.callback_query.register(handle_food_selection, F.data.startswith("food:"))  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≥–¥–µ-—Ç–æ –µ—â—ë
    router.callback_query.register(confirm_food_entry, F.data == "confirm_food")
    router.callback_query.register(cancel_food_entry, F.data == "cancel_food")
    router.callback_query.register(confirm_clear_diary, F.data == "confirm_clear")
    router.callback_query.register(cancel_clear_diary, F.data == "cancel_clear")
    router.callback_query.register(handle_recent_food_selection, F.data.startswith("recent_food:"))
    router.callback_query.register(return_to_meal_selection, F.data == "return_to_meal_selection")
    router.callback_query.register(show_diary, F.data == "return_to_diary")


    router.callback_query.register(handle_plan_date_selection, F.data.startswith("plan_date:"))
    router.callback_query.register(start_add_to_plan, F.data == "plan:add")
    router.callback_query.register(handle_meal_type_selection,
                                   F.data.startswith("meal_type:") & ~StateFilter(DiaryStates))
    router.callback_query.register(handle_recipe_selection, F.data.startswith("plan_recipe:"))
    router.callback_query.register(view_meal_type_plan, F.data.startswith("plan:"))
    router.callback_query.register(transfer_plan_to_diary, F.data == "plan:to_diary")
    router.callback_query.register(clear_plan, F.data == "plan:clear")
    router.callback_query.register(return_to_main_menu, F.data == "plan:back")

    #router.callback_query.register(handle_recipes_callback, F.data.startswith("recipe:"))
    #router.callback_query.register(view_recipe_details, F.data.startswith("view_recipe:"))
    router.callback_query.register(toggle_recipe_favorite_status, F.data.startswith("toggle_favorite:"))
    router.callback_query.register(delete_recipe_handler, F.data.startswith("delete_recipe:"))
    router.callback_query.register(return_to_recipes_menu, F.data == "return_to_recipes")
    router.callback_query.register(recipe_to_diary, F.data.startswith("recipe_to_diary:"))

    router.callback_query.register(handle_statistics_callback, F.data.startswith("stats:"))

    from diary import (
        add_product_handler,
        enter_weight_handler,
        back_to_list_handler
    )

    router.callback_query.register(add_product_handler, F.data.startswith("add_product:"))
    router.callback_query.register(enter_weight_handler, F.data.startswith("enter_weight:"))
    router.callback_query.register(back_to_list_handler, F.data == "back_to_list")


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    router.message.register(process_food_entry, StateFilter(DiaryStates.entering_food))
    router.message.register(process_food_amount, StateFilter(DiaryStates.entering_amount))

    router.message.register(process_water_amount, StateFilter(WaterStates.entering_amount))
    router.message.register(process_water_goal, StateFilter(WaterStates.setting_goal))

    router.message.register(process_recipe_name, StateFilter(RecipeStates.entering_name))
    router.message.register(process_recipe_ingredients, StateFilter(RecipeStates.entering_ingredients))
    router.message.register(process_recipe_instructions, StateFilter(RecipeStates.entering_instructions))
    router.message.register(process_recipe_calories, StateFilter(RecipeStates.entering_calories))
    router.message.register(process_recipe_protein, StateFilter(RecipeStates.entering_protein))
    router.message.register(process_recipe_fat, StateFilter(RecipeStates.entering_fat))
    router.message.register(process_recipe_carbs, StateFilter(RecipeStates.entering_carbs))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.include_router(router)



async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_user(user_id, message.from_user.first_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é.\n\n"
            "–°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
            "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–π –ò–ú–¢ –∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π\n"
            "‚Ä¢ –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è\n"
            "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –≤–æ–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Ü–∏–æ–Ω—É\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã\n\n"
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
            reply_markup=start_keyboard
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (—É–∫–∞–∑–∞–ª –ª–∏ —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º)
        if not user.get('goal_calories'):
            await message.answer(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n\n"
                "–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º?",
                reply_markup=start_keyboard
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n\n"
                "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
                reply_markup=after_calories_keyboard
            )


async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
    help_text = (
        "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"

        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/about - –û –±–æ—Ç–µ\n\n"

        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ <b>–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫</b> - –≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
        "‚Ä¢ <b>–í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã\n"
        "‚Ä¢ <b>–†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å</b> - —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ <b>–†–µ—Ü–µ–ø—Ç—ã</b> - –ø–æ–∏—Å–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "‚Ä¢ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n\n"

        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–Ω–µ–≤–Ω–∏–∫–æ–º:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "4. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö\n"
        "5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ\n\n"

        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )

    await message.answer(help_text, parse_mode="HTML")


async def cmd_about(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /about."""
    await show_about(message)


async def show_about(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
    about_text = (
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"

        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –≤–µ–¥–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.\n\n"

        "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢)\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ –í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"

        "<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>\n"
        "‚Ä¢ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API Nutritionix –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö\n"
        "‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∑–∞—â–∏—â–µ–Ω—ã\n"
        "‚Ä¢ –†–∞—Å—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞\n\n"

        "–í–µ—Ä—Å–∏—è: 1.0.0\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Diet Planner Team"
    )

    await message.answer(about_text, parse_mode="HTML")


async def start_registration(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await message.answer(
        "üë∂ <b>–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>\n\n"
        "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–±–µ.\n\n"
        "–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        parse_mode="HTML"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    await state.set_state(RegistrationStates.waiting_for_name)


async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏."""
    name = message.text.strip()

    if not name or len(name) > 50:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(name=name)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –ë–î
    user_id = message.from_user.id
    update_user(user_id, name=name)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=gender_keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–∞
    await state.set_state(RegistrationStates.waiting_for_gender)


async def process_gender(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞."""
    gender = message.text.strip()

    if gender not in ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª
    await state.update_data(gender=gender)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª –≤ –ë–î
    user_id = message.from_user.id
    update_user(user_id, gender=gender)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    await state.set_state(RegistrationStates.waiting_for_age)


async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞."""
    try:
        age = int(message.text.strip())

        if age < 12 or age > 120:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 12 –¥–æ 120 –ª–µ—Ç")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 12 –¥–æ 120).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    await state.update_data(age=age)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –ë–î
    user_id = message.from_user.id
    update_user(user_id, age=age)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ—Å—Ç
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–æ—Å—Ç–∞
    await state.set_state(RegistrationStates.waiting_for_height)


async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–æ—Å—Ç–∞."""
    try:
        height = float(message.text.strip().replace(',', '.'))

        if height < 100 or height > 250:
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç
    await state.update_data(height=height)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ—Å—Ç –≤ –ë–î
    user_id = message.from_user.id
    update_user(user_id, height=height)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–µ—Å–∞
    await state.set_state(RegistrationStates.waiting_for_weight)


async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–µ—Å–∞."""
    try:
        weight = float(message.text.strip().replace(',', '.'))

        if weight < 30 or weight > 300:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å
    await state.update_data(weight=weight)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –≤ –ë–î
    user_id = message.from_user.id
    update_user(user_id, weight=weight)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ò–ú–¢
    user_data = await state.get_data()
    height = user_data.get('height')

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ò–ú–¢
    bmi = calculate_bmi(weight, height)
    bmi_category = get_bmi_category(bmi)

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –ò–ú–¢
    await message.answer(
        f"üìä <b>–í–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢): {bmi:.1f}</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {bmi_category}\n\n"
        f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        parse_mode="HTML",
        reply_markup=activity_keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await state.set_state(RegistrationStates.waiting_for_activity)


async def process_activity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    activity_level = message.text.strip()

    if activity_level not in ACTIVITY_LEVELS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await state.update_data(activity_level=activity_level)

    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ë–î
    user_id = message.from_user.id
    update_user(user_id, activity_level=activity_level)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª—å
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å:",
        reply_markup=goal_keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–ª–∏
    await state.set_state(RegistrationStates.waiting_for_goal)


async def process_goal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–∏."""
    goal = message.text.strip()

    valid_goals = ["üîª –ü–æ—Ö—É–¥–µ–Ω–∏–µ", "üî∫ –ù–∞–±–æ—Ä –≤–µ—Å–∞", "üîÑ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞"]
    if goal not in valid_goals:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å
    await state.update_data(goal=goal)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –≤ –ë–î
    user_id = message.from_user.id
    update_user(user_id, goal=goal)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
    user_data = await state.get_data()
    weight = user_data.get('weight')
    height = user_data.get('height')
    age = user_data.get('age')
    activity_level = user_data.get('activity_level')
    gender = user_data.get('gender')

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TDEE (–æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏)
    tdee = calculate_tdee(weight, height, age, activity_level, gender)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π
    goal_calories = get_goal_calories(tdee, goal)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    macros = calculate_macronutrients(goal_calories, weight, goal)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –≤ –ë–î
    update_user(
        user_id,
        goal_calories=goal_calories,
        protein=macros['protein'],
        fat=macros['fat'],
        carbs=macros['carbs'],
        registration_complete=True
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    message_text = (
        "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"

        f"<b>–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {goal_calories:.0f} –∫–∫–∞–ª</b>\n\n"

        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {macros['protein']} –≥ ({macros['protein_cal']:.0f} –∫–∫–∞–ª)\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {macros['fat']} –≥ ({macros['fat_cal']:.0f} –∫–∫–∞–ª)\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {macros['carbs']} –≥ ({macros['carbs_cal']:.0f} –∫–∫–∞–ª)\n\n"

        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n\n"

        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await message.answer(
        message_text,
        parse_mode="HTML",
        reply_markup=after_calories_keyboard
    )

    success = update_user(
        user_id,
        goal=goal,
        goal_calories=goal_calories,
        protein=macros['protein'],
        fat=macros['fat'],
        carbs=macros['carbs'],
        registration_complete=True  # –Ø–≤–Ω—ã–π —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    )

    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await state.clear()


async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ üöÄ –ü–æ–≥–Ω–∞–ª–∏!")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ò–ú–¢
    bmi = calculate_bmi(user['weight'], user['height'])
    bmi_category = get_bmi_category(bmi)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    profile_text = (
        "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"

        f"<b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"‚Ä¢ –ò–º—è: {user['name']}\n"
        f"‚Ä¢ –ü–æ–ª: {user['gender']}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user['age']} –ª–µ—Ç\n"
        f"‚Ä¢ –†–æ—Å—Ç: {user['height']} —Å–º\n"
        f"‚Ä¢ –í–µ—Å: {user['weight']} –∫–≥\n"
        f"‚Ä¢ –ò–ú–¢: {bmi:.1f} ({bmi_category})\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user['activity_level']}\n"
        f"‚Ä¢ –¶–µ–ª—å: {user['goal']}\n\n"

        f"<b>–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:</b>\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {user['goal_calories']:.0f} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {user['protein']} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {user['fat']} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user['carbs']} –≥\n"
        f"‚Ä¢ –í–æ–¥–∞: {user['water_goal']} –º–ª\n\n"

        f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date'][:10]}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = [
        [
            types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å", callback_data="edit_weight"),
            types.InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", callback_data="edit_goal")
        ],
        [
            types.InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="edit_activity"),
            types.InlineKeyboardButton(text="üîç –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏", callback_data="recalculate")
        ],
        [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile_back")]
    ]

    await message.answer(
        profile_text,
        parse_mode="HTML",

        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ handlers.py
async def edit_weight_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–∫–≥):")
    await state.set_state(ProfileStates.editing_weight)
    await callback_query.answer()


async def edit_goal_handler(callback_query: CallbackQuery, state: FSMContext):
    from keyboards import goal_keyboard
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:", reply_markup=goal_keyboard)
    await state.set_state(ProfileStates.editing_goal)
    await callback_query.answer()


async def edit_activity_handler(callback_query: CallbackQuery, state: FSMContext):
    from keyboards import activity_keyboard
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=activity_keyboard)
    await state.set_state(ProfileStates.editing_activity)
    await callback_query.answer()


async def recalculate_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user = get_user(user_id)

    if not user:
        await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        macros = calculate_macronutrients(
            calories=user['goal_calories'],
            weight=user['weight'],
            goal=user['goal']
        )

        update_user(
            user_id,
            protein=macros['protein'],
            fat=macros['fat'],
            carbs=macros['carbs']
        )

        await callback_query.answer("‚úîÔ∏è –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã!")
        await show_profile(callback_query.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞")

async def profile_back_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    try:
        from keyboards import after_calories_keyboard
        await callback_query.message.delete()

        await callback_query.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=after_calories_keyboard
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ profile_back_handler: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é", show_alert=True)


async def set_water_goal(callback_query: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."""
    goal = int(callback_query.data.split(':')[1])
    user_id = callback_query.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ –≤ –ë–î
    from database import set_water_goal
    set_water_goal(user_id, goal)

    await callback_query.message.answer(f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–ª—å –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {goal} –º–ª!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç—Ä–µ–∫–µ—Ä—É –≤–æ–¥—ã
    await water_tracker(callback_query.message, state)
    await callback_query.answer()

async def show_recipes_menu(message: Message):
    await message.answer(
        "üç¥ –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.",
        reply_markup=create_recipes_keyboard()
    )